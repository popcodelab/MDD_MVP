var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.33,1,0.901]],["body/components/AppComponent.html",[0,0.607,1,1.658,2,1.782,3,0.234,4,0.234,5,3.404,6,1.451,7,1.451,8,0.2,9,3.704,10,1.366,11,2.391,12,2.244,13,1.834,14,3.134,15,6.04,16,1.834,17,0.498,18,0.498,19,0.023,20,0.234,21,0.684,22,4.359,23,1.865,24,3.704,25,4.359,26,3.704,27,5.509,28,2.011,29,3.273,30,4.359,31,5.393,32,2.694,33,4.136,34,2.951,35,1.21,36,1.834,37,1.451,38,2.113,39,1.451,40,0.92,41,1.451,42,1.21,43,1.21,44,1.451,45,1.286,46,1.451,47,1.072,48,1.451,49,1.21,50,1.451,51,1.21,52,1.451,53,1.286,54,1.451,55,1.21,56,0.947,57,1.451,58,1.21,59,1.451,60,1.451,61,1.286,62,1.072,63,1.451,64,1.21,65,1.451,66,1.21,67,1.451,68,1.21,69,1.451,70,1.21,71,1.21,72,1.451,73,1.451,74,0.018,75,0.018]],["title/modules/AppModule.html",[76,1.961,77,2.334]],["body/modules/AppModule.html",[0,0.374,1,1.836,2,1.692,3,0.21,4,0.21,8,0.179,10,1.609,12,1.225,13,1.302,17,0.79,18,0.447,19,0.024,20,0.21,21,0.638,23,2.198,35,1.086,47,1.627,74,0.017,75,0.017,76,3.465,77,4.833,78,2.922,79,2.416,80,4.574,81,4.75,82,4.876,83,2.647,84,3.323,85,3.323,86,3.323,87,3.323,88,3.323,89,4.09,90,3.765,91,4.97,92,4.013,93,3.857,94,2.936,95,2.936,96,3.91,97,1.982,98,5.136,99,4.307,100,5.736,101,4.365,102,2.936,103,5.736,104,3.91,105,3.91,106,3.91,107,3.323,108,3.323,109,1.472,110,5.136,111,5.136,112,2.06,113,3.91,114,3.477,115,3.91,116,3.91,117,5.736,118,5.136,119,3.91,120,1.086,121,3.91,122,3.91,123,3.764,124,3.91,125,3.91,126,3.91,127,1.916,128,3.91,129,2.936,130,3.91,131,3.91,132,3.323,133,2.936]],["title/modules/AppRoutingModule.html",[76,1.961,89,2.131]],["body/modules/AppRoutingModule.html",[0,0.671,3,0.231,4,0.231,8,0.197,17,0.813,18,0.492,19,0.024,20,0.231,21,0.534,42,1.517,47,1.343,49,1.517,51,1.517,55,1.517,58,1.667,64,1.517,66,1.517,68,1.517,70,1.517,71,1.195,74,0.018,75,0.018,78,2.448,83,2.913,89,3.377,97,1.349,99,4.103,107,3.657,134,4.303,135,4.303,136,5.464,137,4.276,138,1.523,139,4.303,140,4.303,141,3.231,142,4.303,143,4.103,144,4.303,145,4.303,146,4.303,147,3.699,148,4.303,149,4.276,150,4.303,151,4.303,152,4.303,153,4.303,154,3.231,155,4.303,156,4.303,157,4.303,158,4.303,159,4.303,160,4.303,161,4.303,162,4.895,163,2.913,164,4.303,165,4.303,166,4.303,167,1.195,168,3.231,169,0.995,170,1.968,171,5.959,172,2.448,173,1.968,174,4.303,175,2.659,176,3.657,177,4.303,178,4.303,179,4.303]],["title/injectables/AuthenticationService.html",[180,0.616,181,2.131]],["body/injectables/AuthenticationService.html",[3,0.183,4,0.183,8,0.157,13,1.14,17,0.732,18,0.391,19,0.024,20,0.183,21,0.666,40,0.896,56,1.02,74,0.015,75,0.015,112,1.803,127,2.302,167,1.81,169,1.24,171,3.992,172,2.672,173,3.059,180,0.84,181,2.903,182,1.289,183,2.909,184,1.102,185,1.419,186,4.905,187,2.475,188,1.253,189,4.905,190,0.297,191,0.631,192,3.63,193,6.048,194,2.506,195,0.743,196,2.909,197,4.094,198,1.102,199,4.697,200,3.18,201,3.04,202,1.165,203,0.525,204,1.165,205,3.954,206,4.697,207,4.697,208,3.527,209,2.903,210,4.697,211,4.027,212,3.423,213,3.992,214,3.18,215,3.18,216,3.04,217,3.18,218,3.18,219,4.697,220,1.02,221,3.558,222,3.527,223,3.314,224,1.769,225,3.527,226,3.992,227,4.697,228,4.027,229,3.423,230,4.697,231,4.697,232,3.527,233,3.18,234,1.472,235,1.081,236,0.791,237,0.698,238,3.18,239,5.771,240,2.672,241,3.18,242,2.672,243,4.697,244,4.697,245,4.697,246,3.18,247,4.697,248,4.697,249,4.697,250,1.565,251,2.115,252,2.909,253,1.01,254,2.909,255,2.909,256,1.373,257,1.68,258,1.14,259,1.419,260,3.423,261,3.423]],["title/interfaces/Comment.html",[262,0.957,263,1.961]],["body/interfaces/Comment.html",[3,0.266,4,0.266,8,0.228,19,0.023,20,0.266,43,1.845,74,0.02,75,0.02,190,0.431,191,0.802,203,0.599,235,1.234,262,1.38,263,3.398,264,2.127,265,4.224,266,4.988,267,3.038,268,4.988,269,4.988,270,3.038,271,3.957,272,2.359]],["title/injectables/ConfigurationService.html",[180,0.616,273,2.334]],["body/injectables/ConfigurationService.html",[3,0.203,4,0.203,8,0.174,13,1.26,17,0.645,18,0.433,19,0.024,20,0.203,21,0.47,74,0.017,75,0.017,169,1.56,180,0.898,182,1.425,188,1.091,190,0.328,191,0.675,192,4.569,195,1.226,198,1.254,203,0.49,220,1.397,235,0.898,236,1.305,237,1.15,250,1.73,251,2.338,256,1.518,259,1.388,272,2.084,273,3.402,274,3.215,275,4.238,276,4.238,277,4.238,278,6.013,279,6.013,280,6.013,281,5.026,282,3.784,283,3.716,284,5.11,285,3.164,286,5.88,287,5.026,288,3.784,289,6.013,290,6.668,291,5.319,292,3.784,293,6.013,294,5.319,295,4.271,296,3.784,297,2.859,298,3.784,299,3.774,300,2.841,301,2.561,302,5.026,303,2.581,304,5.026,305,5.026,306,5.026,307,5.026,308,5.026]],["title/components/ContentLayoutComponent.html",[0,0.33,42,0.957]],["body/components/ContentLayoutComponent.html",[0,0.474,1,0.772,2,1.249,3,0.158,4,0.158,6,0.984,7,0.984,8,0.135,10,0.926,11,2.274,12,2.14,16,0.984,17,0.718,18,0.338,19,0.024,20,0.158,21,0.615,23,1.812,28,1.41,35,0.82,36,1.41,37,0.984,38,1.801,39,0.984,40,0.827,41,0.984,42,1.502,43,1.704,44,0.984,45,1.596,46,0.984,47,0.726,48,0.984,49,0.82,50,0.984,51,0.82,52,0.984,53,1.596,54,0.984,55,0.82,56,0.641,57,0.984,58,0.82,59,0.984,60,0.984,61,0.871,62,0.726,63,0.984,64,0.82,65,0.984,66,0.82,67,0.984,68,0.82,69,0.984,70,0.82,71,1.375,72,0.984,73,0.984,74,0.014,75,0.014,97,1.327,109,1.112,120,1.375,123,2.618,138,1.046,143,4.609,175,2.618,184,0.564,185,1.33,187,2.231,188,0.92,190,0.256,191,0.569,194,1.986,195,1.075,198,1.138,201,2.85,202,0.641,203,0.469,204,0.641,220,1.175,234,1.868,235,0.885,236,0.683,237,1.009,240,2.41,257,0.926,258,0.984,259,1.465,309,5.216,310,2.51,311,1.937,312,4.952,313,4.236,314,1.595,315,4.952,316,5.727,317,2.426,318,2.426,319,4.208,320,2.817,321,5.514,322,4.952,323,1.499,324,4.236,325,1.937,326,4.236,327,4.952,328,4.597,329,5.409,330,4.236,331,4.208,332,2.51,333,3.881,334,4.236,335,4.236,336,4.236,337,2.868,338,4.156,339,4.609,340,2.954,341,3.6,342,2.954,343,3.6,344,5.409,345,3.6,346,5.409,347,5.409,348,5.409,349,3.6,350,2.474,351,2.41,352,4.236,353,4.236,354,3.6,355,4.236,356,3.18,357,4.236,358,4.236,359,2.954,360,2.075,361,2.954,362,4.236,363,2.954,364,2.954,365,3.6,366,4.208,367,2.954,368,2.954,369,2.218,370,1.556,371,2.954,372,2.51,373,2.51,374,2.954,375,1.185,376,1.68,377,1.825,378,2.954,379,2.954]],["title/interfaces/Environment.html",[250,1.577,262,0.957]],["body/interfaces/Environment.html",[3,0.258,4,0.258,8,0.221,17,0.55,19,0.024,20,0.258,74,0.019,75,0.019,184,0.919,190,0.417,191,0.786,203,0.584,225,4.397,235,1.129,250,3.005,262,1.753,264,2.058,272,2.102,275,4.933,276,4.933,277,4.933,291,5.583,294,5.583,300,3.612,301,3.257,375,2.533,380,4.088,381,5.856,382,4.06,383,5.583,384,2.357,385,2.357,386,2.357,387,2.357,388,2.2,389,2.357]],["title/injectables/ErrorHandlerService.html",[114,2.334,180,0.616]],["body/injectables/ErrorHandlerService.html",[3,0.194,4,0.194,8,0.166,13,1.207,17,0.676,18,0.415,19,0.024,20,0.194,21,0.686,40,0.922,74,0.016,75,0.016,112,1.91,114,4.002,167,1.356,169,1.502,180,0.873,182,1.365,184,1.055,188,1.061,190,0.315,191,0.656,192,3.74,195,0.787,198,1.129,202,1.2,203,0.513,204,1.2,213,4.151,220,1.061,224,2.226,234,1.992,235,0.987,236,0.838,237,0.739,256,1.454,257,1.531,258,1.207,259,1.201,285,3.271,384,1.777,385,1.777,386,1.777,387,1.777,388,1.658,389,1.777,390,5.243,391,3.081,392,4.002,393,4.885,394,3.668,395,3.668,396,5.524,397,4.885,398,4.885,399,3.626,400,3.928,401,4.885,402,4.885,403,5.243,404,3.626,405,3.653,406,4.885,407,4.885,408,4.303,409,4.151,410,4.885,411,3.626,412,5.911,413,6.17,414,4.885,415,5.524,416,3.626,417,3.081,418,1.658,419,1.91,420,3.626,421,3.626,422,3.081,423,2.722,424,3.626,425,5.524,426,4.885,427,3.626,428,4.885,429,3.626,430,3.626,431,3.626,432,3.626]],["title/components/FooterComponent.html",[0,0.33,45,1.017]],["body/components/FooterComponent.html",[0,0.62,1,1.013,2,1.506,3,0.208,4,0.208,6,1.291,7,1.291,8,0.178,10,1.215,11,2.362,12,2.223,14,2.205,16,1.291,17,0.443,18,0.443,19,0.024,20,0.208,21,0.481,28,1.7,35,1.076,36,1.7,37,1.291,38,2.021,39,1.291,40,0.853,41,1.291,42,1.076,43,1.076,44,1.291,45,1.791,46,1.291,47,0.953,48,1.291,49,1.076,50,1.291,51,1.076,52,1.291,53,1.143,54,1.291,55,1.076,56,1.24,57,1.291,58,1.076,59,1.291,60,1.291,61,1.143,62,0.953,63,1.291,64,1.076,65,1.291,66,1.076,67,1.291,68,1.076,69,1.291,70,1.076,71,1.076,72,1.291,73,1.291,74,0.017,75,0.017,97,1.215,120,1.418,123,3.156,184,0.975,185,1.493,190,0.336,191,0.686,198,0.74,203,0.443,214,2.624,224,1.46,236,0.896,237,0.79,240,2.205,271,2.395,272,1.902,314,1.923,323,2.022,325,2.335,350,1.773,384,1.899,385,1.899,386,1.899,387,1.899,388,1.773,389,1.899,433,3.294,434,6.309,435,5.711,436,5.711,437,6.309,438,5.107,439,3.876,440,3.866,441,5.711,442,3.294,443,3.876,444,3.876,445,3.876,446,3.876,447,3.876,448,5.107,449,5.107,450,3.876]],["title/components/HomeComponent.html",[0,0.33,47,0.848]],["body/components/HomeComponent.html",[0,0.568,1,1.098,2,1.588,3,0.225,4,0.225,5,2.597,6,1.399,7,1.399,8,0.193,10,1.317,11,2.376,12,2.236,14,3.062,16,1.399,17,0.481,18,0.481,19,0.024,20,0.225,21,0.522,28,1.792,32,3.326,34,3.644,35,1.167,36,1.792,37,1.399,38,2.085,39,1.399,40,0.899,41,1.399,42,1.167,43,1.495,44,1.399,45,1.24,46,1.399,47,1.539,48,1.399,49,1.167,50,1.399,51,1.167,52,1.399,53,1.24,54,1.399,55,1.167,56,0.913,57,1.399,58,1.167,59,1.399,60,1.399,61,1.24,62,1.033,63,1.399,64,1.167,65,1.399,66,1.167,67,1.399,68,1.167,69,1.399,70,1.167,71,1.167,72,1.399,73,1.399,74,0.018,75,0.018,172,3.062,173,2.461,297,3.062,323,1.905,451,3.571,452,5.382,453,5.938,454,5.382,455,5.382,456,5.382,457,6.261,458,2.845,459,4.203,460,3.644,461,4.02,462,2.845,463,2.845,464,2.845,465,3.156,466,3.571,467,2.845,468,2.845,469,2.845,470,3.571,471,4.203,472,4.203,473,4.203,474,4.203,475,3.156]],["title/interceptors/JwtInterceptor.html",[92,2.131,476,2.93]],["body/interceptors/JwtInterceptor.html",[3,0.177,4,0.177,8,0.152,13,1.101,17,0.602,18,0.378,19,0.024,20,0.177,21,0.41,40,0.879,56,0.718,74,0.015,75,0.015,92,2.834,112,1.741,120,1.273,169,1.494,170,2.097,172,1.88,173,1.512,180,0.591,184,1.086,185,1.127,188,0.996,190,0.287,194,2.112,198,1.006,202,1.143,203,0.457,204,1.143,205,3.993,209,2.834,216,3.766,220,1.342,221,2.774,224,2.141,235,1.133,237,0.934,242,2.608,253,0.975,257,1.872,259,1.558,303,1.512,311,1.512,350,1.512,351,1.88,375,2.112,376,2.608,377,2.834,403,2.809,405,2.834,423,2.482,477,3.305,478,2.809,479,5.686,480,6.181,481,6.712,482,5.153,483,4.585,484,4.585,485,5.973,486,4.585,487,4.585,488,6.935,489,3.305,490,5.491,491,3.897,492,5.686,493,4.585,494,3.82,495,5.973,496,3.305,497,3.897,498,4.585,499,4.585,500,4.585,501,4.585,502,2.834,503,4.585,504,4.585,505,3.305,506,2.834,507,5.686,508,3.443,509,4.585,510,4.585,511,4.585,512,3.305,513,3.305,514,3.305,515,4.585,516,2.809,517,3.305,518,3.305,519,3.305,520,2.482,521,3.305,522,3.305,523,3.305,524,3.305,525,3.305,526,3.305]],["title/components/LoginComponent.html",[0,0.33,49,0.957]],["body/components/LoginComponent.html",[0,0.506,1,0.636,2,1.083,3,0.13,4,0.13,6,0.81,7,0.81,8,0.112,10,0.763,11,2.206,12,2.076,16,0.81,17,0.738,18,0.278,19,0.024,20,0.13,21,0.302,28,1.223,29,1.827,35,0.676,36,1.223,37,0.81,38,1.641,39,0.81,40,0.823,41,0.81,42,0.676,43,0.676,44,0.81,45,0.718,46,0.81,47,0.598,48,0.81,49,1.368,50,0.81,51,0.676,52,0.81,53,0.718,54,0.81,55,0.676,56,1.148,57,0.81,58,0.676,59,0.81,60,0.81,61,0.718,62,0.598,63,0.81,64,0.676,65,0.81,66,0.676,67,0.81,68,0.676,69,0.81,70,0.676,71,0.676,72,0.81,73,0.81,74,0.012,75,0.012,97,1.151,109,0.917,120,1.02,132,3.121,138,0.861,169,1.455,170,1.68,173,2.834,181,3.567,188,0.798,190,0.211,191,0.493,192,3.764,195,0.528,198,1.233,202,0.798,203,0.565,204,0.798,211,2.734,220,1.148,223,2.27,224,0.917,234,1.906,235,1.199,236,1.334,237,1.176,252,2.068,253,0.718,254,2.068,258,0.81,270,1.68,285,2.023,303,2.253,311,1.68,314,1.383,317,2.168,318,2.168,320,2.516,323,1.3,325,1.68,343,3.121,345,3.121,370,1.282,494,1.504,527,2.068,528,2.33,529,2.734,530,2.734,531,2.734,532,2.995,533,2.516,534,2.995,535,2.516,536,2.516,537,3.673,538,3.673,539,3.759,540,2.734,541,4.423,542,2.734,543,4.423,544,2.734,545,4.423,546,3.513,547,2.596,548,2.27,549,3.336,550,2.434,551,2.47,552,3.283,553,3.673,554,2.434,555,2.434,556,3.121,557,3.121,558,2.27,559,2.758,560,2.486,561,2.27,562,2.434,563,1.504,564,2.434,565,2.596,566,2.27,567,2.434,568,2.803,569,5.421,570,4.927,571,4.927,572,2.434,573,2.089,574,2.434,575,3.567,576,3.045,577,2.434,578,2.434,579,2.434,580,2.434,581,1.504,582,1.384,583,1.504,584,1.192,585,1.504,586,1.192,587,2.068,588,2.068,589,2.068,590,2.089,591,1.827,592,2.803,593,1.504,594,1.504,595,2.434,596,1.504,597,1.827,598,2.068,599,2.434,600,2.434,601,2.068,602,2.434,603,2.434,604,2.068,605,2.434,606,3.121,607,2.434,608,1.648,609,1.648,610,2.434,611,2.068,612,1.384,613,2.068,614,2.434,615,2.434,616,2.068,617,2.434,618,2.434,619,2.434,620,2.068,621,2.434]],["title/interfaces/LoginRequest.html",[211,2.131,262,0.957]],["body/interfaces/LoginRequest.html",[3,0.283,4,0.283,8,0.242,19,0.023,20,0.283,74,0.02,75,0.02,173,2.415,184,1.009,185,1.299,190,0.458,191,0.832,203,0.537,211,3.827,216,2.783,235,1.251,262,1.467,264,2.26,546,3.57,569,5.759,622,4.489]],["title/interfaces/LoginResponse.html",[223,2.131,262,0.957]],["body/interfaces/LoginResponse.html",[3,0.287,4,0.287,8,0.245,19,0.023,20,0.287,74,0.02,75,0.02,167,1.484,173,2.444,184,1.021,185,1.314,190,0.464,191,0.837,203,0.464,216,2.816,223,3.854,235,1.18,262,1.484,264,2.287,482,5.202,623,4.542,624,5.345]],["title/injectables/MatSidenavService.html",[180,0.616,333,2.131]],["body/injectables/MatSidenavService.html",[0,0.473,3,0.158,4,0.158,8,0.135,13,0.979,17,0.483,18,0.336,19,0.024,20,0.158,21,0.365,24,2.499,40,0.491,74,0.014,75,0.014,120,1.652,133,3.171,167,0.817,169,1.376,180,0.755,182,1.108,184,0.562,185,1.038,187,1.549,188,0.917,190,0.255,191,0.567,194,2.659,198,1.137,201,2.224,202,0.639,203,0.468,204,0.639,220,1.292,222,3.171,224,1.108,234,1.921,236,0.68,237,0.599,246,2.859,256,1.18,257,0.922,259,1.327,321,5.727,328,4.588,331,4.588,333,2.609,337,1.991,338,4.442,339,5.06,341,3.588,365,4.858,366,5.33,369,2.208,375,2.721,376,3.252,377,2.609,384,1.441,385,1.441,386,1.441,387,1.441,388,1.345,389,1.441,502,3.533,506,2.609,625,5.21,626,2.499,627,6.13,628,4.222,629,4.588,630,2.941,631,2.859,632,4.222,633,4.222,634,2.941,635,4.222,636,2.941,637,4.222,638,4.222,639,2.941,640,3.588,641,4.858,642,3.709,643,4.222,644,4.222,645,2.941,646,4.222,647,4.94,648,2.941,649,6.688,650,4.562,651,4.222,652,4.222,653,4.222,654,4.94,655,4.222,656,2.941,657,2.941,658,2.941,659,5.428,660,4.94,661,2.941,662,2.941,663,2.941,664,2.941,665,4.222,666,2.941,667,2.499,668,2.208,669,2.941,670,2.941,671,2.941,672,2.941,673,5.717,674,2.941,675,2.941,676,4.222,677,3.588,678,2.941,679,4.222,680,2.941,681,4.222,682,2.941,683,2.941,684,2.941,685,2.941,686,4.94,687,2.941,688,4.222,689,2.941]],["title/modules/MaterialModule.html",[76,1.961,90,1.961]],["body/modules/MaterialModule.html",[3,0.232,4,0.232,8,0.198,17,0.784,18,0.494,19,0.024,20,0.232,21,0.537,35,1.201,74,0.018,75,0.018,76,2.46,78,2.46,79,2.672,80,3.247,81,3.247,82,3.247,83,4.074,90,4.071,93,4.115,94,3.247,95,3.247,97,1.717,99,4.115,317,3.456,369,3.247,370,2.278,384,2.119,385,2.119,386,2.119,387,2.119,388,1.977,389,2.119,533,4.012,535,4.012,583,2.672,584,2.119,585,2.672,586,2.119,690,3.675,691,3.675,692,3.675,693,5.296,694,4.324,695,6.017,696,6.017,697,2.672,698,6.017,699,6.017,700,6.017,701,3.675]],["title/components/MeComponent.html",[0,0.33,51,0.957]],["body/components/MeComponent.html",[0,0.516,1,0.527,2,0.937,3,0.108,4,0.108,5,1.246,6,0.671,7,0.671,8,0.092,10,0.632,11,2.131,12,2.005,14,1.807,16,0.671,17,0.725,18,0.231,19,0.024,20,0.108,21,0.25,28,1.058,32,1.246,35,0.56,36,1.058,37,0.671,38,1.485,39,0.671,40,0.81,41,0.671,42,0.56,43,1.092,44,0.671,45,0.595,46,0.671,47,0.496,48,0.671,49,0.56,50,0.671,51,1.238,52,0.671,53,0.595,54,0.671,55,0.56,56,1.054,57,0.671,58,0.56,59,0.671,60,0.671,61,0.595,62,0.496,63,0.671,64,0.56,65,0.671,66,0.56,67,0.671,68,0.56,69,0.671,70,0.56,71,1.347,72,0.671,73,0.671,74,0.01,75,0.01,97,0.996,109,0.759,120,0.882,133,2.385,138,0.714,167,1.741,169,1.292,170,1.453,185,1.097,188,0.69,190,0.175,191,0.427,195,0.438,198,1.21,202,0.854,203,0.544,204,0.854,218,2.151,220,1.171,234,1.881,235,1.052,236,1.247,237,1.099,253,0.595,258,0.671,259,0.496,267,0.922,270,2.745,272,1.309,297,1.807,303,2.357,311,1.453,314,1.196,323,1.125,350,1.453,351,1.807,360,0.988,375,1.274,418,0.922,419,1.062,458,1.365,460,1.365,461,1.365,462,1.365,463,1.365,464,1.365,467,2.661,468,3.652,469,1.365,528,2.071,529,2.429,530,2.429,531,2.429,532,2.661,533,2.236,534,2.661,535,2.236,536,2.236,540,2.429,542,2.429,544,2.429,546,1.062,547,2.35,548,1.963,549,3.019,551,2.205,552,3.068,558,1.963,559,2.385,561,1.963,563,1.246,565,2.944,566,1.246,568,2.537,573,3.415,575,3.333,576,2.756,581,1.246,582,1.147,583,1.246,584,0.988,585,1.246,586,0.988,588,1.714,590,1.147,592,2.537,593,1.246,594,1.246,596,1.246,697,1.246,702,1.714,703,2.236,704,2.952,705,3.34,706,2.661,707,2.661,708,2.661,709,2.661,710,2.952,711,2.016,712,2.952,713,3.177,714,2.661,715,3.34,716,4.852,717,3.71,718,4.46,719,2.756,720,4.46,721,3.177,722,1.514,723,3.068,724,2.016,725,2.016,726,2.016,727,2.151,728,2.151,729,2.385,730,3.177,731,3.177,732,3.177,733,3.177,734,2.016,735,2.385,736,2.7,737,2.016,738,2.016,739,2.016,740,3.177,741,2.016,742,1.147,743,2.7,744,2.7,745,2.016,746,2.016,747,2.7,748,2.7,749,2.016,750,2.016,751,2.016,752,2.307,753,2.016,754,2.016,755,3.177,756,1.514,757,2.016,758,1.514,759,1.246,760,3.177,761,2.385,762,2.016,763,2.7,764,1.365,765,1.365,766,1.365,767,1.714,768,1.714,769,2.016,770,4.46,771,3.931,772,2.016,773,1.714,774,1.714,775,2.016,776,1.714,777,2.016,778,2.016,779,3.931,780,1.714,781,1.514,782,1.714,783,2.016,784,2.016,785,2.016,786,2.016,787,2.016,788,2.016,789,2.016,790,1.514,791,1.714,792,2.016,793,2.016,794,1.714,795,1.714,796,3.177,797,1.714,798,1.714,799,1.714,800,1.714,801,2.7,802,2.7,803,3.177,804,2.151,805,2.385,806,2.385,807,2.7,808,3.349,809,2.661,810,1.514,811,1.514,812,1.514,813,1.514,814,1.514,815,2.385,816,2.385,817,2.385,818,2.661,819,2.385,820,1.514,821,1.514,822,1.714,823,1.714,824,1.714,825,1.714]],["title/components/NavbarComponent.html",[0,0.33,53,1.017]],["body/components/NavbarComponent.html",[0,0.58,1,1.007,2,1.501,3,0.207,4,0.207,6,1.283,7,1.283,8,0.177,10,1.208,11,2.353,12,2.214,16,1.283,17,0.754,18,0.441,19,0.024,20,0.207,21,0.478,28,1.694,35,1.07,36,1.694,37,1.283,38,2.017,39,1.283,40,0.951,41,1.283,42,1.07,43,1.07,44,1.283,45,1.137,46,1.283,47,0.948,48,1.283,49,1.07,50,1.283,51,1.07,52,1.283,53,1.857,54,1.283,55,1.07,56,0.837,57,1.283,58,1.07,59,1.283,60,1.283,61,1.137,62,0.948,63,1.283,64,1.07,65,1.283,66,1.07,67,1.283,68,1.07,69,1.283,70,1.07,71,1.581,72,1.283,73,1.283,74,0.017,75,0.017,91,4.276,97,1.594,109,1.451,120,1.413,123,2.382,127,1.888,138,1.364,175,3.144,185,0.948,188,1.105,190,0.334,194,2.284,195,0.837,198,0.972,202,0.837,203,0.334,204,0.837,220,0.837,234,1.594,258,1.283,301,2.609,314,1.916,317,2.791,318,2.791,319,4.84,323,1.801,325,2.327,332,3.275,333,3.997,338,2.609,339,2.894,370,2.03,372,3.275,373,3.275,384,1.888,385,1.888,386,1.888,387,1.888,388,1.762,389,1.888,586,1.888,590,2.192,629,5.147,650,2.609,693,4.276,701,3.275,826,3.275,827,5.087,828,5.695,829,5.087,830,5.087,831,3.854,832,3.854,833,3.854,834,2.894,835,3.854]],["title/components/NewPostComponent.html",[0,0.33,55,0.957]],["body/components/NewPostComponent.html",[0,0.399,1,0.578,2,1.007,3,0.119,4,0.119,6,0.736,7,0.736,8,0.101,10,0.693,11,2.169,12,2.041,16,0.736,17,0.75,18,0.253,19,0.024,20,0.119,21,0.275,28,1.137,35,0.614,36,1.137,37,0.736,38,1.561,39,0.736,40,0.846,41,0.736,42,0.614,43,1.734,44,0.736,45,0.652,46,0.736,47,0.544,48,0.736,49,0.614,50,0.736,51,0.614,52,0.736,53,0.652,54,0.736,55,1.302,56,1.402,57,0.736,58,0.614,59,0.736,60,0.736,61,0.652,62,1.317,63,0.736,64,0.614,65,0.736,66,0.614,67,0.736,68,0.614,69,0.736,70,0.614,71,1.407,72,0.736,73,0.736,74,0.011,75,0.011,97,1.07,109,0.833,120,0.948,138,0.783,154,4.848,169,1.333,170,1.561,188,0.741,190,0.192,191,0.459,195,0.48,198,1.221,202,0.906,203,0.555,204,0.906,220,1.163,234,1.807,235,1.13,236,1.29,237,1.138,253,0.652,258,0.736,259,0.839,285,1.907,303,2.636,311,1.561,314,1.286,317,2.043,318,2.043,323,1.209,325,1.561,360,3.099,370,1.165,375,1.881,400,3.45,417,1.88,418,1.011,419,1.165,494,1.367,528,2.197,529,2.577,530,2.577,531,2.577,532,2.823,533,2.372,534,2.823,535,2.372,536,2.372,540,2.577,542,2.577,544,2.577,547,2.47,548,2.11,549,3.174,561,2.11,563,2.11,565,2.67,568,2.668,575,3.734,576,3.31,581,1.367,582,1.258,583,1.367,584,1.084,585,1.367,586,1.084,590,1.258,592,2.668,593,1.367,594,1.367,596,2.11,597,1.661,612,1.258,703,2.372,714,2.823,719,2.898,742,1.258,752,2.632,759,1.367,764,2.311,765,1.497,766,2.311,790,3.131,805,2.564,836,5.487,837,1.88,838,2.823,839,4.17,840,4.17,841,3.414,842,3.414,843,3.131,844,3.414,845,4.689,846,2.212,847,3.047,848,3.176,849,2.212,850,3.414,851,2.212,852,2.212,853,2.212,854,2.212,855,2.212,856,2.212,857,2.212,858,2.212,859,2.212,860,2.212,861,4.17,862,4.689,863,2.902,864,2.212,865,2.212,866,2.212,867,2.212,868,1.88,869,1.661,870,2.212,871,1.497,872,2.212,873,2.212,874,2.212,875,2.212,876,1.88,877,1.88,878,1.661,879,2.212,880,2.212,881,1.88,882,2.902,883,2.212,884,2.212,885,1.88,886,1.88,887,2.212,888,2.212,889,2.212,890,2.212,891,2.212,892,2.212,893,2.212,894,2.212,895,2.902,896,1.88,897,1.661,898,1.88,899,1.88,900,2.212,901,2.212,902,2.212,903,2.212,904,1.88,905,1.88,906,2.902,907,2.212,908,2.212,909,2.212,910,2.212,911,1.88,912,1.88]],["title/components/PageNotFoundComponent.html",[0,0.33,58,0.957]],["body/components/PageNotFoundComponent.html",[0,0.614,1,1.067,2,1.558,3,0.219,4,0.219,6,1.359,7,1.359,8,0.187,10,1.279,11,2.368,12,2.229,16,1.359,17,0.708,18,0.467,19,0.024,20,0.219,21,0.769,23,2.26,28,1.759,35,1.133,36,1.759,37,1.359,38,2.062,39,1.359,40,0.882,41,1.359,42,1.133,43,1.133,44,1.359,45,1.204,46,1.359,47,1.004,48,1.359,49,1.133,50,1.359,51,1.133,52,1.359,53,1.204,54,1.359,55,1.133,56,0.886,57,1.359,58,1.824,59,2.316,60,1.359,61,1.204,62,1.004,63,1.359,64,1.133,65,1.359,66,1.133,67,1.359,68,1.133,69,1.359,70,1.133,71,1.133,72,1.359,73,1.359,74,0.017,75,0.017,97,1.655,120,1.467,138,1.445,141,3.065,184,0.78,185,1.299,195,0.886,314,1.989,318,2.87,323,1.87,325,2.415,394,3.966,536,3.331,586,2,913,3.469,914,3.469,915,6.57,916,5.856,917,5.282,918,5.282,919,4.082,920,3.966,921,5.282]],["title/interfaces/Post.html",[62,0.848,262,0.957]],["body/interfaces/Post.html",[3,0.254,4,0.254,8,0.217,19,0.024,20,0.254,43,1.814,62,1.426,74,0.019,75,0.019,190,0.411,191,0.779,203,0.61,235,1.276,262,1.315,264,2.026,266,4.907,267,2.988,269,4.907,270,2.988,271,3.874,272,2.377,360,3.202,742,3.717,922,4.023,923,6.534,924,6.534]],["title/components/PostCommentComponent.html",[0,0.33,61,1.017]],["body/components/PostCommentComponent.html",[0,0.52,1,0.918,2,1.41,3,0.188,4,0.188,6,1.169,7,1.169,8,0.161,10,1.101,11,2.327,12,2.19,16,1.169,17,0.667,18,0.402,19,0.024,20,0.188,21,0.675,23,2.045,28,1.592,34,3.236,35,0.975,36,1.592,37,1.169,38,1.943,39,1.169,40,0.908,41,1.169,42,0.975,43,0.975,44,1.169,45,1.036,46,1.169,47,0.864,48,1.169,49,0.975,50,1.169,51,0.975,52,1.169,53,1.036,54,1.169,55,0.975,56,1.18,57,1.169,58,0.975,59,1.169,60,1.169,61,1.857,62,1.584,63,1.169,64,0.975,65,1.169,66,0.975,67,1.169,68,0.975,69,1.169,70,0.975,71,0.975,72,1.169,73,1.169,74,0.016,75,0.016,97,1.498,109,1.323,120,1.327,184,0.671,190,0.305,191,0.642,195,0.763,198,1.038,200,3.236,201,2.518,202,0.763,203,0.472,204,0.763,236,0.812,237,0.716,257,1.101,258,1.169,263,3.73,314,1.8,320,3.092,323,1.692,325,2.186,375,1.918,440,4.132,475,3.59,809,3.236,925,4.958,926,4.381,927,2.985,928,4.081,929,4.781,930,4.781,931,5.435,932,4.781,933,3.512,934,6.838,935,4.781,936,4.781,937,4.781,938,6.103,939,4.781,940,4.781,941,4.781,942,4.063,943,4.781,944,5.435,945,4.781,946,4.781,947,3.512,948,4.781,949,4.781,950,3.59,951,3.512,952,3.512,953,4.063,954,4.781,955,4.781,956,2.637,957,2.637]],["title/components/PostDetailsComponent.html",[0,0.33,64,0.957]],["body/components/PostDetailsComponent.html",[0,0.4,1,0.58,2,1.01,3,0.119,4,0.119,6,0.739,7,0.739,8,0.102,10,0.695,11,2.17,12,2.042,16,0.739,17,0.739,18,0.254,19,0.024,20,0.119,21,0.276,28,1.14,35,0.616,36,1.14,37,0.739,38,1.564,39,0.739,40,0.933,41,0.739,42,0.616,43,1.735,44,0.739,45,0.655,46,0.739,47,0.546,48,0.739,49,0.616,50,0.739,51,0.616,52,0.739,53,0.655,54,0.739,55,0.616,56,0.907,57,0.739,58,0.616,59,0.739,60,0.739,61,1.386,62,1.556,63,0.739,64,1.304,65,0.739,66,0.616,67,0.739,68,0.616,69,0.739,70,0.616,71,0.616,72,0.739,73,0.739,74,0.011,75,0.011,97,1.073,109,0.836,120,0.951,138,0.786,163,2.317,169,1.518,170,1.911,188,0.743,190,0.193,191,0.46,195,0.743,198,1.245,202,1.102,203,0.565,204,1.102,220,1.253,232,2.57,234,1.983,235,1.155,236,1.24,237,1.093,253,0.655,259,0.546,263,3.179,267,1.565,268,1.666,272,1.564,285,2.148,311,1.565,314,1.289,317,2.048,318,2.048,320,2.377,323,1.212,325,1.565,350,1.015,354,1.886,370,1.169,408,1.502,418,1.015,419,1.169,491,2.909,494,1.371,528,2.201,529,2.582,530,2.582,531,2.582,532,2.829,533,2.377,534,2.829,535,2.377,540,2.582,542,2.582,544,2.582,547,2.475,548,2.115,561,2.115,563,3.136,565,2.944,566,2.115,568,2.672,575,3.567,576,2.115,581,1.371,582,1.262,583,1.371,584,1.087,585,1.371,590,1.947,592,2.672,593,1.371,594,1.371,596,1.371,612,1.262,697,1.371,703,2.377,704,3.138,706,2.829,707,2.829,708,2.829,709,2.829,710,3.138,714,2.829,717,2.582,719,2.903,758,1.666,764,1.502,765,1.502,766,1.502,794,1.886,795,1.886,806,2.57,838,2.829,843,1.666,848,3.179,869,1.666,871,1.502,876,1.886,878,1.666,881,1.886,904,1.886,905,1.886,911,1.886,912,1.886,926,1.666,928,3.138,956,1.666,957,1.666,958,5.58,959,1.886,960,3.551,961,3.423,962,3.423,963,5.363,964,3.423,965,3.423,966,4.697,967,3.423,968,4.697,969,1.886,970,3.992,971,2.219,972,3.423,973,2.219,974,3.423,975,2.219,976,2.219,977,3.423,978,4.313,979,2.219,980,2.219,981,2.219,982,2.219,983,2.219,984,2.219,985,2.219,986,2.219,987,2.219,988,2.219,989,2.219,990,2.219,991,1.886,992,2.219,993,2.219,994,2.219,995,2.219,996,2.219,997,2.219,998,2.219,999,2.219,1000,2.219,1001,2.219,1002,2.219,1003,2.219,1004,2.219,1005,2.219,1006,2.219,1007,2.219,1008,2.219,1009,2.219,1010,2.219,1011,3.423,1012,2.219,1013,2.219,1014,2.219,1015,2.219,1016,2.219,1017,2.219,1018,2.219,1019,2.909,1020,2.909,1021,2.909,1022,2.909]],["title/injectables/PostService.html",[180,0.616,848,1.961]],["body/injectables/PostService.html",[3,0.079,4,0.079,8,0.068,13,0.491,17,0.608,18,0.169,19,0.024,20,0.079,21,0.512,23,1.587,26,2.095,40,0.952,43,1.238,56,1.237,62,1.745,74,0.008,75,0.008,112,0.777,127,1.817,167,1.656,169,1.529,170,1.452,175,4.087,180,0.441,182,0.556,184,1.088,185,1.096,187,1.298,188,0.805,190,0.128,191,0.331,194,1.788,195,0.689,197,3.6,198,1.139,201,2.612,202,1.237,203,0.524,204,1.237,205,1.523,208,1.851,209,1.523,215,1.669,217,2.51,220,1.35,221,3.425,224,2.341,225,2.784,233,3.6,234,1.554,235,1.102,236,0.953,237,0.908,238,1.669,240,2.536,241,1.669,242,1.402,246,1.669,250,0.675,251,0.912,253,0.435,256,0.592,257,1.892,258,0.491,259,1.541,263,2.346,266,1.851,267,2.432,268,1.851,269,1.851,270,1.127,271,3.286,272,2.245,283,1.523,285,0.675,337,1.669,360,2.958,382,1.962,405,2.292,418,0.675,419,0.777,440,1.669,465,3.552,508,3.868,520,1.108,551,2.337,557,2.095,566,0.912,584,2.184,591,4.195,608,2.149,609,1.669,612,1.402,631,1.669,667,2.095,668,1.851,715,2.095,742,1.806,752,2.422,759,0.912,804,0.999,834,2.784,848,1.402,871,0.999,878,3.993,885,3.151,950,1.851,953,1.254,991,1.254,1023,1.254,1024,2.465,1025,3.174,1026,2.465,1027,2.465,1028,2.465,1029,2.465,1030,2.465,1031,2.465,1032,2.465,1033,2.465,1034,2.465,1035,2.465,1036,2.465,1037,2.465,1038,1.254,1039,2.465,1040,2.465,1041,2.465,1042,2.465,1043,1.475,1044,2.465,1045,1.475,1046,2.465,1047,2.784,1048,4.748,1049,4.804,1050,5.152,1051,2.384,1052,2.784,1053,2.465,1054,1.475,1055,3.151,1056,2.465,1057,1.475,1058,3.708,1059,2.465,1060,3.708,1061,2.465,1062,2.465,1063,4.748,1064,2.465,1065,4.959,1066,1.475,1067,2.465,1068,2.465,1069,2.465,1070,2.465,1071,2.465,1072,1.475,1073,4.959,1074,2.095,1075,2.465,1076,1.475,1077,2.465,1078,1.475,1079,2.095,1080,2.465,1081,1.475,1082,3.151,1083,4.959,1084,2.465,1085,2.095,1086,2.465,1087,3.151,1088,2.465,1089,6.217,1090,1.475,1091,4.458,1092,4.458,1093,3.174,1094,4.458,1095,3.174,1096,3.708,1097,4.959,1098,3.708,1099,3.708,1100,2.465,1101,2.465,1102,1.475,1103,1.851,1104,4.124,1105,3.174,1106,3.174,1107,3.174,1108,2.465,1109,1.475,1110,4.02,1111,1.475,1112,1.475,1113,2.465,1114,2.465,1115,2.465,1116,2.465,1117,2.465,1118,2.465,1119,1.475,1120,1.254,1121,1.254,1122,1.254,1123,1.108,1124,1.254,1125,1.254,1126,1.475,1127,1.254,1128,1.475,1129,1.254,1130,1.475,1131,1.475,1132,1.475,1133,1.254,1134,1.475,1135,1.475,1136,1.475,1137,1.475,1138,1.475,1139,1.475,1140,1.475,1141,1.475,1142,1.475,1143,1.475,1144,1.475,1145,1.475,1146,1.475,1147,1.475,1148,1.475,1149,1.475,1150,1.475,1151,1.475,1152,1.475,1153,1.475,1154,1.475,1155,1.475,1156,2.465,1157,2.465,1158,1.475,1159,1.475,1160,1.475,1161,2.465,1162,2.095,1163,1.475,1164,2.465,1165,1.475,1166,1.475,1167,1.475,1168,1.475,1169,1.475,1170,1.475,1171,1.475,1172,1.475,1173,1.475,1174,1.475,1175,2.465,1176,1.475,1177,1.475,1178,2.465,1179,1.475,1180,1.475,1181,1.475,1182,1.475]],["title/components/PostsComponent.html",[0,0.33,66,0.957]],["body/components/PostsComponent.html",[0,0.498,1,0.395,2,0.742,3,0.081,4,0.081,5,0.934,6,0.503,7,0.503,8,0.069,10,0.474,11,1.998,12,1.881,14,1.431,16,1.076,17,0.667,18,0.173,19,0.024,20,0.081,21,0.401,23,1.931,28,0.838,32,0.934,33,1.135,34,1.023,35,0.42,36,0.838,37,0.503,38,1.668,39,0.503,40,0.799,41,0.503,42,0.42,43,1.328,44,0.503,45,0.446,46,0.503,47,0.372,48,0.503,49,0.42,50,0.503,51,0.42,52,0.503,53,0.446,54,0.503,55,0.42,56,0.328,57,0.503,58,0.42,59,0.503,60,0.503,61,0.446,62,1.354,63,0.503,64,0.42,65,0.503,66,1.046,67,0.503,68,0.42,69,0.503,70,0.42,71,0.897,72,0.503,73,0.503,74,0.008,75,0.008,97,0.788,109,0.569,120,1.046,127,1.233,129,1.889,138,0.535,163,3.521,167,1.253,168,1.889,169,1.466,175,3.792,176,2.138,184,0.719,185,0.618,188,0.818,190,0.218,191,0.338,194,1.296,195,0.546,198,1.146,202,1.196,203,0.488,204,0.908,220,1.246,224,1.887,234,1.958,235,1.177,236,1.043,237,0.92,242,2.142,253,0.446,257,1.63,259,1.319,271,2.789,272,1.392,283,2.327,297,1.431,299,1.135,303,2.453,311,1.15,314,0.947,317,1.583,318,1.583,320,1.838,323,0.89,337,1.703,338,1.023,349,2.138,350,1.722,351,2.142,356,1.889,360,2.048,370,0.796,375,1.009,392,1.703,418,0.691,419,0.796,440,3.391,458,2.187,460,2.549,461,3.238,462,2.83,463,1.023,464,1.023,465,4.965,466,2.745,467,3.055,468,3.391,469,1.023,470,2.138,475,1.135,490,1.285,502,1.554,508,1.889,528,1.702,536,1.838,547,1.983,551,2.356,552,3.132,556,2.138,558,1.554,560,1.703,565,2.202,568,0.86,584,1.845,586,0.741,592,0.86,609,2.549,640,2.138,650,1.703,697,0.934,703,1.838,704,2.425,706,2.187,707,2.187,708,2.187,709,2.187,710,2.425,712,2.425,717,1.554,719,2.327,727,1.703,728,1.703,735,1.889,752,1.81,758,1.135,759,0.934,761,1.889,781,1.889,804,1.023,806,1.889,808,3.139,809,3.055,810,1.135,811,1.135,812,1.135,813,1.135,814,1.135,815,2.425,816,1.889,817,1.889,818,2.187,819,1.889,820,1.135,821,1.135,838,2.187,843,2.425,848,3.265,863,2.138,869,1.135,871,1.023,877,3.2,882,2.138,898,1.285,906,2.138,920,1.889,928,2.425,956,1.135,957,1.135,960,2.745,969,1.285,970,4.065,978,1.285,1019,2.138,1020,2.138,1021,2.138,1022,2.138,1048,5.16,1051,3.388,1052,2.425,1074,3.835,1082,3.835,1085,2.138,1087,2.138,1103,1.889,1120,2.138,1123,1.135,1125,1.285,1133,1.285,1183,1.285,1184,3.23,1185,3.23,1186,3.23,1187,3.23,1188,1.512,1189,2.515,1190,3.23,1191,5.923,1192,3.23,1193,3.23,1194,3.765,1195,3.765,1196,2.515,1197,2.515,1198,2.515,1199,2.515,1200,2.515,1201,2.515,1202,2.138,1203,1.889,1204,1.512,1205,4.512,1206,2.515,1207,1.703,1208,1.889,1209,1.512,1210,1.512,1211,2.515,1212,1.512,1213,2.515,1214,2.515,1215,2.515,1216,2.515,1217,2.138,1218,2.138,1219,2.515,1220,2.138,1221,1.512,1222,2.138,1223,2.138,1224,2.138,1225,2.515,1226,1.512,1227,2.138,1228,2.515,1229,2.138,1230,2.515,1231,1.512,1232,2.515,1233,2.138,1234,2.515,1235,1.512,1236,3.23,1237,2.515,1238,2.515,1239,1.512,1240,1.512,1241,1.512,1242,1.512,1243,1.512,1244,4.784,1245,1.512,1246,1.512,1247,2.515,1248,1.512,1249,1.512,1250,1.512,1251,1.512,1252,1.512,1253,1.512,1254,2.515,1255,3.23,1256,2.515,1257,1.512,1258,1.512,1259,1.512,1260,1.512,1261,3.23,1262,1.512,1263,1.512,1264,1.512,1265,1.512,1266,1.512,1267,1.512,1268,1.512,1269,1.512,1270,1.512,1271,1.512,1272,1.512,1273,1.512,1274,1.512,1275,1.512,1276,1.512,1277,1.512,1278,3.765,1279,3.765,1280,1.512,1281,1.512,1282,1.512,1283,1.512,1284,2.515,1285,2.515,1286,1.512,1287,2.515,1288,1.512,1289,1.285,1290,2.515,1291,1.512,1292,1.512,1293,3.23,1294,1.512,1295,2.515,1296,1.512,1297,2.515,1298,3.765,1299,1.512,1300,3.765,1301,1.512,1302,2.515,1303,2.515,1304,3.23,1305,2.515,1306,1.512,1307,1.512,1308,1.512,1309,1.512,1310,1.512,1311,1.512,1312,1.512]],["title/components/RegisterComponent.html",[0,0.33,68,0.957]],["body/components/RegisterComponent.html",[0,0.425,1,0.442,2,0.813,3,0.091,4,0.091,6,0.563,7,0.563,8,0.078,10,0.53,11,2.052,12,1.931,16,0.563,17,0.62,18,0.193,19,0.024,20,0.091,21,0.591,23,1.18,28,0.918,29,2.623,35,0.469,36,0.918,37,0.563,38,1.342,39,0.563,40,0.905,41,0.563,42,0.469,43,0.469,44,0.563,45,0.499,46,0.563,47,0.416,48,0.563,49,0.469,50,0.563,51,0.469,52,0.563,53,0.499,54,0.563,55,0.469,56,1.177,57,0.563,58,0.469,59,0.563,60,0.563,61,0.499,62,0.416,63,0.563,64,0.469,65,0.563,66,0.469,67,0.563,68,1.233,69,0.563,70,0.469,71,0.469,72,0.563,73,0.563,74,0.009,75,0.009,90,1.987,97,0.864,108,1.436,109,0.637,120,0.766,123,2.158,129,1.269,138,0.598,167,0.766,169,1.345,170,1.261,172,3.17,181,2.744,184,1.001,185,1.092,186,2.343,187,2.123,188,0.599,189,3.773,190,0.147,191,0.37,195,0.367,198,1.09,200,1.867,201,1.453,202,0.758,203,0.505,204,0.758,214,1.867,215,1.867,216,2.76,217,2.728,220,1.091,224,2.321,228,3.715,232,2.07,234,1.824,235,1.182,236,0.932,237,1.186,240,2.858,246,1.144,253,0.499,255,1.436,257,1.263,258,0.563,259,1.288,264,0.723,270,2.961,285,2.548,311,1.843,314,1.038,318,1.711,320,1.987,323,0.976,325,1.261,350,1.843,351,2.292,384,0.828,385,0.828,386,0.828,387,0.828,388,0.773,389,0.828,392,2.728,395,2.07,408,3.006,409,2.343,418,0.773,419,0.89,442,2.343,494,1.044,497,2.343,502,2.49,506,1.704,528,2.339,529,2.158,530,2.158,531,2.158,539,3.773,540,2.158,542,2.158,544,2.744,546,3.389,547,2.123,548,2.49,549,2.728,552,3.245,558,1.704,561,1.704,563,2.158,565,2.123,566,1.704,568,2.292,573,3.683,575,3.349,576,2.943,581,1.044,582,0.961,584,2.461,587,1.436,589,5.176,590,3.576,591,1.269,592,2.98,593,1.044,594,1.044,596,1.044,601,1.436,604,1.436,606,2.343,611,1.436,612,0.961,613,1.436,616,1.436,620,1.436,650,1.867,659,4.605,668,3.026,703,0.961,714,3.006,727,1.867,728,1.867,729,2.07,743,2.968,744,2.968,747,2.343,748,2.343,764,3.006,765,1.144,766,1.144,767,1.436,768,1.436,773,1.436,774,1.436,797,1.436,798,1.436,799,1.436,800,1.436,822,1.436,823,1.436,824,1.436,825,1.436,834,2.07,920,2.623,950,2.07,1055,3.425,1207,1.867,1208,2.07,1222,2.343,1313,1.436,1314,2.757,1315,2.757,1316,4.03,1317,4.03,1318,1.69,1319,1.69,1320,4.03,1321,3.493,1322,2.757,1323,2.757,1324,2.757,1325,1.69,1326,2.757,1327,1.69,1328,1.69,1329,1.69,1330,2.757,1331,2.343,1332,2.757,1333,1.69,1334,4.03,1335,2.757,1336,4.762,1337,3.773,1338,2.757,1339,1.69,1340,3.493,1341,1.69,1342,3.493,1343,4.03,1344,4.03,1345,2.757,1346,2.757,1347,2.757,1348,2.343,1349,4.452,1350,2.343,1351,3.425,1352,2.343,1353,2.757,1354,2.343,1355,2.343,1356,1.69,1357,3.425,1358,2.757,1359,2.757,1360,2.757,1361,2.343,1362,2.757,1363,2.757,1364,2.757,1365,2.757,1366,2.757,1367,2.757,1368,2.757,1369,2.757,1370,1.69,1371,1.69,1372,1.69,1373,1.69,1374,1.69,1375,1.436,1376,2.343,1377,1.436,1378,1.269,1379,3.493,1380,1.69,1381,1.69,1382,1.69,1383,1.69,1384,1.69,1385,1.69,1386,1.69,1387,1.69]],["title/interfaces/RegisterRequest.html",[228,2.131,262,0.957]],["body/interfaces/RegisterRequest.html",[3,0.277,4,0.277,8,0.237,19,0.023,20,0.277,56,1.123,74,0.02,75,0.02,167,1.436,172,2.941,184,0.988,185,1.271,190,0.449,191,0.821,203,0.565,216,2.724,228,3.779,235,1.274,262,1.436,264,2.212,270,3.078,546,3.545,573,3.829,1388,4.394]],["title/injectables/SessionService.html",[180,0.616,551,1.475]],["body/injectables/SessionService.html",[3,0.152,4,0.152,8,0.13,13,0.945,17,0.672,18,0.325,19,0.024,20,0.152,21,0.352,40,0.942,56,1.277,71,1.143,74,0.014,75,0.014,167,1.934,169,1.599,170,2.578,173,1.882,180,0.736,182,1.069,184,0.786,188,0.894,190,0.246,191,0.553,194,2.785,195,0.616,198,1.28,202,1.224,203,0.565,204,1.224,220,1.317,221,3.195,224,2,234,2.083,235,0.949,236,1.359,237,1.198,253,0.837,256,1.139,257,1.29,258,0.945,259,1.012,285,2.429,303,1.298,405,2.544,422,2.412,423,2.132,482,3.988,516,2.412,551,1.761,612,2.341,631,2.786,642,3.988,717,3.282,723,3.345,752,2.613,756,2.132,759,1.754,801,3.498,802,4.513,847,3.45,868,2.412,1110,5.381,1203,3.091,1389,2.412,1390,4.842,1391,4.842,1392,4.842,1393,4.842,1394,4.842,1395,5.638,1396,4.116,1397,5.311,1398,4.115,1399,5.311,1400,3.498,1401,4.116,1402,2.839,1403,4.116,1404,4.116,1405,2.839,1406,4.116,1407,2.839,1408,2.839,1409,2.839,1410,2.839,1411,4.116,1412,2.839,1413,5.88,1414,5.311,1415,4.116,1416,2.839,1417,4.116,1418,2.839,1419,4.116,1420,2.839,1421,2.839,1422,4.116,1423,4.116,1424,2.839,1425,4.116,1426,2.839,1427,2.839,1428,3.498,1429,2.839,1430,2.839,1431,2.839,1432,4.116,1433,2.839,1434,2.839,1435,3.498,1436,2.839,1437,2.839,1438,2.839,1439,2.839,1440,2.839,1441,2.839,1442,4.116,1443,2.839,1444,4.116,1445,2.839,1446,2.839,1447,4.116,1448,2.839,1449,2.839,1450,2.839,1451,2.839,1452,2.839,1453,2.839]],["title/injectables/SnackBarService.html",[180,0.616,400,2.131]],["body/injectables/SnackBarService.html",[3,0.207,4,0.207,8,0.177,13,1.283,17,0.651,18,0.441,19,0.024,20,0.207,21,0.707,40,0.85,74,0.017,75,0.017,127,2.493,169,0.891,180,0.909,182,1.451,184,0.972,187,3.317,188,1.315,190,0.334,195,0.837,198,0.972,202,1.105,203,0.441,204,1.105,215,3.444,220,0.837,234,1.785,235,1.24,236,1.456,237,0.785,256,1.546,257,1.785,258,1.283,259,1.4,273,4.465,284,3.275,285,2.77,286,5.958,300,2.894,301,2.609,350,2.327,384,1.888,385,1.888,386,1.888,387,1.888,388,1.762,389,1.888,394,3.82,395,3.82,400,3.144,408,4.379,677,4.323,818,3.444,886,5.147,942,4.323,1208,3.82,1357,4.323,1454,4.84,1455,3.275,1456,6.057,1457,5.087,1458,5.087,1459,3.854,1460,6.057,1461,3.854,1462,5.087,1463,6.774,1464,6.297,1465,3.854,1466,5.087,1467,6.057,1468,5.087,1469,5.087,1470,3.854,1471,3.854,1472,3.854,1473,3.854,1474,3.854,1475,3.854,1476,3.854,1477,3.854,1478,3.854,1479,3.854]],["title/interfaces/Topic.html",[262,0.957,752,1.383]],["body/interfaces/Topic.html",[3,0.278,4,0.278,8,0.238,19,0.023,20,0.278,62,1.276,74,0.02,75,0.02,184,1.313,185,1.276,190,0.45,191,0.823,203,0.566,235,1.246,262,1.441,264,2.221,267,3.082,272,2.172,360,3.302,752,2.616,1480,4.411]],["title/injectables/TopicService.html",[180,0.616,847,1.961]],["body/injectables/TopicService.html",[3,0.183,4,0.183,8,0.157,13,1.137,17,0.691,18,0.39,19,0.024,20,0.183,21,0.75,23,2.467,40,0.57,56,1.018,71,1.993,74,0.015,75,0.015,112,1.799,127,1.673,169,1.546,180,0.838,182,1.286,184,0.652,185,1.153,188,1.163,190,0.296,191,0.63,195,0.741,197,4.526,198,1.154,200,3.174,201,3.037,202,0.741,203,0.5,204,0.741,205,3.952,208,3.521,209,3.563,214,3.174,216,3.183,220,1.452,221,3.684,226,4.551,233,3.903,235,0.957,236,1.084,237,0.956,238,3.174,241,4.329,242,3.28,250,1.561,251,2.11,253,1.007,256,1.37,257,1.07,258,1.137,259,1.153,283,3.563,303,2.636,377,3.31,382,3.31,752,2.313,847,3.047,897,3.521,1038,2.902,1047,3.521,1049,4.329,1079,3.985,1122,2.902,1129,2.902,1223,4.551,1481,2.902,1482,5.765,1483,5.765,1484,4.689,1485,3.414,1486,5.356,1487,4.551,1488,5.356,1489,5.356,1490,3.414,1491,3.414,1492,4.689,1493,4.689,1494,2.902,1495,3.414,1496,3.414,1497,3.414,1498,3.414]],["title/components/TopicsComponent.html",[0,0.33,70,0.957]],["body/components/TopicsComponent.html",[0,0.589,1,0.581,2,1.012,3,0.119,4,0.119,5,1.375,6,0.741,7,0.741,8,0.102,10,0.697,11,2.171,12,2.043,14,1.951,16,0.741,17,0.692,18,0.254,19,0.024,20,0.119,21,0.52,23,1.467,28,1.142,32,1.375,35,0.618,36,1.142,37,1.394,38,1.566,39,0.741,40,0.848,41,0.741,42,0.618,43,1.162,44,0.741,45,0.656,46,0.741,47,0.547,48,0.741,49,0.618,50,0.741,51,0.618,52,0.741,53,0.656,54,0.741,55,0.618,56,0.483,57,0.741,58,0.618,59,0.741,60,0.741,61,0.656,62,0.547,63,0.741,64,0.618,65,0.741,66,0.618,67,0.741,68,0.618,69,0.741,70,1.306,71,1.646,72,0.741,73,0.741,74,0.011,75,0.011,97,1.075,109,0.838,120,1.306,167,1.736,169,1.37,184,0.799,185,1.32,187,3.043,188,0.745,190,0.193,191,0.461,194,1.679,195,1.021,198,1.132,202,0.909,203,0.485,204,0.909,209,2.119,217,2.322,218,2.322,220,1.166,234,1.857,236,1.087,237,0.959,253,0.656,257,1.592,259,1.249,267,2.151,272,2.015,297,1.951,303,2.641,311,1.568,314,1.292,323,1.214,350,2.151,351,1.951,360,1.09,375,1.679,376,1.951,377,2.119,392,2.322,405,2.119,458,1.506,460,1.506,461,1.506,462,1.506,463,1.506,464,1.506,467,2.833,468,3.787,469,1.506,502,2.119,506,2.119,528,2.205,536,2.381,547,2.478,551,2.471,558,2.907,560,3.634,565,3.335,586,1.09,608,3.634,697,1.375,703,2.381,705,3.557,706,2.833,707,2.833,708,2.833,709,2.833,712,3.143,717,2.907,719,2.907,722,1.67,723,3.504,727,2.322,728,2.322,735,2.575,736,2.914,742,2.676,752,2.742,761,2.575,763,1.89,782,3.557,790,3.143,791,1.89,804,1.506,805,2.575,807,2.914,808,3.532,809,2.833,810,1.67,811,1.67,812,1.67,813,1.67,814,1.67,815,2.575,816,2.575,817,2.575,818,3.44,819,2.575,820,1.67,821,1.67,838,2.833,847,3.371,895,2.914,896,1.89,897,1.67,899,1.89,1047,2.575,1049,3.532,1063,2.914,1123,1.67,1124,1.89,1127,1.89,1203,2.575,1217,2.914,1218,2.914,1220,2.914,1224,2.914,1227,2.914,1331,2.914,1494,1.89,1499,1.89,1500,2.225,1501,3.43,1502,4.185,1503,3.43,1504,3.43,1505,3.43,1506,3.43,1507,3.43,1508,2.225,1509,2.225,1510,3.43,1511,3.43,1512,3.43,1513,3.43,1514,3.43,1515,3.43,1516,3.43,1517,3.43,1518,3.43,1519,2.225,1520,3.43,1521,2.225,1522,2.225,1523,2.225,1524,3.997,1525,2.225,1526,2.225,1527,2.225,1528,3.43,1529,2.225,1530,3.43,1531,2.225,1532,2.225,1533,2.225,1534,2.225,1535,3.43]],["title/interfaces/User.html",[167,0.957,262,0.957]],["body/interfaces/User.html",[3,0.269,4,0.269,8,0.231,19,0.023,20,0.269,74,0.02,75,0.02,167,1.787,184,0.96,185,1.236,190,0.436,191,0.807,203,0.591,235,1.269,262,1.396,264,2.15,267,3.049,270,3.049,272,2.304,546,3.513,573,3.793,776,5.666,1536,4.271]],["title/injectables/UserService.html",[180,0.616,723,1.961]],["body/injectables/UserService.html",[3,0.18,4,0.18,8,0.154,13,1.116,17,0.686,18,0.383,19,0.024,20,0.18,21,0.575,40,0.955,74,0.015,75,0.015,112,1.765,127,1.642,167,1.987,169,1.226,180,0.827,182,1.262,184,1.013,185,1.138,188,1.152,190,0.291,191,0.622,194,2.722,195,0.728,196,2.847,197,3.872,198,1.186,202,1.242,203,0.539,204,1.242,205,2.86,218,3.134,220,1.242,221,3.723,224,1.743,233,4.389,235,0.948,236,0.775,237,0.683,238,3.134,241,3.134,242,2.633,250,1.532,251,2.071,253,0.988,256,1.344,257,1.662,258,1.116,259,1.594,267,2.615,272,2.159,283,2.86,382,3.277,559,4.295,560,3.134,608,3.134,609,2.268,631,3.134,723,3.017,729,3.476,742,3.254,752,2.601,756,2.516,781,4.661,1202,2.847,1233,3.933,1400,3.933,1537,2.847,1538,5.719,1539,4.629,1540,4.629,1541,4.629,1542,3.351,1543,4.629,1544,3.351,1545,4.629,1546,4.629,1547,3.351,1548,4.629,1549,4.629,1550,4.629,1551,3.351,1552,5.719,1553,5.719,1554,4.629,1555,4.629,1556,4.629,1557,3.351,1558,3.351,1559,3.351,1560,3.351,1561,3.351,1562,3.351]],["title/injectables/authGuardService.html",[147,2.334,180,0.616]],["body/injectables/authGuardService.html",[3,0.201,4,0.201,8,0.172,13,1.249,17,0.685,18,0.429,19,0.024,20,0.201,21,0.466,40,0.938,74,0.016,75,0.016,120,1.042,138,1.328,147,3.384,162,4.22,163,4.562,167,1.848,168,4.5,169,1.558,173,2.741,180,0.893,182,1.413,184,0.717,188,1.085,190,0.326,195,1.085,198,1.145,202,1.22,203,0.488,204,1.22,220,1.355,222,4.5,237,1.019,253,1.107,256,1.505,257,1.566,259,1.473,356,3.753,375,2.703,376,2.134,506,3.089,551,2.746,552,3.833,641,5.455,642,5.11,722,2.817,780,3.188,1121,3.188,1162,3.188,1398,5.455,1428,4.247,1435,4.776,1524,5.093,1563,3.188,1564,5.993,1565,4.998,1566,3.752,1567,3.752,1568,6.241,1569,6.241,1570,3.752,1571,4.998,1572,5.993,1573,4.998,1574,4.998,1575,5.993,1576,3.752,1577,4.998,1578,3.752,1579,4.998,1580,3.188,1581,3.188,1582,3.752,1583,3.752,1584,3.188,1585,3.752]],["title/coverage.html",[1586,4.011]],["body/coverage.html",[0,0.669,1,0.982,8,0.172,9,3.193,19,0.024,31,5.833,33,4.502,42,1.043,45,1.108,47,0.924,49,1.043,51,1.043,53,1.108,55,1.043,56,0.816,58,1.043,61,1.108,62,0.924,64,1.043,66,1.043,68,1.043,70,1.043,74,0.016,75,0.016,92,2.322,114,2.544,141,2.821,143,2.821,147,2.544,149,2.544,154,2.821,167,1.043,180,1.227,181,2.322,183,3.193,203,0.326,211,2.322,223,2.322,228,2.322,240,3.199,250,2.572,262,1.849,263,2.137,265,3.193,273,2.544,274,3.193,309,3.193,310,3.193,333,2.322,380,3.193,390,3.193,391,3.193,400,2.322,418,1.718,433,3.193,451,3.193,476,3.193,478,3.193,527,3.193,551,1.608,622,3.193,623,3.193,625,3.193,626,3.193,702,3.193,723,2.137,752,1.507,826,3.193,836,3.193,837,3.193,847,2.137,848,2.137,913,3.193,914,3.193,922,3.193,925,3.193,926,2.821,927,3.193,958,3.193,959,3.193,1023,3.193,1183,3.193,1289,3.193,1313,3.193,1361,3.193,1388,3.193,1389,3.193,1454,3.193,1455,3.193,1480,3.193,1481,3.193,1499,3.193,1536,3.193,1537,3.193,1563,3.193,1586,3.193,1587,3.757,1588,3.757,1589,6.244,1590,3.757,1591,5.624,1592,5.624,1593,3.757,1594,3.757,1595,3.193,1596,3.757,1597,3.757,1598,3.757,1599,3.757,1600,3.757,1601,5.002,1602,5.002,1603,3.757,1604,3.757,1605,3.757,1606,3.757,1607,3.757,1608,3.757,1609,3.757,1610,3.757,1611,3.757,1612,3.757,1613,3.757,1614,3.757,1615,3.757,1616,3.757,1617,3.757,1618,3.757,1619,3.757,1620,3.757,1621,3.757,1622,3.757,1623,3.757,1624,3.757,1625,3.757,1626,3.757,1627,3.757,1628,3.757,1629,3.757,1630,3.757,1631,3.757,1632,5.002,1633,5.002,1634,3.757,1635,3.757,1636,3.193,1637,3.193,1638,3.193,1639,3.757,1640,3.757]],["title/dependencies.html",[79,2.565,1641,2.441]],["body/dependencies.html",[18,0.596,19,0.024,74,0.02,75,0.02,79,3.22,101,5.221,102,4.613,109,1.962,138,1.844,253,1.537,582,2.964,1642,5.21,1643,7.17,1644,5.21,1645,5.21,1646,5.21,1647,5.21,1648,5.21,1649,5.21,1650,5.21,1651,5.21,1652,5.21]],["title/index.html",[190,0.299,1653,2.93]],["body/index.html",[1,1.788,2,1.333,19,0.024,35,1.255,47,1.51,74,0.019,75,0.019,76,2.571,77,4.854,78,2.571,79,2.793,80,3.394,81,3.394,82,3.394,83,3.06,84,3.841,85,3.841,86,3.841,87,3.841,88,3.841,89,3.795,90,4.078,91,4.611,92,3.795,93,4.232,94,3.394,95,3.394,137,3.06,182,1.702,264,1.934,317,3.353,533,3.892,535,3.892,690,3.841,691,3.841,692,3.841,693,5.137,1378,3.394,1653,3.841,1654,4.52,1655,4.52,1656,5.636]],["title/modules.html",[78,2.685]],["body/modules.html",[19,0.021,74,0.021,75,0.021,77,3.729,78,3.134,89,3.404,90,3.134,102,4.765,1487,4.681,1657,6.346,1658,6.346,1659,6.684,1660,5.509]],["title/properties.html",[191,0.557,1641,2.441]],["body/properties.html",[19,0.022,74,0.021,75,0.021,191,0.757,388,2.577,1661,5.635]],["title/routes.html",[137,3.196]],["body/routes.html",[19,0.021,74,0.021,75,0.021,137,3.839]],["title/injectables/unAuthGuardService.html",[149,2.334,180,0.616]],["body/injectables/unAuthGuardService.html",[3,0.245,4,0.245,8,0.21,13,1.523,17,0.738,18,0.523,19,0.024,20,0.245,21,0.568,40,0.948,74,0.019,75,0.019,138,1.619,149,3.843,162,4.848,169,1.535,180,1.015,182,1.722,188,1.233,190,0.397,194,2.476,195,1.233,198,1.179,202,1.233,203,0.493,204,1.233,220,1.233,221,3.252,253,1.349,256,1.835,259,1.518,375,2.663,551,2.935,552,3.849,1580,3.887,1581,3.887,1584,3.887,1595,3.887,1662,5.677,1663,4.574,1664,4.574,1665,4.574,1666,5.677,1667,4.574,1668,6.174,1669,6.174,1670,4.574,1671,4.574,1672,4.574]],["title/miscellaneous/variables.html",[1207,2.81,1673,2.441]],["body/miscellaneous/variables.html",[19,0.024,74,0.019,75,0.019,120,1.294,190,0.404,203,0.54,224,1.755,236,1.439,237,1.269,250,3.108,270,2.131,272,1.552,275,4.313,276,4.313,277,4.313,295,3.961,297,3.267,299,4.313,376,2.651,382,3.55,383,4.881,418,2.627,520,3.5,546,2.455,573,2.651,597,3.5,598,3.961,1051,3.5,1052,3.5,1103,3.5,1207,3.155,1229,3.961,1337,3.961,1348,3.961,1349,5.523,1350,3.961,1351,4.881,1352,3.961,1354,3.961,1355,3.961,1375,3.961,1376,4.881,1377,3.961,1378,3.5,1636,3.961,1637,3.961,1638,3.961,1673,3.961,1674,4.661,1675,4.661,1676,4.661,1677,4.661,1678,4.661,1679,4.661,1680,4.661,1681,4.661,1682,4.661,1683,4.661,1684,4.661,1685,5.744,1686,4.661]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"properties.html":{},"routes.html":{},"injectables/unAuthGuardService.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1661,"title":{},"body":{"properties.html":{}}}],["0.14.4",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1589,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1623,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1625,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1624,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1596,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1622,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1349,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":389,"title":{},"body":{"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["1.25rem",{"_index":817,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["1.5rem",{"_index":812,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["1.5vw",{"_index":816,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["1.75vw",{"_index":811,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["1/1",{"_index":1590,"title":{},"body":{"coverage.html":{}}}],["1/14",{"_index":1612,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1600,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1599,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1592,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/PostsComponent.html":{},"coverage.html":{}}}],["1000",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100vh",{"_index":459,"title":{},"body":{"components/HomeComponent.html":{}}}],["10px",{"_index":1297,"title":{},"body":{"components/PostsComponent.html":{}}}],["11",{"_index":1656,"title":{},"body":{"index.html":{}}}],["13",{"_index":1620,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1655,"title":{},"body":{"index.html":{}}}],["15/17",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":1601,"title":{},"body":{"coverage.html":{}}}],["17.3.8",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1613,"title":{},"body":{"coverage.html":{}}}],["1fr",{"_index":1303,"title":{},"body":{"components/PostsComponent.html":{}}}],["1rem",{"_index":1293,"title":{},"body":{"components/PostsComponent.html":{}}}],["1vw",{"_index":1292,"title":{},"body":{"components/PostsComponent.html":{}}}],["2.3.0",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["2/15",{"_index":1621,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1610,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":1594,"title":{},"body":{"coverage.html":{}}}],["20rem",{"_index":1299,"title":{},"body":{"components/PostsComponent.html":{}}}],["25",{"_index":1591,"title":{},"body":{"coverage.html":{}}}],["2rem",{"_index":471,"title":{},"body":{"components/HomeComponent.html":{}}}],["3",{"_index":1654,"title":{},"body":{"index.html":{}}}],["3/16",{"_index":1614,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1606,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["318px",{"_index":474,"title":{},"body":{"components/HomeComponent.html":{}}}],["33",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1375,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["4/4",{"_index":1597,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":423,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/SessionService.html":{}}}],["5/5",{"_index":1619,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1618,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1289,"title":{},"body":{"components/PostsComponent.html":{},"coverage.html":{}}}],["5000",{"_index":295,"title":{},"body":{"injectables/ConfigurationService.html":{},"miscellaneous/variables.html":{}}}],["52",{"_index":1626,"title":{},"body":{"coverage.html":{}}}],["550px",{"_index":473,"title":{},"body":{"components/HomeComponent.html":{}}}],["6/7",{"_index":1608,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1605,"title":{},"body":{"coverage.html":{}}}],["600px",{"_index":949,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["66",{"_index":1609,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1611,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1617,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1615,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1378,"title":{},"body":{"components/RegisterComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["83",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1607,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["9/12",{"_index":1616,"title":{},"body":{"coverage.html":{}}}],["9/17",{"_index":1627,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["9])(?=.*[^a",{"_index":1366,"title":{},"body":{"components/RegisterComponent.html":{}}}],["9]).{8",{"_index":1369,"title":{},"body":{"components/RegisterComponent.html":{}}}],["_isuserloggedin",{"_index":1390,"title":{},"body":{"injectables/SessionService.html":{}}}],["_posts",{"_index":1025,"title":{},"body":{"injectables/PostService.html":{}}}],["_sessionuser",{"_index":1391,"title":{},"body":{"injectables/SessionService.html":{}}}],["_topicsubscriptions",{"_index":1392,"title":{},"body":{"injectables/SessionService.html":{}}}],["ables",{"_index":1515,"title":{},"body":{"components/TopicsComponent.html":{}}}],["access",{"_index":168,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/PostsComponent.html":{},"injectables/authGuardService.html":{}}}],["accessing",{"_index":1555,"title":{},"body":{"injectables/UserService.html":{}}}],["accessors",{"_index":330,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["accordingly",{"_index":633,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["account",{"_index":796,"title":{},"body":{"components/MeComponent.html":{}}}],["action",{"_index":1463,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["actions",{"_index":469,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["activatedroute",{"_index":970,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["activatedroutesnapshot",{"_index":1568,"title":{},"body":{"injectables/authGuardService.html":{}}}],["active",{"_index":730,"title":{},"body":{"components/MeComponent.html":{}}}],["actual_component",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["add",{"_index":491,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"components/PostDetailsComponent.html":{}}}],["addauthorizationheader",{"_index":484,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["addauthorizationheader(request",{"_index":487,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["addcomment",{"_index":1026,"title":{},"body":{"injectables/PostService.html":{}}}],["addcomment(comment",{"_index":1042,"title":{},"body":{"injectables/PostService.html":{}}}],["addcommentsubscription",{"_index":1013,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["added",{"_index":492,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["adding",{"_index":1180,"title":{},"body":{"injectables/PostService.html":{}}}],["additional",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["address",{"_index":1377,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["adds",{"_index":480,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["afterviewinit",{"_index":312,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["against",{"_index":941,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["align",{"_index":463,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["alphabetically",{"_index":1104,"title":{},"body":{"injectables/PostService.html":{}}}],["already",{"_index":1486,"title":{},"body":{"injectables/TopicService.html":{}}}],["an_error_has_occurred",{"_index":396,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["angular/animations",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":952,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["angular/common",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["angular/compiler",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"dependencies.html":{},"injectables/unAuthGuardService.html":{}}}],["angular/forms",{"_index":582,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":872,"title":{},"body":{"components/NewPostComponent.html":{}}}],["angular/material/button",{"_index":586,"title":{},"body":{"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["angular/material/card",{"_index":697,"title":{},"body":{"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["angular/material/divider",{"_index":758,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["angular/material/form",{"_index":583,"title":{},"body":{"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["angular/material/icon",{"_index":370,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["angular/material/input",{"_index":585,"title":{},"body":{"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["angular/material/menu",{"_index":1246,"title":{},"body":{"components/PostsComponent.html":{}}}],["angular/material/select",{"_index":873,"title":{},"body":{"components/NewPostComponent.html":{}}}],["angular/material/sidenav",{"_index":369,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{}}}],["angular/material/snack",{"_index":300,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"injectables/SnackBarService.html":{}}}],["angular/material/toolbar",{"_index":701,"title":{},"body":{"modules/MaterialModule.html":{},"components/NavbarComponent.html":{}}}],["angular/material/tooltip",{"_index":919,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["angular/platform",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":138,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/authGuardService.html":{},"dependencies.html":{},"injectables/unAuthGuardService.html":{}}}],["anything",{"_index":1208,"title":{},"body":{"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["api",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["api/user.service",{"_index":1429,"title":{},"body":{"injectables/SessionService.html":{}}}],["apiurl",{"_index":382,"title":{},"body":{"interfaces/Environment.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["app.component",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.scss",{"_index":15,"title":{},"body":{"components/AppComponent.html":{}}}],["app_constants",{"_index":418,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app_constants.error_messages.must_be_authenticated",{"_index":424,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["app_constants.error_messages.please_enter",{"_index":765,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["app_constants.sort_directions.ascending",{"_index":1244,"title":{},"body":{"components/PostsComponent.html":{}}}],["app_constants.sort_directions.descending",{"_index":1265,"title":{},"body":{"components/PostsComponent.html":{}}}],["app_constants.validation_messages.email_validation_rule",{"_index":744,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["app_constants.validation_messages.password_validation_rule",{"_index":1340,"title":{},"body":{"components/RegisterComponent.html":{}}}],["app_constants.validation_messages.username_validation_rule",{"_index":743,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{},"index.html":{}}}],["application",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{}}}],["applicationtitle",{"_index":327,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["applied",{"_index":1469,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["applies",{"_index":1046,"title":{},"body":{"injectables/PostService.html":{}}}],["apply",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/PostService.html":{}}}],["applysortdirection",{"_index":1027,"title":{},"body":{"injectables/PostService.html":{}}}],["applysortdirection(sortorder",{"_index":1044,"title":{},"body":{"injectables/PostService.html":{}}}],["appmodule",{"_index":77,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appropriate",{"_index":407,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["approutingmodule",{"_index":89,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["arguments",{"_index":1086,"title":{},"body":{"injectables/PostService.html":{}}}],["array",{"_index":1049,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["arrow_downward",{"_index":1278,"title":{},"body":{"components/PostsComponent.html":{}}}],["arrow_upward",{"_index":1279,"title":{},"body":{"components/PostsComponent.html":{}}}],["asc",{"_index":1051,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{},"miscellaneous/variables.html":{}}}],["ascending",{"_index":1229,"title":{},"body":{"components/PostsComponent.html":{},"miscellaneous/variables.html":{}}}],["ascendingorder",{"_index":1190,"title":{},"body":{"components/PostsComponent.html":{}}}],["assigns",{"_index":1206,"title":{},"body":{"components/PostsComponent.html":{}}}],["associated",{"_index":1344,"title":{},"body":{"components/RegisterComponent.html":{}}}],["async",{"_index":1398,"title":{},"body":{"injectables/SessionService.html":{},"injectables/authGuardService.html":{}}}],["auth",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["auth/interfaces/user",{"_index":1124,"title":{},"body":{"injectables/PostService.html":{},"components/TopicsComponent.html":{}}}],["auth/services/api/user.service",{"_index":1526,"title":{},"body":{"components/TopicsComponent.html":{}}}],["auth/services/session.service",{"_index":1123,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["authenticated",{"_index":520,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["authenticating",{"_index":1322,"title":{},"body":{"components/RegisterComponent.html":{}}}],["authentication",{"_index":186,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/RegisterComponent.html":{}}}],["authenticationservice",{"_index":181,"title":{"injectables/AuthenticationService.html":{}},"body":{"injectables/AuthenticationService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"coverage.html":{}}}],["authguardservice",{"_index":147,"title":{"injectables/authGuardService.html":{}},"body":{"modules/AppRoutingModule.html":{},"injectables/authGuardService.html":{},"coverage.html":{}}}],["author",{"_index":384,"title":{},"body":{"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["authorization",{"_index":481,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["authorized",{"_index":1572,"title":{},"body":{"injectables/authGuardService.html":{}}}],["authorizing",{"_index":1323,"title":{},"body":{"components/RegisterComponent.html":{}}}],["authservice",{"_index":1320,"title":{},"body":{"components/RegisterComponent.html":{}}}],["authservicesubscription",{"_index":539,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["available",{"_index":1487,"title":{},"body":{"injectables/TopicService.html":{},"modules.html":{}}}],["avoid",{"_index":731,"title":{},"body":{"components/MeComponent.html":{}}}],["await",{"_index":1435,"title":{},"body":{"injectables/SessionService.html":{},"injectables/authGuardService.html":{}}}],["b",{"_index":1089,"title":{},"body":{"injectables/PostService.html":{}}}],["b.title.localecompare(a.title",{"_index":1147,"title":{},"body":{"injectables/PostService.html":{}}}],["back",{"_index":921,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["background",{"_index":1286,"title":{},"body":{"components/PostsComponent.html":{}}}],["bar",{"_index":301,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"components/NavbarComponent.html":{},"injectables/SnackBarService.html":{}}}],["bar.service",{"_index":417,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/NewPostComponent.html":{}}}],["bar.service.ts",{"_index":1455,"title":{},"body":{"injectables/SnackBarService.html":{},"coverage.html":{}}}],["bar.service.ts:21",{"_index":1461,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["bar.service.ts:35",{"_index":1465,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["based",{"_index":508,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["bearer",{"_index":526,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["before",{"_index":557,"title":{},"body":{"components/LoginComponent.html":{},"injectables/PostService.html":{}}}],["behaviorsubject",{"_index":1110,"title":{},"body":{"injectables/PostService.html":{},"injectables/SessionService.html":{}}}],["behaviorsubject(false",{"_index":1417,"title":{},"body":{"injectables/SessionService.html":{}}}],["behaviorsubject(null",{"_index":1419,"title":{},"body":{"injectables/SessionService.html":{}}}],["being",{"_index":356,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/PostsComponent.html":{},"injectables/authGuardService.html":{}}}],["between",{"_index":1285,"title":{},"body":{"components/PostsComponent.html":{}}}],["black",{"_index":1291,"title":{},"body":{"components/PostsComponent.html":{}}}],["bold",{"_index":814,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["boolean",{"_index":375,"title":{},"body":{"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["bootstrap",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["bottom",{"_index":299,"title":{},"body":{"injectables/ConfigurationService.html":{},"components/PostsComponent.html":{},"miscellaneous/variables.html":{}}}],["breakpoint",{"_index":944,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["breakpointobserver",{"_index":934,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["browse",{"_index":1659,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["button",{"_index":818,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"injectables/SnackBarService.html":{},"components/TopicsComponent.html":{}}}],["called",{"_index":351,"title":{},"body":{"components/ContentLayoutComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["calls",{"_index":1222,"title":{},"body":{"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["canactivate",{"_index":162,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["canactivate(route",{"_index":1567,"title":{},"body":{"injectables/authGuardService.html":{}}}],["canceling",{"_index":1516,"title":{},"body":{"components/TopicsComponent.html":{}}}],["canload",{"_index":161,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["card",{"_index":468,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["card.card",{"_index":1283,"title":{},"body":{"components/PostsComponent.html":{}}}],["case",{"_index":1156,"title":{},"body":{"injectables/PostService.html":{}}}],["catch",{"_index":1443,"title":{},"body":{"injectables/SessionService.html":{}}}],["catcherror",{"_index":1427,"title":{},"body":{"injectables/SessionService.html":{}}}],["category",{"_index":1472,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["center",{"_index":297,"title":{},"body":{"injectables/ConfigurationService.html":{},"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{},"miscellaneous/variables.html":{}}}],["centers",{"_index":819,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["changes",{"_index":674,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["character",{"_index":1355,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":1376,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":1331,"title":{},"body":{"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["checked",{"_index":509,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["checking",{"_index":937,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["checks",{"_index":506,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"injectables/authGuardService.html":{}}}],["checkuserloginstatus",{"_index":1564,"title":{},"body":{"injectables/authGuardService.html":{}}}],["children",{"_index":174,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["choose",{"_index":861,"title":{},"body":{"components/NewPostComponent.html":{}}}],["clamp(0.75rem",{"_index":815,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["clamp(1rem",{"_index":810,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["class",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["clean",{"_index":1512,"title":{},"body":{"components/TopicsComponent.html":{}}}],["cleanup",{"_index":556,"title":{},"body":{"components/LoginComponent.html":{},"components/PostsComponent.html":{}}}],["click",{"_index":1227,"title":{},"body":{"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["client",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["close",{"_index":886,"title":{},"body":{"components/NewPostComponent.html":{},"injectables/SnackBarService.html":{}}}],["closed",{"_index":671,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["closedend",{"_index":682,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["closedstart",{"_index":680,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["closematsidenav",{"_index":328,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{}}}],["closes",{"_index":341,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{}}}],["closing",{"_index":681,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["cluster_appmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_materialmodule",{"_index":690,"title":{},"body":{"modules/MaterialModule.html":{},"index.html":{}}}],["cluster_materialmodule_exports",{"_index":692,"title":{},"body":{"modules/MaterialModule.html":{},"index.html":{}}}],["cluster_materialmodule_imports",{"_index":691,"title":{},"body":{"modules/MaterialModule.html":{},"index.html":{}}}],["code",{"_index":448,"title":{},"body":{"components/FooterComponent.html":{}}}],["collection",{"_index":755,"title":{},"body":{"components/MeComponent.html":{}}}],["color",{"_index":1287,"title":{},"body":{"components/PostsComponent.html":{}}}],["column",{"_index":466,"title":{},"body":{"components/HomeComponent.html":{},"components/PostsComponent.html":{}}}],["columns",{"_index":1305,"title":{},"body":{"components/PostsComponent.html":{}}}],["combined",{"_index":160,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["comment",{"_index":263,"title":{"interfaces/Comment.html":{}},"body":{"interfaces/Comment.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["comment'},{'name",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["comment.component",{"_index":993,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["comment.component.html",{"_index":929,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["comment.component.scss",{"_index":930,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["comment.component.ts",{"_index":927,"title":{},"body":{"components/PostCommentComponent.html":{},"coverage.html":{}}}],["comment.component.ts:17",{"_index":947,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["comment.component.ts:19",{"_index":935,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["comment.content",{"_index":953,"title":{},"body":{"components/PostCommentComponent.html":{},"injectables/PostService.html":{}}}],["comment.created_at",{"_index":955,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["comment.postid",{"_index":1178,"title":{},"body":{"injectables/PostService.html":{}}}],["comment.username",{"_index":954,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["comment/post",{"_index":926,"title":{},"body":{"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"coverage.html":{}}}],["commentdto",{"_index":1175,"title":{},"body":{"injectables/PostService.html":{}}}],["commentdto.content",{"_index":1181,"title":{},"body":{"injectables/PostService.html":{}}}],["commentids",{"_index":923,"title":{},"body":{"interfaces/Post.html":{}}}],["comments",{"_index":963,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["compare",{"_index":1097,"title":{},"body":{"injectables/PostService.html":{}}}],["compared",{"_index":1107,"title":{},"body":{"injectables/PostService.html":{}}}],["comparing",{"_index":1068,"title":{},"body":{"injectables/PostService.html":{}}}],["completed",{"_index":644,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["component's",{"_index":346,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["component_template",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"index.html":{}}}],["concatenating",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["configuration",{"_index":381,"title":{},"body":{"interfaces/Environment.html":{}}}],["configuration.service",{"_index":1470,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["configurationservice",{"_index":273,"title":{"injectables/ConfigurationService.html":{}},"body":{"injectables/ConfigurationService.html":{},"injectables/SnackBarService.html":{},"coverage.html":{}}}],["consider",{"_index":158,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["console.debug(\"onsortclick",{"_index":1259,"title":{},"body":{"components/PostsComponent.html":{}}}],["console.debug(\"swapsortorder",{"_index":1266,"title":{},"body":{"components/PostsComponent.html":{}}}],["console.debug(`sort",{"_index":1149,"title":{},"body":{"injectables/PostService.html":{}}}],["console.debug(currentuser.username",{"_index":1179,"title":{},"body":{"injectables/PostService.html":{}}}],["console.error('an",{"_index":430,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["console.error('stack",{"_index":431,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["console.info(`login",{"_index":605,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.log(\"jwtinterceptor",{"_index":513,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["console.log('logged",{"_index":784,"title":{},"body":{"components/MeComponent.html":{}}}],["console.log(`side",{"_index":684,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["console.log(serviceurl",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["console.log(side",{"_index":657,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["console.table(this.sortdirections",{"_index":1260,"title":{},"body":{"components/PostsComponent.html":{}}}],["const",{"_index":170,"title":{},"body":{"modules/AppRoutingModule.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{}}}],["constructor",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["constructor(authenticationservice",{"_index":550,"title":{},"body":{"components/LoginComponent.html":{}}}],["constructor(authservice",{"_index":1318,"title":{},"body":{"components/RegisterComponent.html":{}}}],["constructor(breakpointobserver",{"_index":933,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["constructor(http",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["constructor(httpclient",{"_index":1038,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{}}}],["constructor(matsidenavservice",{"_index":332,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/NavbarComponent.html":{}}}],["constructor(private",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["constructor(route",{"_index":969,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["constructor(router",{"_index":1663,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["constructor(sessionservice",{"_index":722,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{},"injectables/authGuardService.html":{}}}],["constructor(snackbar",{"_index":1459,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["constructor(snackbarservice",{"_index":399,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["constructor(topicservice",{"_index":846,"title":{},"body":{"components/NewPostComponent.html":{}}}],["constructor(userservice",{"_index":1402,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructs",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/PostCommentComponent.html":{},"components/RegisterComponent.html":{},"injectables/TopicService.html":{}}}],["container",{"_index":458,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["containing",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["contains",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["content",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Comment.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["contentlayoutcomponent",{"_index":42,"title":{"components/ContentLayoutComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["control",{"_index":590,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["control.haserror('email",{"_index":1384,"title":{},"body":{"components/RegisterComponent.html":{}}}],["control.haserror('minlength",{"_index":1383,"title":{},"body":{"components/RegisterComponent.html":{}}}],["control.haserror('pattern",{"_index":1385,"title":{},"body":{"components/RegisterComponent.html":{}}}],["control.haserror('required",{"_index":596,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["control.markastouched",{"_index":594,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["control.reset",{"_index":888,"title":{},"body":{"components/NewPostComponent.html":{}}}],["control.seterrors(null",{"_index":889,"title":{},"body":{"components/NewPostComponent.html":{}}}],["controlname",{"_index":563,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["controlnames",{"_index":540,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["convenient",{"_index":1116,"title":{},"body":{"injectables/PostService.html":{}}}],["copy",{"_index":446,"title":{},"body":{"components/FooterComponent.html":{}}}],["core/components/page",{"_index":140,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["core/components/post",{"_index":992,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["core/guards/auth.guard",{"_index":148,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["core/guards/unauth.guard",{"_index":150,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["core/interceptors/jwt.interceptor",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["core/interfaces/auth/login.request",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/LoginComponent.html":{}}}],["core/interfaces/auth/login.response",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/LoginComponent.html":{}}}],["core/interfaces/auth/register.request",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/RegisterComponent.html":{}}}],["core/services/error",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["core/services/mat",{"_index":372,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/NavbarComponent.html":{}}}],["core/services/snack",{"_index":870,"title":{},"body":{"components/NewPostComponent.html":{}}}],["corresponding",{"_index":920,"title":{},"body":{"components/PageNotFoundComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["coverage",{"_index":1586,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":906,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostsComponent.html":{}}}],["created",{"_index":885,"title":{},"body":{"components/NewPostComponent.html":{},"injectables/PostService.html":{}}}],["created_at",{"_index":266,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"injectables/PostService.html":{}}}],["createpost",{"_index":1028,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(post",{"_index":1053,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostfrominput",{"_index":1029,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostfrominput(inputpost",{"_index":1056,"title":{},"body":{"injectables/PostService.html":{}}}],["createregisterrequest",{"_index":1316,"title":{},"body":{"components/RegisterComponent.html":{}}}],["creates",{"_index":1055,"title":{},"body":{"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["creating",{"_index":335,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["creator",{"_index":1059,"title":{},"body":{"injectables/PostService.html":{}}}],["credentials",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["css",{"_index":942,"title":{},"body":{"components/PostCommentComponent.html":{},"injectables/SnackBarService.html":{}}}],["cssclass",{"_index":1464,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["current",{"_index":440,"title":{},"body":{"components/FooterComponent.html":{},"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["currentdirection",{"_index":1236,"title":{},"body":{"components/PostsComponent.html":{}}}],["currently",{"_index":661,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["currentuser",{"_index":1174,"title":{},"body":{"injectables/PostService.html":{}}}],["currentuser.id",{"_index":1176,"title":{},"body":{"injectables/PostService.html":{}}}],["currentuser.username",{"_index":1177,"title":{},"body":{"injectables/PostService.html":{}}}],["currentyear",{"_index":437,"title":{},"body":{"components/FooterComponent.html":{}}}],["customized",{"_index":1281,"title":{},"body":{"components/PostsComponent.html":{}}}],["d",{"_index":457,"title":{},"body":{"components/HomeComponent.html":{}}}],["data",{"_index":609,"title":{},"body":{"components/LoginComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/UserService.html":{}}}],["database",{"_index":1552,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":271,"title":{},"body":{"interfaces/Comment.html":{},"components/FooterComponent.html":{},"interfaces/Post.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["date().getutcfullyear",{"_index":438,"title":{},"body":{"components/FooterComponent.html":{}}}],["date(a.created_at).gettime",{"_index":1146,"title":{},"body":{"injectables/PostService.html":{}}}],["date(b.created_at).gettime",{"_index":1145,"title":{},"body":{"injectables/PostService.html":{}}}],["date:'mediumdate",{"_index":956,"title":{},"body":{"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["date:\\'mediumdate",{"_index":957,"title":{},"body":{"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["datepipe",{"_index":928,"title":{},"body":{"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["declarations",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["declares",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["decorator",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":361,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["default",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["defined",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["defines",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["dependencies",{"_index":79,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"dependencies.html":{},"index.html":{}}}],["derived",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["desc",{"_index":1052,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{},"miscellaneous/variables.html":{}}}],["descending",{"_index":1103,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{},"miscellaneous/variables.html":{}}}],["describes",{"_index":1345,"title":{},"body":{"components/RegisterComponent.html":{}}}],["description",{"_index":184,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{}}}],["descriptions",{"_index":1374,"title":{},"body":{"components/RegisterComponent.html":{}}}],["destroyed",{"_index":558,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["details",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["details'},{'name",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["details.component",{"_index":157,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["details.component.html",{"_index":961,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.scss",{"_index":962,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts",{"_index":959,"title":{},"body":{"components/PostDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:101",{"_index":981,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:105",{"_index":983,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:111",{"_index":982,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:132",{"_index":980,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:47",{"_index":990,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:49",{"_index":989,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:50",{"_index":984,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:51",{"_index":987,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:55",{"_index":988,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:59",{"_index":985,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:63",{"_index":986,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:65",{"_index":971,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:73",{"_index":976,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:80",{"_index":979,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:89",{"_index":975,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["details.component.ts:95",{"_index":973,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["determines",{"_index":1571,"title":{},"body":{"injectables/authGuardService.html":{}}}],["determining",{"_index":946,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["device's",{"_index":938,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["different",{"_index":1357,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["digit",{"_index":1353,"title":{},"body":{"components/RegisterComponent.html":{}}}],["direction",{"_index":465,"title":{},"body":{"components/HomeComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["directive",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["directives",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["disableclose",{"_index":670,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["display",{"_index":460,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["displayed",{"_index":1467,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["displaying",{"_index":394,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/PageNotFoundComponent.html":{},"injectables/SnackBarService.html":{}}}],["displays",{"_index":406,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["divider.posts",{"_index":1294,"title":{},"body":{"components/PostsComponent.html":{}}}],["documentation",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["duration",{"_index":284,"title":{},"body":{"injectables/ConfigurationService.html":{},"injectables/SnackBarService.html":{}}}],["dynamic",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":1343,"title":{},"body":{"components/RegisterComponent.html":{}}}],["earlier",{"_index":1100,"title":{},"body":{"injectables/PostService.html":{}}}],["element",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["email",{"_index":573,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["email_or_username",{"_index":541,"title":{},"body":{"components/LoginComponent.html":{}}}],["email_validation_rule",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailorusername",{"_index":569,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{}}}],["emits",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["emitted",{"_index":673,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["encapsulates",{"_index":1006,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["endpoint",{"_index":1113,"title":{},"body":{"injectables/PostService.html":{}}}],["enter",{"_index":598,"title":{},"body":{"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":250,"title":{"interfaces/Environment.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.apiurl",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["environment.errorsnackbarduration",{"_index":302,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["environment.errorsnackbarhorizontalposition",{"_index":305,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["environment.errorsnackbarverticalposition",{"_index":307,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["environment.serviceurl",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["environments/environment",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":285,"title":{},"body":{"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"components/LoginComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{}}}],["error(app_constants.error_messages.must_be_authenticated",{"_index":1164,"title":{},"body":{"injectables/PostService.html":{}}}],["error.error.error",{"_index":427,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["error.message",{"_index":428,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["error.stack",{"_index":432,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["error.status",{"_index":422,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"injectables/SessionService.html":{}}}],["error_messages",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errorhandler",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["errorhandlerservice",{"_index":114,"title":{"injectables/ErrorHandlerService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ErrorHandlerService.html":{},"coverage.html":{}}}],["errormessages",{"_index":714,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["errormessages['content",{"_index":905,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["errormessages['email",{"_index":800,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["errormessages['password",{"_index":1386,"title":{},"body":{"components/RegisterComponent.html":{}}}],["errormessages['title",{"_index":903,"title":{},"body":{"components/NewPostComponent.html":{}}}],["errormessages['topic",{"_index":901,"title":{},"body":{"components/NewPostComponent.html":{}}}],["errormessages['username",{"_index":798,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["errormessages[\\'content",{"_index":912,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["errormessages[\\'email",{"_index":825,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["errormessages[\\'password",{"_index":1387,"title":{},"body":{"components/RegisterComponent.html":{}}}],["errormessages[\\'title",{"_index":910,"title":{},"body":{"components/NewPostComponent.html":{}}}],["errormessages[\\'topic",{"_index":908,"title":{},"body":{"components/NewPostComponent.html":{}}}],["errormessages[\\'username",{"_index":823,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["errors",{"_index":1332,"title":{},"body":{"components/RegisterComponent.html":{}}}],["errorsnackbarduration",{"_index":275,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"miscellaneous/variables.html":{}}}],["errorsnackbarhorizontalposition",{"_index":276,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"miscellaneous/variables.html":{}}}],["errorsnackbarverticalposition",{"_index":277,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"miscellaneous/variables.html":{}}}],["error|httperrorresponse",{"_index":420,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["event",{"_index":502,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["example",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["excluded",{"_index":507,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["excludedurls",{"_index":521,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["excludedurls.some((url",{"_index":522,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["existing",{"_index":1488,"title":{},"body":{"injectables/TopicService.html":{}}}],["exists",{"_index":497,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"components/RegisterComponent.html":{}}}],["export",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["exports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["extract",{"_index":1005,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["false",{"_index":376,"title":{},"body":{"components/ContentLayoutComponent.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/TopicsComponent.html":{},"injectables/authGuardService.html":{},"miscellaneous/variables.html":{}}}],["false;matsidenav.openedchange.subscribe(isopened",{"_index":656,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["features/auth/pages/login/login.component",{"_index":146,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["features/auth/pages/me/me.component",{"_index":145,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["features/auth/pages/register/register.component",{"_index":139,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["features/auth/services/session.service",{"_index":1580,"title":{},"body":{"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["features/posts/interfaces/comment",{"_index":951,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["features/posts/pages/details/post",{"_index":156,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["features/posts/pages/new",{"_index":153,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["features/posts/pages/posts/posts.component",{"_index":152,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["features/topics/pages/topics/topics.component",{"_index":151,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fetch",{"_index":1223,"title":{},"body":{"components/PostsComponent.html":{},"injectables/TopicService.html":{}}}],["fetchedpost",{"_index":1140,"title":{},"body":{"injectables/PostService.html":{}}}],["field",{"_index":584,"title":{},"body":{"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["fieldname",{"_index":852,"title":{},"body":{"components/NewPostComponent.html":{}}}],["fields",{"_index":1336,"title":{},"body":{"components/RegisterComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"injectables/unAuthGuardService.html":{}}}],["filter",{"_index":1070,"title":{},"body":{"injectables/PostService.html":{}}}],["filtered",{"_index":1069,"title":{},"body":{"injectables/PostService.html":{}}}],["filteredposts",{"_index":1141,"title":{},"body":{"injectables/PostService.html":{}}}],["filterpostsbytopicids",{"_index":1030,"title":{},"body":{"injectables/PostService.html":{}}}],["filterpostsbytopicids(posts",{"_index":1064,"title":{},"body":{"injectables/PostService.html":{}}}],["filters",{"_index":1067,"title":{},"body":{"injectables/PostService.html":{}}}],["finishes",{"_index":679,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["first",{"_index":1096,"title":{},"body":{"injectables/PostService.html":{}}}],["firstvaluefrom",{"_index":1428,"title":{},"body":{"injectables/SessionService.html":{},"injectables/authGuardService.html":{}}}],["firstvaluefrom(this.topicservice.getalltopics",{"_index":1439,"title":{},"body":{"injectables/SessionService.html":{}}}],["fit",{"_index":1308,"title":{},"body":{"components/PostsComponent.html":{}}}],["fixed",{"_index":663,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["fixedinviewport",{"_index":662,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["flag",{"_index":632,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["flex",{"_index":461,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["following",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["follows",{"_index":1359,"title":{},"body":{"components/RegisterComponent.html":{}}}],["font",{"_index":808,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["footer",{"_index":434,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["footer.component.html",{"_index":435,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":436,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":371,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["footercomponent",{"_index":45,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["form",{"_index":589,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["formcontrol",{"_index":575,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["formcontrols",{"_index":542,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["formsmodule",{"_index":530,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["formvalidationmessages",{"_index":543,"title":{},"body":{"components/LoginComponent.html":{}}}],["formvalidationmessages['emailorusername",{"_index":615,"title":{},"body":{"components/LoginComponent.html":{}}}],["formvalidationmessages['password",{"_index":617,"title":{},"body":{"components/LoginComponent.html":{}}}],["formvalidationmessages[\\'emailorusername",{"_index":619,"title":{},"body":{"components/LoginComponent.html":{}}}],["formvalidationmessages[\\'password",{"_index":621,"title":{},"body":{"components/LoginComponent.html":{}}}],["found",{"_index":915,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found'},{'name",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["found.component",{"_index":142,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["found.component.html",{"_index":917,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.scss",{"_index":918,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.ts",{"_index":914,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["found/page",{"_index":141,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["fully",{"_index":348,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["function",{"_index":834,"title":{},"body":{"components/NavbarComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["functionality",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["future",{"_index":1118,"title":{},"body":{"injectables/PostService.html":{}}}],["gap",{"_index":470,"title":{},"body":{"components/HomeComponent.html":{},"components/PostsComponent.html":{}}}],["generating",{"_index":1007,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["getalltopicposts",{"_index":1031,"title":{},"body":{"injectables/PostService.html":{}}}],["getalltopicposts(topicsids",{"_index":1071,"title":{},"body":{"injectables/PostService.html":{}}}],["getalltopics",{"_index":1482,"title":{},"body":{"injectables/TopicService.html":{}}}],["getcomments",{"_index":1032,"title":{},"body":{"injectables/PostService.html":{}}}],["getcomments(postid",{"_index":1075,"title":{},"body":{"injectables/PostService.html":{}}}],["geterrormessageforcontrol",{"_index":964,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["geterrormessageforcontrol(control",{"_index":972,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["geterrorsnackbarduration",{"_index":278,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["geterrorsnackbarhorizontalposition",{"_index":279,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["geterrorsnackbarverticalposition",{"_index":280,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getismatsidenavopened",{"_index":363,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["getpostbyid",{"_index":1033,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostbyid(id",{"_index":1077,"title":{},"body":{"injectables/PostService.html":{}}}],["getpostcommentssubscription",{"_index":994,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["getqueryparams",{"_index":1194,"title":{},"body":{"components/PostsComponent.html":{}}}],["getsortfunctionby",{"_index":1034,"title":{},"body":{"injectables/PostService.html":{}}}],["getsortfunctionby(sortfield",{"_index":1080,"title":{},"body":{"injectables/PostService.html":{}}}],["gettopicuserposts",{"_index":1195,"title":{},"body":{"components/PostsComponent.html":{}}}],["geturltreeorboolean",{"_index":1662,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["geturltreeorboolean(isloggedin",{"_index":1666,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["getuser",{"_index":1538,"title":{},"body":{"injectables/UserService.html":{}}}],["getutcfullyear",{"_index":444,"title":{},"body":{"components/FooterComponent.html":{}}}],["given",{"_index":405,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{}}}],["global",{"_index":1558,"title":{},"body":{"injectables/UserService.html":{}}}],["graph",{"_index":1660,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":1288,"title":{},"body":{"components/PostsComponent.html":{}}}],["grid",{"_index":1304,"title":{},"body":{"components/PostsComponent.html":{}}}],["guard",{"_index":159,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["handle",{"_index":409,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/RegisterComponent.html":{}}}],["handleerror",{"_index":397,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["handleerror(error",{"_index":402,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["handlenotauthenticated",{"_index":1565,"title":{},"body":{"injectables/authGuardService.html":{}}}],["handlenotauthenticated(isauthenticated",{"_index":1577,"title":{},"body":{"injectables/authGuardService.html":{}}}],["handler",{"_index":500,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["handler.service",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["handler.service.ts",{"_index":391,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"coverage.html":{}}}],["handler.service.ts:17",{"_index":401,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["handler.service.ts:29",{"_index":404,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["handler.service.ts:53",{"_index":411,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["handleregistration",{"_index":1317,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleregistration(registerrequest",{"_index":1326,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handles",{"_index":392,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["handleunauthorizedaccess",{"_index":1396,"title":{},"body":{"injectables/SessionService.html":{}}}],["handleunauthorizedaccess(error",{"_index":1404,"title":{},"body":{"injectables/SessionService.html":{}}}],["handling",{"_index":1372,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hasusersubscribed",{"_index":1503,"title":{},"body":{"components/TopicsComponent.html":{}}}],["hasusersubscribed(topic.id",{"_index":1535,"title":{},"body":{"components/TopicsComponent.html":{}}}],["hasusersubscribed(topicid",{"_index":1507,"title":{},"body":{"components/TopicsComponent.html":{}}}],["header",{"_index":490,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"components/PostsComponent.html":{}}}],["headers",{"_index":483,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["height",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["here",{"_index":863,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostsComponent.html":{}}}],["holding",{"_index":1513,"title":{},"body":{"components/TopicsComponent.html":{}}}],["home",{"_index":452,"title":{},"body":{"components/HomeComponent.html":{}}}],["home'},{'name",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["home.component.html",{"_index":454,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.scss",{"_index":453,"title":{},"body":{"components/HomeComponent.html":{}}}],["homecomponent",{"_index":47,"title":{"components/HomeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{},"index.html":{}}}],["hook",{"_index":728,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["horizontal",{"_index":289,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["horizontally",{"_index":820,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["horizontalposition",{"_index":1475,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["host",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["html",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["http",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["http://example.com/api/auth",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["http://localhost:3005/api",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_interceptors",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["httpclientmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["httperrorresponse",{"_index":403,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{}}}],["httperrorresponse({status",{"_index":518,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["httpgettopics",{"_index":1483,"title":{},"body":{"injectables/TopicService.html":{}}}],["httphandler",{"_index":495,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["httpinterceptor",{"_index":510,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["httprequest",{"_index":488,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["id",{"_index":267,"title":{},"body":{"interfaces/Comment.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["id)).pipe",{"_index":1134,"title":{},"body":{"injectables/PostService.html":{}}}],["identical",{"_index":1106,"title":{},"body":{"injectables/PostService.html":{}}}],["identifier",{"_index":1361,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["ids",{"_index":1063,"title":{},"body":{"injectables/PostService.html":{},"components/TopicsComponent.html":{}}}],["img",{"_index":472,"title":{},"body":{"components/HomeComponent.html":{}}}],["implements",{"_index":311,"title":{},"body":{"components/ContentLayoutComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["import",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["imports",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["includes",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["including",{"_index":1348,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":190,"title":{"index.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":646,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["indicates",{"_index":660,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["indicating",{"_index":1575,"title":{},"body":{"injectables/authGuardService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["information",{"_index":781,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"injectables/UserService.html":{}}}],["initialization",{"_index":344,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["initialized",{"_index":349,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/PostsComponent.html":{}}}],["initializegetcommentssubscription",{"_index":965,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["initializegetcommentssubscription(id",{"_index":974,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["initializegetpostcommentssubscription",{"_index":966,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["initializepostservicesubscription",{"_index":967,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["initializepostservicesubscription(params",{"_index":977,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["initializes",{"_index":735,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["initializing",{"_index":1040,"title":{},"body":{"injectables/PostService.html":{}}}],["injectable",{"_index":180,"title":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"injectables/unAuthGuardService.html":{}}}],["injectable({providedin",{"_index":512,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["injectables",{"_index":182,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"index.html":{},"injectables/unAuthGuardService.html":{}}}],["injected",{"_index":336,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["input",{"_index":950,"title":{},"body":{"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["inputpost",{"_index":1058,"title":{},"body":{"injectables/PostService.html":{}}}],["inputpost.content",{"_index":1168,"title":{},"body":{"injectables/PostService.html":{}}}],["inputpost.title",{"_index":1167,"title":{},"body":{"injectables/PostService.html":{}}}],["inputpost.topicid",{"_index":1171,"title":{},"body":{"injectables/PostService.html":{}}}],["inputs",{"_index":932,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["inset",{"_index":30,"title":{},"body":{"components/AppComponent.html":{}}}],["instance",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/TopicService.html":{}}}],["instanceof",{"_index":421,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["interact",{"_index":1024,"title":{},"body":{"injectables/PostService.html":{}}}],["interacting",{"_index":1202,"title":{},"body":{"components/PostsComponent.html":{},"injectables/UserService.html":{}}}],["intercept",{"_index":485,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["intercept(request",{"_index":493,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["intercepted",{"_index":501,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["interceptor",{"_index":476,"title":{"interceptors/JwtInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":477,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["intercepts",{"_index":479,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["interface",{"_index":262,"title":{"interfaces/Comment.html":{},"interfaces/Environment.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Topic.html":{},"interfaces/User.html":{}},"body":{"interfaces/Comment.html":{},"interfaces/Environment.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Topic.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":264,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Environment.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Topic.html":{},"interfaces/User.html":{},"index.html":{}}}],["interfaces/comment",{"_index":991,"title":{},"body":{"components/PostDetailsComponent.html":{},"injectables/PostService.html":{}}}],["interfaces/post",{"_index":871,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["interfaces/topic",{"_index":1494,"title":{},"body":{"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["interfaces/user",{"_index":756,"title":{},"body":{"components/MeComponent.html":{},"injectables/SessionService.html":{},"injectables/UserService.html":{}}}],["invoked",{"_index":1511,"title":{},"body":{"components/TopicsComponent.html":{}}}],["isauthenticated",{"_index":1579,"title":{},"body":{"injectables/authGuardService.html":{}}}],["isexcludedrequest",{"_index":486,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["isexcludedrequest(request",{"_index":504,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["isfieldinvalid",{"_index":844,"title":{},"body":{"components/NewPostComponent.html":{}}}],["isfieldinvalid(fieldname",{"_index":850,"title":{},"body":{"components/NewPostComponent.html":{}}}],["isforminvalid",{"_index":845,"title":{},"body":{"components/NewPostComponent.html":{}}}],["isformvalid",{"_index":718,"title":{},"body":{"components/MeComponent.html":{}}}],["islargescreen",{"_index":931,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["isloggedin",{"_index":1668,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["ismatsidenavopened",{"_index":331,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{}}}],["isopened",{"_index":627,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["isuserloggedin",{"_index":1393,"title":{},"body":{"injectables/SessionService.html":{}}}],["items",{"_index":464,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["javascript",{"_index":445,"title":{},"body":{"components/FooterComponent.html":{}}}],["justify",{"_index":462,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["jwtinterceptor",{"_index":92,"title":{"interceptors/JwtInterceptor.html":{}},"body":{"modules/AppModule.html":{},"interceptors/JwtInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["key",{"_index":592,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["keys",{"_index":1358,"title":{},"body":{"components/RegisterComponent.html":{}}}],["lab",{"_index":449,"title":{},"body":{"components/FooterComponent.html":{}}}],["label",{"_index":1379,"title":{},"body":{"components/RegisterComponent.html":{}}}],["labels",{"_index":544,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["labels['content",{"_index":904,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["labels['email",{"_index":799,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["labels['emailorusername",{"_index":614,"title":{},"body":{"components/LoginComponent.html":{}}}],["labels['password",{"_index":616,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["labels['title",{"_index":902,"title":{},"body":{"components/NewPostComponent.html":{}}}],["labels['topic",{"_index":900,"title":{},"body":{"components/NewPostComponent.html":{}}}],["labels['username",{"_index":797,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["labels[\\'content",{"_index":911,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["labels[\\'email",{"_index":824,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["labels[\\'emailorusername",{"_index":618,"title":{},"body":{"components/LoginComponent.html":{}}}],["labels[\\'password",{"_index":620,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["labels[\\'title",{"_index":909,"title":{},"body":{"components/NewPostComponent.html":{}}}],["labels[\\'topic",{"_index":907,"title":{},"body":{"components/NewPostComponent.html":{}}}],["labels[\\'username",{"_index":822,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["later",{"_index":1095,"title":{},"body":{"injectables/PostService.html":{}}}],["layout",{"_index":313,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout'},{'name",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["layout.component",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["layout.component.html",{"_index":324,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout.component.scss",{"_index":326,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout.component.ts",{"_index":310,"title":{},"body":{"components/ContentLayoutComponent.html":{},"coverage.html":{}}}],["layout.component.ts:38",{"_index":359,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout.component.ts:43",{"_index":334,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout.component.ts:60",{"_index":342,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout.component.ts:69",{"_index":364,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout.component.ts:78",{"_index":340,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["layout/content",{"_index":143,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"coverage.html":{}}}],["leaks",{"_index":733,"title":{},"body":{"components/MeComponent.html":{}}}],["leave",{"_index":1330,"title":{},"body":{"components/RegisterComponent.html":{}}}],["legend",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"index.html":{}}}],["letter",{"_index":1351,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["lifecycle",{"_index":727,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["list",{"_index":1493,"title":{},"body":{"injectables/TopicService.html":{}}}],["literal",{"_index":568,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["local",{"_index":498,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["localstorage.getitem('token",{"_index":516,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"injectables/SessionService.html":{}}}],["localstorage.removeitem('token",{"_index":1444,"title":{},"body":{"injectables/SessionService.html":{}}}],["localstorage.setitem('token",{"_index":1431,"title":{},"body":{"injectables/SessionService.html":{}}}],["log",{"_index":414,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["loggeduser",{"_index":715,"title":{},"body":{"components/MeComponent.html":{},"injectables/PostService.html":{}}}],["logic",{"_index":354,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/PostDetailsComponent.html":{}}}],["login",{"_index":173,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/SessionService.html":{},"injectables/authGuardService.html":{}}}],["login'},{'name",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["login(loginrequest",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["login(token",{"_index":1406,"title":{},"body":{"injectables/SessionService.html":{}}}],["login.component.html",{"_index":537,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":538,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":49,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["loginerrormessage",{"_index":545,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginrequest",{"_index":211,"title":{"interfaces/LoginRequest.html":{}},"body":{"injectables/AuthenticationService.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"coverage.html":{}}}],["loginresponse",{"_index":223,"title":{"interfaces/LoginResponse.html":{}},"body":{"injectables/AuthenticationService.html":{},"components/LoginComponent.html":{},"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["logout",{"_index":802,"title":{},"body":{"components/MeComponent.html":{},"injectables/SessionService.html":{}}}],["logs",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ErrorHandlerService.html":{}}}],["logstacktrace",{"_index":398,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["logstacktrace(error",{"_index":410,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["lowercase",{"_index":1352,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["m",{"_index":456,"title":{},"body":{"components/HomeComponent.html":{}}}],["main",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":1492,"title":{},"body":{"injectables/TopicService.html":{}}}],["makes",{"_index":1489,"title":{},"body":{"injectables/TopicService.html":{}}}],["making",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{}}}],["manage",{"_index":165,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["management",{"_index":393,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["managing",{"_index":337,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["manipulation",{"_index":1201,"title":{},"body":{"components/PostsComponent.html":{}}}],["map",{"_index":1581,"title":{},"body":{"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["map(isloggedin",{"_index":1670,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["map(this.handlenotauthenticated.bind(this",{"_index":1585,"title":{},"body":{"injectables/authGuardService.html":{}}}],["maps",{"_index":1373,"title":{},"body":{"components/RegisterComponent.html":{}}}],["margin",{"_index":1295,"title":{},"body":{"components/PostsComponent.html":{}}}],["mat",{"_index":467,"title":{},"body":{"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matanchor",{"_index":1186,"title":{},"body":{"components/PostsComponent.html":{}}}],["matbutton",{"_index":536,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matbuttonmodule",{"_index":695,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matcard",{"_index":709,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matcardactions",{"_index":705,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["matcardcontent",{"_index":706,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matcardheader",{"_index":708,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matcardmodule",{"_index":696,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matcardsubtitle",{"_index":960,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["matcardtitle",{"_index":707,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matches",{"_index":940,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["matching",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"properties.html":{},"routes.html":{},"injectables/unAuthGuardService.html":{},"miscellaneous/variables.html":{}}}],["matdivider",{"_index":704,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["material",{"_index":338,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"components/NavbarComponent.html":{},"components/PostsComponent.html":{}}}],["materialmodule",{"_index":90,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"components/RegisterComponent.html":{},"index.html":{},"modules.html":{}}}],["materror",{"_index":534,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["matformfield",{"_index":533,"title":{},"body":{"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"index.html":{}}}],["matformfieldmodule",{"_index":699,"title":{},"body":{"modules/MaterialModule.html":{}}}],["maticon",{"_index":317,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"index.html":{}}}],["maticonbutton",{"_index":828,"title":{},"body":{"components/NavbarComponent.html":{}}}],["maticonmodule",{"_index":698,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinput",{"_index":535,"title":{},"body":{"components/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"index.html":{}}}],["matlabel",{"_index":532,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["matmenu",{"_index":1184,"title":{},"body":{"components/PostsComponent.html":{}}}],["matmenuitem",{"_index":1187,"title":{},"body":{"components/PostsComponent.html":{}}}],["matmenutrigger",{"_index":1185,"title":{},"body":{"components/PostsComponent.html":{}}}],["matoption",{"_index":839,"title":{},"body":{"components/NewPostComponent.html":{}}}],["matselect",{"_index":840,"title":{},"body":{"components/NewPostComponent.html":{}}}],["matsidenav",{"_index":321,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{}}}],["matsidenav.disableclose",{"_index":655,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["matsidenav.fixedinviewport",{"_index":652,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["matsidenav.mode",{"_index":653,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["matsidenav.opened",{"_index":651,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["matsidenav.openedchange.subscribe(isopened",{"_index":683,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["matsidenavcontainer",{"_index":322,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["matsidenavcontent",{"_index":315,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["matsidenavmodule",{"_index":700,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavservice",{"_index":333,"title":{"injectables/MatSidenavService.html":{}},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"components/NavbarComponent.html":{},"coverage.html":{}}}],["matsnackbar",{"_index":1460,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["matsnackbarhorizontalposition",{"_index":291,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{}}}],["matsnackbarverticalposition",{"_index":294,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{}}}],["mattoolbar",{"_index":693,"title":{},"body":{"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"index.html":{}}}],["mattooltip",{"_index":916,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["max",{"_index":1302,"title":{},"body":{"components/PostsComponent.html":{}}}],["mdd",{"_index":358,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["me'},{'name",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["me.component.html",{"_index":713,"title":{},"body":{"components/MeComponent.html":{}}}],["me.component.scss",{"_index":760,"title":{},"body":{"components/MeComponent.html":{}}}],["me.component.scss,../../../../shared/styles/topic",{"_index":711,"title":{},"body":{"components/MeComponent.html":{}}}],["mecomponent",{"_index":51,"title":{"components/MeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["media",{"_index":475,"title":{},"body":{"components/HomeComponent.html":{},"components/PostCommentComponent.html":{},"components/PostsComponent.html":{}}}],["memberof",{"_index":1557,"title":{},"body":{"injectables/UserService.html":{}}}],["memory",{"_index":732,"title":{},"body":{"components/MeComponent.html":{}}}],["merge",{"_index":1272,"title":{},"body":{"components/PostsComponent.html":{}}}],["mergemap",{"_index":1119,"title":{},"body":{"injectables/PostService.html":{}}}],["mergemap((topics",{"_index":1126,"title":{},"body":{"injectables/PostService.html":{}}}],["message",{"_index":408,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["messages",{"_index":395,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["method",{"_index":350,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{},"components/TopicsComponent.html":{}}}],["methods",{"_index":188,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["milliseconds",{"_index":287,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["min",{"_index":1298,"title":{},"body":{"components/PostsComponent.html":{}}}],["min(var",{"_index":1301,"title":{},"body":{"components/PostsComponent.html":{}}}],["minmax",{"_index":1300,"title":{},"body":{"components/PostsComponent.html":{}}}],["minmax(var",{"_index":1309,"title":{},"body":{"components/PostsComponent.html":{}}}],["miscellaneous",{"_index":1673,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":665,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["modified",{"_index":1413,"title":{},"body":{"injectables/SessionService.html":{}}}],["modifieduser",{"_index":1414,"title":{},"body":{"injectables/SessionService.html":{}}}],["modifieduser.subscribedtopicids.includes(topic.id",{"_index":1453,"title":{},"body":{"injectables/SessionService.html":{}}}],["module",{"_index":76,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["modules",{"_index":78,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"index.html":{},"modules.html":{}}}],["multi",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["must_be_authenticated",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myclass",{"_index":1506,"title":{},"body":{"components/TopicsComponent.html":{}}}],["name",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["names",{"_index":1342,"title":{},"body":{"components/RegisterComponent.html":{}}}],["navbar",{"_index":827,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["navbar.component.html",{"_index":829,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.scss",{"_index":830,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar/navbar.component",{"_index":368,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["navbarcomponent",{"_index":53,"title":{"components/NavbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["navigated",{"_index":1574,"title":{},"body":{"injectables/authGuardService.html":{}}}],["navigates",{"_index":1211,"title":{},"body":{"components/PostsComponent.html":{}}}],["navigation",{"_index":650,"title":{},"body":{"injectables/MatSidenavService.html":{},"components/NavbarComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["necessary",{"_index":1215,"title":{},"body":{"components/PostsComponent.html":{}}}],["negative",{"_index":1099,"title":{},"body":{"injectables/PostService.html":{}}}],["new",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["newcomment",{"_index":1011,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["newly",{"_index":1061,"title":{},"body":{"injectables/PostService.html":{}}}],["newpost",{"_index":877,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostsComponent.html":{}}}],["newpostcomponent",{"_index":55,"title":{"components/NewPostComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["next",{"_index":494,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["next.handle(request",{"_index":515,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["ngaftercontentchecked",{"_index":353,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["ngaftercontentinit",{"_index":352,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["ngafterviewinit",{"_index":329,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["ngclass",{"_index":320,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["ngforof",{"_index":838,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["ngif",{"_index":531,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["ngmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngondestroy",{"_index":547,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["ngoninit",{"_index":719,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["ngoptimizedimage",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"components/NavbarComponent.html":{},"index.html":{}}}],["nothing",{"_index":1224,"title":{},"body":{"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["null",{"_index":303,"title":{},"body":{"injectables/ConfigurationService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostsComponent.html":{},"injectables/SessionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["number",{"_index":272,"title":{},"body":{"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"interfaces/Environment.html":{},"components/FooterComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object.values(this.formcontrols).foreach((control",{"_index":887,"title":{},"body":{"components/NewPostComponent.html":{}}}],["objects",{"_index":591,"title":{},"body":{"components/LoginComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["observ",{"_index":1514,"title":{},"body":{"components/TopicsComponent.html":{}}}],["observable",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"injectables/unAuthGuardService.html":{}}}],["obtain",{"_index":1115,"title":{},"body":{"injectables/PostService.html":{}}}],["obtained",{"_index":443,"title":{},"body":{"components/FooterComponent.html":{}}}],["occurred",{"_index":415,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["occurs",{"_index":1335,"title":{},"body":{"components/RegisterComponent.html":{}}}],["of(post",{"_index":1136,"title":{},"body":{"injectables/PostService.html":{}}}],["of(this._posts.value.find((post",{"_index":1132,"title":{},"body":{"injectables/PostService.html":{}}}],["of(this.topics",{"_index":1497,"title":{},"body":{"injectables/TopicService.html":{}}}],["olivier",{"_index":387,"title":{},"body":{"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["omit",{"_index":1060,"title":{},"body":{"injectables/PostService.html":{}}}],["onaddcommentclick",{"_index":968,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["onblur",{"_index":548,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["onblur(controlname",{"_index":561,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["ondestroy",{"_index":528,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["ongoing",{"_index":1517,"title":{},"body":{"components/TopicsComponent.html":{}}}],["oninit",{"_index":703,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["onlogoutclick",{"_index":720,"title":{},"body":{"components/MeComponent.html":{}}}],["onsortclick",{"_index":1196,"title":{},"body":{"components/PostsComponent.html":{}}}],["onsortclick(sortby",{"_index":1225,"title":{},"body":{"components/PostsComponent.html":{}}}],["onsubmit",{"_index":549,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/RegisterComponent.html":{}}}],["onsubscribeclick",{"_index":1504,"title":{},"body":{"components/TopicsComponent.html":{}}}],["onsubscribeclick(topicid",{"_index":1520,"title":{},"body":{"components/TopicsComponent.html":{}}}],["onunsubscribeclick",{"_index":721,"title":{},"body":{"components/MeComponent.html":{}}}],["onunsubscribeclick(topicid",{"_index":740,"title":{},"body":{"components/MeComponent.html":{}}}],["open",{"_index":647,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["opened",{"_index":366,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{}}}],["openedchange",{"_index":672,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["openedend",{"_index":678,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["openedstart",{"_index":675,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["opening",{"_index":677,"title":{},"body":{"injectables/MatSidenavService.html":{},"injectables/SnackBarService.html":{}}}],["opens",{"_index":1466,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["opensnackbar",{"_index":1458,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["opensnackbar(message",{"_index":1462,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["operation",{"_index":1548,"title":{},"body":{"injectables/UserService.html":{}}}],["operations",{"_index":1216,"title":{},"body":{"components/PostsComponent.html":{}}}],["option",{"_index":164,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["optional",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["order",{"_index":1087,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["otherwise",{"_index":377,"title":{},"body":{"components/ContentLayoutComponent.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["out",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["over",{"_index":654,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["overview",{"_index":1653,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1641,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["pagenotfoundcomponent",{"_index":58,"title":{"components/PageNotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["pages/home/home.component",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["panelclass",{"_index":1479,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["param",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{}}}],["parameter",{"_index":945,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["parameters",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["params",{"_index":978,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["params['direction",{"_index":1257,"title":{},"body":{"components/PostsComponent.html":{}}}],["params['id",{"_index":998,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["params['sort",{"_index":1254,"title":{},"body":{"components/PostsComponent.html":{}}}],["password",{"_index":546,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["password_validation_rule",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":171,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{}}}],["perform",{"_index":1214,"title":{},"body":{"components/PostsComponent.html":{}}}],["performs",{"_index":343,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{}}}],["pick",{"_index":878,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{}}}],["pierre",{"_index":386,"title":{},"body":{"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["pignon",{"_index":385,"title":{},"body":{"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["pipe",{"_index":1510,"title":{},"body":{"components/TopicsComponent.html":{}}}],["please",{"_index":597,"title":{},"body":{"components/LoginComponent.html":{},"components/NewPostComponent.html":{},"miscellaneous/variables.html":{}}}],["please_enter",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pop's",{"_index":447,"title":{},"body":{"components/FooterComponent.html":{}}}],["pop\\'s",{"_index":450,"title":{},"body":{"components/FooterComponent.html":{}}}],["position",{"_index":290,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["positive",{"_index":1094,"title":{},"body":{"injectables/PostService.html":{}}}],["possible",{"_index":667,"title":{},"body":{"injectables/MatSidenavService.html":{},"injectables/PostService.html":{}}}],["post",{"_index":62,"title":{"interfaces/Post.html":{}},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["post'},{'name",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["post.component",{"_index":155,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["post.component.html",{"_index":841,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.scss",{"_index":842,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts",{"_index":837,"title":{},"body":{"components/NewPostComponent.html":{},"coverage.html":{}}}],["post.component.ts:103",{"_index":853,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:107",{"_index":856,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:118",{"_index":855,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:124",{"_index":854,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:41",{"_index":865,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:42",{"_index":867,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:44",{"_index":866,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:46",{"_index":860,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:52",{"_index":858,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:58",{"_index":864,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:64",{"_index":859,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:68",{"_index":849,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:76",{"_index":857,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.component.ts:99",{"_index":851,"title":{},"body":{"components/NewPostComponent.html":{}}}],["post.content",{"_index":1022,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["post.created_at",{"_index":1020,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["post.id",{"_index":1133,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["post.title",{"_index":1019,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["post.username",{"_index":1021,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["post/new",{"_index":154,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/NewPostComponent.html":{},"coverage.html":{}}}],["postcommentcomponent",{"_index":61,"title":{"components/PostCommentComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["postdetailscomponent",{"_index":64,"title":{"components/PostDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["postid",{"_index":268,"title":{},"body":{"interfaces/Comment.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{}}}],["posts",{"_index":175,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/NavbarComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["posts'},{'name",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["posts.component.html",{"_index":1189,"title":{},"body":{"components/PostsComponent.html":{}}}],["posts.component.scss",{"_index":1247,"title":{},"body":{"components/PostsComponent.html":{}}}],["posts.component.scss,../../../../shared/styles/topic",{"_index":1188,"title":{},"body":{"components/PostsComponent.html":{}}}],["posts.filter((post",{"_index":1142,"title":{},"body":{"injectables/PostService.html":{}}}],["posts/:id",{"_index":177,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["posts/new",{"_index":176,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/PostsComponent.html":{}}}],["postscomponent",{"_index":66,"title":{"components/PostsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["postservice",{"_index":848,"title":{"injectables/PostService.html":{}},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"coverage.html":{}}}],["postservicesubscription",{"_index":843,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["private",{"_index":169,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["production",{"_index":383,"title":{},"body":{"interfaces/Environment.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":1556,"title":{},"body":{"injectables/UserService.html":{}}}],["promise",{"_index":642,"title":{},"body":{"injectables/MatSidenavService.html":{},"injectables/SessionService.html":{},"injectables/authGuardService.html":{}}}],["properties",{"_index":191,"title":{"properties.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":659,"title":{},"body":{"injectables/MatSidenavService.html":{},"components/RegisterComponent.html":{}}}],["provide",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{}}}],["providedin",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["provides",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"components/NavbarComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["pseudo",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["public",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/NavbarComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/unAuthGuardService.html":{}}}],["purpose",{"_index":1347,"title":{},"body":{"components/RegisterComponent.html":{}}}],["push",{"_index":669,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["queries",{"_index":943,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["query",{"_index":1205,"title":{},"body":{"components/PostsComponent.html":{}}}],["queryparams",{"_index":1270,"title":{},"body":{"components/PostsComponent.html":{}}}],["queryparamshandling",{"_index":1271,"title":{},"body":{"components/PostsComponent.html":{}}}],["reactiveformsmodule",{"_index":529,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["readonly",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"components/LoginComponent.html":{}}}],["recommended",{"_index":1213,"title":{},"body":{"components/PostsComponent.html":{}}}],["reference",{"_index":637,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["register",{"_index":172,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{}}}],["register'},{'name",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["register(registerrequest",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["register.component.html",{"_index":1314,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.scss",{"_index":1315,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registercomponent",{"_index":68,"title":{"components/RegisterComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["registerrequest",{"_index":228,"title":{"interfaces/RegisterRequest.html":{}},"body":{"injectables/AuthenticationService.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"coverage.html":{}}}],["registers",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["registration",{"_index":189,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/RegisterComponent.html":{}}}],["related",{"_index":1074,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["relativeto",{"_index":1268,"title":{},"body":{"components/PostsComponent.html":{}}}],["releasing",{"_index":1219,"title":{},"body":{"components/PostsComponent.html":{}}}],["relies",{"_index":355,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["remarks",{"_index":1471,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["rendered",{"_index":357,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["repeat(3",{"_index":1306,"title":{},"body":{"components/PostsComponent.html":{}}}],["repeat(auto",{"_index":1307,"title":{},"body":{"components/PostsComponent.html":{}}}],["representing",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Environment.html":{},"injectables/PostService.html":{}}}],["represents",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/PageNotFoundComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["request",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"interceptors/JwtInterceptor.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/TopicService.html":{}}}],["request.clone",{"_index":524,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["request.url.includes(url",{"_index":523,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["requests",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["requirements",{"_index":1346,"title":{},"body":{"components/RegisterComponent.html":{}}}],["reset",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}],["resetusersession",{"_index":1397,"title":{},"body":{"injectables/SessionService.html":{}}}],["resolves",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MatSidenavService.html":{},"injectables/authGuardService.html":{}}}],["resources",{"_index":1220,"title":{},"body":{"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["response",{"_index":624,"title":{},"body":{"interfaces/LoginResponse.html":{}}}],["responsible",{"_index":1321,"title":{},"body":{"components/RegisterComponent.html":{}}}],["result",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/TopicService.html":{}}}],["results",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"properties.html":{},"routes.html":{},"injectables/unAuthGuardService.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1073,"title":{},"body":{"injectables/PostService.html":{}}}],["retrieved",{"_index":1079,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{}}}],["retrieves",{"_index":283,"title":{},"body":{"injectables/ConfigurationService.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["retrieving",{"_index":1495,"title":{},"body":{"injectables/TopicService.html":{}}}],["return",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["returned",{"_index":1518,"title":{},"body":{"components/TopicsComponent.html":{}}}],["returns",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["root'},{'name",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["route",{"_index":163,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"injectables/authGuardService.html":{}}}],["router",{"_index":552,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["routerlink",{"_index":318,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["routerlinkactive",{"_index":319,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/NavbarComponent.html":{}}}],["routermodule",{"_index":136,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":179,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routeroutlet",{"_index":316,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["routerstatesnapshot",{"_index":1569,"title":{},"body":{"injectables/authGuardService.html":{}}}],["routes",{"_index":137,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routing.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":135,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["rxjs",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"dependencies.html":{},"injectables/unAuthGuardService.html":{}}}],["same",{"_index":1093,"title":{},"body":{"injectables/PostService.html":{}}}],["screen",{"_index":939,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["second",{"_index":1098,"title":{},"body":{"injectables/PostService.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["server",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["service",{"_index":187,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{},"components/TopicsComponent.html":{}}}],["services",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"components/LoginComponent.html":{}}}],["services/api/user.service",{"_index":757,"title":{},"body":{"components/MeComponent.html":{}}}],["services/authentication.service",{"_index":587,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["services/post.service",{"_index":869,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["services/session.service",{"_index":588,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{}}}],["services/topic.service",{"_index":1527,"title":{},"body":{"components/TopicsComponent.html":{}}}],["serviceurl",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["session",{"_index":1203,"title":{},"body":{"components/PostsComponent.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{}}}],["sessions",{"_index":1041,"title":{},"body":{"injectables/PostService.html":{}}}],["sessionservice",{"_index":551,"title":{"injectables/SessionService.html":{}},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"injectables/unAuthGuardService.html":{}}}],["sessionuser",{"_index":1394,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":638,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["setheaders",{"_index":525,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["setmatsidenav",{"_index":628,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["setmatsidenav(matsidenav",{"_index":635,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sets",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{}}}],["setupusersession",{"_index":1399,"title":{},"body":{"injectables/SessionService.html":{}}}],["shared/constants",{"_index":419,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["shared/material.modules",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"components/RegisterComponent.html":{}}}],["shared/styles/topic",{"_index":761,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["side",{"_index":649,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sidenav",{"_index":339,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{},"components/NavbarComponent.html":{}}}],["sidenav.service",{"_index":373,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/NavbarComponent.html":{}}}],["sidenav.service.ts",{"_index":626,"title":{},"body":{"injectables/MatSidenavService.html":{},"coverage.html":{}}}],["sidenav.service.ts:39",{"_index":648,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sidenav.service.ts:45",{"_index":645,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sidenav.service.ts:52",{"_index":636,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sidenav.service.ts:61",{"_index":634,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sidenav.service.ts:70",{"_index":639,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["sidenav.service.ts:80",{"_index":630,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["size",{"_index":809,"title":{},"body":{"components/MeComponent.html":{},"components/PostCommentComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["snack",{"_index":416,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["snackbar",{"_index":286,"title":{},"body":{"injectables/ConfigurationService.html":{},"injectables/SnackBarService.html":{}}}],["snackbars",{"_index":1456,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["snackbarservice",{"_index":400,"title":{"injectables/SnackBarService.html":{}},"body":{"injectables/ErrorHandlerService.html":{},"components/NewPostComponent.html":{},"injectables/SnackBarService.html":{},"coverage.html":{}}}],["sort",{"_index":1048,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["sort_directions",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sortby",{"_index":1191,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortbydate",{"_index":1035,"title":{},"body":{"injectables/PostService.html":{}}}],["sortbydate(a",{"_index":1088,"title":{},"body":{"injectables/PostService.html":{}}}],["sortbytitle",{"_index":1036,"title":{},"body":{"injectables/PostService.html":{}}}],["sortbytitle(a",{"_index":1101,"title":{},"body":{"injectables/PostService.html":{}}}],["sortdirection",{"_index":1192,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortdirections",{"_index":1193,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortdirections['date",{"_index":1277,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortdirections['title",{"_index":1280,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortdirections[\\'date",{"_index":1311,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortdirections[\\'title",{"_index":1312,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortfield",{"_index":1083,"title":{},"body":{"injectables/PostService.html":{}}}],["sortfunction",{"_index":1151,"title":{},"body":{"injectables/PostService.html":{}}}],["sorting",{"_index":1082,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["sortorder",{"_index":1050,"title":{},"body":{"injectables/PostService.html":{}}}],["sortorder='desc",{"_index":1148,"title":{},"body":{"injectables/PostService.html":{}}}],["sortpostsby",{"_index":1037,"title":{},"body":{"injectables/PostService.html":{}}}],["sortpostsby(sortfield",{"_index":1108,"title":{},"body":{"injectables/PostService.html":{}}}],["sorts",{"_index":1091,"title":{},"body":{"injectables/PostService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["space",{"_index":1284,"title":{},"body":{"components/PostsComponent.html":{}}}],["special",{"_index":1354,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":1573,"title":{},"body":{"injectables/authGuardService.html":{}}}],["specified",{"_index":1047,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["specifies",{"_index":666,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["src/.../constants.ts",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":134,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/core/components/page",{"_index":913,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["src/app/core/components/post",{"_index":925,"title":{},"body":{"components/PostCommentComponent.html":{},"coverage.html":{}}}],["src/app/core/guards/auth.guard.ts",{"_index":1563,"title":{},"body":{"injectables/authGuardService.html":{},"coverage.html":{}}}],["src/app/core/guards/auth.guard.ts:24",{"_index":1570,"title":{},"body":{"injectables/authGuardService.html":{}}}],["src/app/core/guards/auth.guard.ts:36",{"_index":1576,"title":{},"body":{"injectables/authGuardService.html":{}}}],["src/app/core/guards/auth.guard.ts:46",{"_index":1578,"title":{},"body":{"injectables/authGuardService.html":{}}}],["src/app/core/guards/auth.guard.ts:9",{"_index":1566,"title":{},"body":{"injectables/authGuardService.html":{}}}],["src/app/core/guards/unauth.guard.ts",{"_index":1595,"title":{},"body":{"coverage.html":{},"injectables/unAuthGuardService.html":{}}}],["src/app/core/guards/unauth.guard.ts:10",{"_index":1664,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["src/app/core/guards/unauth.guard.ts:17",{"_index":1665,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["src/app/core/guards/unauth.guard.ts:23",{"_index":1667,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["src/app/core/interceptors/jwt.interceptor.ts",{"_index":478,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"coverage.html":{}}}],["src/app/core/interceptors/jwt.interceptor.ts:19",{"_index":496,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["src/app/core/interceptors/jwt.interceptor.ts:40",{"_index":505,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["src/app/core/interceptors/jwt.interceptor.ts:53",{"_index":489,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["src/app/core/interfaces/auth/login.request.ts",{"_index":622,"title":{},"body":{"interfaces/LoginRequest.html":{},"coverage.html":{}}}],["src/app/core/interfaces/auth/login.response.ts",{"_index":623,"title":{},"body":{"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["src/app/core/interfaces/auth/register.request.ts",{"_index":1388,"title":{},"body":{"interfaces/RegisterRequest.html":{},"coverage.html":{}}}],["src/app/core/interfaces/environment.ts",{"_index":380,"title":{},"body":{"interfaces/Environment.html":{},"coverage.html":{}}}],["src/app/core/services/configuration.service.ts",{"_index":274,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{}}}],["src/app/core/services/configuration.service.ts:10",{"_index":296,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/core/services/configuration.service.ts:11",{"_index":298,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/core/services/configuration.service.ts:12",{"_index":281,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/core/services/configuration.service.ts:32",{"_index":282,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/core/services/configuration.service.ts:41",{"_index":288,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/core/services/configuration.service.ts:50",{"_index":292,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/core/services/error",{"_index":390,"title":{},"body":{"injectables/ErrorHandlerService.html":{},"coverage.html":{}}}],["src/app/core/services/mat",{"_index":625,"title":{},"body":{"injectables/MatSidenavService.html":{},"coverage.html":{}}}],["src/app/core/services/snack",{"_index":1454,"title":{},"body":{"injectables/SnackBarService.html":{},"coverage.html":{}}}],["src/app/features/auth/interfaces/user.ts",{"_index":1536,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/app/features/auth/pages/login/login.component.ts",{"_index":527,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:115",{"_index":555,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:36",{"_index":574,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:37",{"_index":580,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:40",{"_index":567,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:43",{"_index":577,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:48",{"_index":579,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:53",{"_index":572,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:58",{"_index":578,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:63",{"_index":553,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:70",{"_index":562,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:77",{"_index":564,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/login/login.component.ts:84",{"_index":554,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts",{"_index":702,"title":{},"body":{"components/MeComponent.html":{},"coverage.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:100",{"_index":739,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:124",{"_index":738,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:132",{"_index":734,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:161",{"_index":726,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:45",{"_index":754,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:47",{"_index":751,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:49",{"_index":753,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:51",{"_index":749,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:60",{"_index":745,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:65",{"_index":750,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:70",{"_index":746,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:73",{"_index":724,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:80",{"_index":741,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:88",{"_index":737,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/me/me.component.ts:95",{"_index":725,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts",{"_index":1313,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:100",{"_index":1356,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:104",{"_index":1319,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:125",{"_index":1333,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:138",{"_index":1325,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:155",{"_index":1327,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:173",{"_index":1329,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:195",{"_index":1328,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:41",{"_index":1339,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:44",{"_index":1370,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:71",{"_index":1341,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/pages/register/register.component.ts:84",{"_index":1371,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/features/auth/services/api/user.service.ts",{"_index":1537,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/features/auth/services/api/user.service.ts:22",{"_index":1541,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/features/auth/services/api/user.service.ts:32",{"_index":1542,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/features/auth/services/api/user.service.ts:42",{"_index":1551,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/features/auth/services/api/user.service.ts:52",{"_index":1544,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/features/auth/services/api/user.service.ts:62",{"_index":1547,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/features/auth/services/authentication.service.ts",{"_index":183,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/app/features/auth/services/authentication.service.ts:26",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/features/auth/services/authentication.service.ts:42",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/features/auth/services/authentication.service.ts:52",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/features/auth/services/session.service.ts",{"_index":1389,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/app/features/auth/services/session.service.ts:13",{"_index":1420,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:14",{"_index":1424,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:16",{"_index":1421,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:17",{"_index":1426,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:19",{"_index":1418,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:20",{"_index":1403,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:28",{"_index":1407,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:34",{"_index":1410,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:56",{"_index":1408,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:61",{"_index":1409,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:67",{"_index":1405,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:82",{"_index":1412,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/auth/services/session.service.ts:94",{"_index":1416,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/app/features/posts/interfaces/comment.ts",{"_index":265,"title":{},"body":{"interfaces/Comment.html":{},"coverage.html":{}}}],["src/app/features/posts/interfaces/post.ts",{"_index":922,"title":{},"body":{"interfaces/Post.html":{},"coverage.html":{}}}],["src/app/features/posts/pages/details/post",{"_index":958,"title":{},"body":{"components/PostDetailsComponent.html":{},"coverage.html":{}}}],["src/app/features/posts/pages/new",{"_index":836,"title":{},"body":{"components/NewPostComponent.html":{},"coverage.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts",{"_index":1183,"title":{},"body":{"components/PostsComponent.html":{},"coverage.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:118",{"_index":1226,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:133",{"_index":1235,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:146",{"_index":1231,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:163",{"_index":1210,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:174",{"_index":1221,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:186",{"_index":1212,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:45",{"_index":1241,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:47",{"_index":1242,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:48",{"_index":1243,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:49",{"_index":1245,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:53",{"_index":1240,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:54",{"_index":1200,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:71",{"_index":1239,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:81",{"_index":1209,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/pages/posts/posts.component.ts:96",{"_index":1204,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/features/posts/services/post.service.ts",{"_index":1023,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/app/features/posts/services/post.service.ts:114",{"_index":1090,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:128",{"_index":1102,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:139",{"_index":1109,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:156",{"_index":1081,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:174",{"_index":1045,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:187",{"_index":1054,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:207",{"_index":1057,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:218",{"_index":1076,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:222",{"_index":1043,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:25",{"_index":1112,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:29",{"_index":1111,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:38",{"_index":1039,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:62",{"_index":1072,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:76",{"_index":1078,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/posts/services/post.service.ts:99",{"_index":1066,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/features/topics/interfaces/topic.ts",{"_index":1480,"title":{},"body":{"interfaces/Topic.html":{},"coverage.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts",{"_index":1499,"title":{},"body":{"components/TopicsComponent.html":{},"coverage.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:108",{"_index":1509,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:32",{"_index":1525,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:36",{"_index":1523,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:41",{"_index":1522,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:45",{"_index":1505,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:67",{"_index":1508,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:77",{"_index":1521,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/pages/topics/topics.component.ts:90",{"_index":1519,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/features/topics/services/topic.service.ts",{"_index":1481,"title":{},"body":{"injectables/TopicService.html":{},"coverage.html":{}}}],["src/app/features/topics/services/topic.service.ts:22",{"_index":1491,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/app/features/topics/services/topic.service.ts:26",{"_index":1484,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/app/features/topics/services/topic.service.ts:42",{"_index":1490,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/app/features/topics/services/topic.service.ts:55",{"_index":1485,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/app/layout/content",{"_index":309,"title":{},"body":{"components/ContentLayoutComponent.html":{},"coverage.html":{}}}],["src/app/layout/footer/footer.component.ts",{"_index":433,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["src/app/layout/footer/footer.component.ts:30",{"_index":439,"title":{},"body":{"components/FooterComponent.html":{}}}],["src/app/layout/navbar/navbar.component.ts",{"_index":826,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/layout/navbar/navbar.component.ts:31",{"_index":831,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/layout/navbar/navbar.component.ts:36",{"_index":832,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/pages/home/home.component.ts",{"_index":451,"title":{},"body":{"components/HomeComponent.html":{},"coverage.html":{}}}],["src/app/shared/constants.ts",{"_index":1636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/material.modules.ts",{"_index":694,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/environments/environment.prod.ts",{"_index":1637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":412,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["standalone",{"_index":314,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["starts",{"_index":676,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["state",{"_index":641,"title":{},"body":{"injectables/MatSidenavService.html":{},"injectables/authGuardService.html":{}}}],["statements",{"_index":1588,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1524,"title":{},"body":{"components/TopicsComponent.html":{},"injectables/authGuardService.html":{}}}],["statustext",{"_index":519,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["storage",{"_index":499,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["stores",{"_index":442,"title":{},"body":{"components/FooterComponent.html":{},"components/RegisterComponent.html":{}}}],["stream",{"_index":503,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["string",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["structure",{"_index":1360,"title":{},"body":{"components/RegisterComponent.html":{}}}],["styles",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["styles.css",{"_index":712,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["styleurl",{"_index":325,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["styleurls",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["submission",{"_index":1334,"title":{},"body":{"components/RegisterComponent.html":{}}}],["subscribe",{"_index":608,"title":{},"body":{"components/LoginComponent.html":{},"injectables/PostService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["subscribe((posts",{"_index":1251,"title":{},"body":{"components/PostsComponent.html":{}}}],["subscribe((user",{"_index":1532,"title":{},"body":{"components/TopicsComponent.html":{}}}],["subscribed",{"_index":560,"title":{},"body":{"components/LoginComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["subscribedtopicids",{"_index":776,"title":{},"body":{"components/MeComponent.html":{},"interfaces/User.html":{}}}],["subscribedtopics",{"_index":716,"title":{},"body":{"components/MeComponent.html":{}}}],["subscribes",{"_index":1545,"title":{},"body":{"injectables/UserService.html":{}}}],["subscribetopic",{"_index":1539,"title":{},"body":{"injectables/UserService.html":{}}}],["subscribetopic(topicid",{"_index":1543,"title":{},"body":{"injectables/UserService.html":{}}}],["subscription",{"_index":565,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["subscription.unsubscribe",{"_index":795,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["subscriptions",{"_index":717,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{}}}],["subtitle",{"_index":1290,"title":{},"body":{"components/PostsComponent.html":{}}}],["successful",{"_index":1549,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":1554,"title":{},"body":{"injectables/UserService.html":{}}}],["such",{"_index":1217,"title":{},"body":{"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["support",{"_index":1657,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1658,"title":{},"body":{"modules.html":{}}}],["swaps",{"_index":1232,"title":{},"body":{"components/PostsComponent.html":{}}}],["swapsortorder",{"_index":1197,"title":{},"body":{"components/PostsComponent.html":{}}}],["swapsortorder(sortby",{"_index":1230,"title":{},"body":{"components/PostsComponent.html":{}}}],["switch",{"_index":1155,"title":{},"body":{"injectables/PostService.html":{}}}],["switchmap",{"_index":1120,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["switchmap((post",{"_index":1135,"title":{},"body":{"injectables/PostService.html":{}}}],["switchmap((topics",{"_index":1248,"title":{},"body":{"components/PostsComponent.html":{}}}],["switchmap(currentuser",{"_index":1173,"title":{},"body":{"injectables/PostService.html":{}}}],["switchmap(loggeduser",{"_index":1163,"title":{},"body":{"injectables/PostService.html":{}}}],["table",{"_index":1640,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1639,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1121,"title":{},"body":{"injectables/PostService.html":{},"injectables/authGuardService.html":{}}}],["take(1",{"_index":1162,"title":{},"body":{"injectables/PostService.html":{},"injectables/authGuardService.html":{}}}],["takes",{"_index":1084,"title":{},"body":{"injectables/PostService.html":{}}}],["tap",{"_index":1122,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{}}}],["tap((fetchedpost",{"_index":1138,"title":{},"body":{"injectables/PostService.html":{}}}],["tap((posts",{"_index":1130,"title":{},"body":{"injectables/PostService.html":{}}}],["tap((topics",{"_index":1496,"title":{},"body":{"injectables/TopicService.html":{}}}],["tasks",{"_index":345,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/LoginComponent.html":{}}}],["template",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["templateurl",{"_index":323,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["text",{"_index":1468,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["this._isuserloggedin.asobservable",{"_index":1422,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._isuserloggedin.next(false",{"_index":1447,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._isuserloggedin.next(true",{"_index":1432,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._posts.asobservable",{"_index":1114,"title":{},"body":{"injectables/PostService.html":{}}}],["this._posts.next([...this._posts.value",{"_index":1139,"title":{},"body":{"injectables/PostService.html":{}}}],["this._posts.next(filteredposts",{"_index":1144,"title":{},"body":{"injectables/PostService.html":{}}}],["this._posts.value",{"_index":1150,"title":{},"body":{"injectables/PostService.html":{}}}],["this._posts.value.reverse",{"_index":1159,"title":{},"body":{"injectables/PostService.html":{}}}],["this._posts.value.sort(sortfunction",{"_index":1153,"title":{},"body":{"injectables/PostService.html":{}}}],["this._sessionuser.asobservable",{"_index":1423,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._sessionuser.next(modifieduser",{"_index":1449,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._sessionuser.next(null",{"_index":1446,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._sessionuser.next(user",{"_index":1438,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._topicsubscriptions.asobservable",{"_index":1425,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._topicsubscriptions.next",{"_index":1448,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._topicsubscriptions.next(topicsubscriptions",{"_index":1442,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.addauthorizationheader(request",{"_index":517,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["this.an_error_has_occurred",{"_index":426,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["this.applysortdirection(sortorder",{"_index":1154,"title":{},"body":{"injectables/PostService.html":{}}}],["this.ascendingorder",{"_index":1264,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.authenticationservice.login(loginrequest",{"_index":607,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.register(registerrequest).subscribe",{"_index":1382,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.authservicesubscription",{"_index":606,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.authservicesubscription.unsubscribe",{"_index":613,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.breakpointobserver.ismatched('(min",{"_index":948,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["this.checkuserloginstatus",{"_index":1582,"title":{},"body":{"injectables/authGuardService.html":{}}}],["this.comments",{"_index":1004,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.comments.push(newcomment",{"_index":1015,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.configurationservice.geterrorsnackbarduration",{"_index":1474,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["this.configurationservice.geterrorsnackbarhorizontalposition",{"_index":1476,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["this.configurationservice.geterrorsnackbarverticalposition",{"_index":1478,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["this.controlnames[controlname",{"_index":766,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["this.controlnames[controlname].tolowercase",{"_index":599,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.createpostfrominput(post",{"_index":1166,"title":{},"body":{"injectables/PostService.html":{}}}],["this.createregisterrequest",{"_index":1380,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.email_or_username",{"_index":570,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.errormessages[controlname",{"_index":764,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["this.errorsnackbarduration",{"_index":304,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.errorsnackbarhorizontalposition",{"_index":306,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.errorsnackbarverticalposition",{"_index":308,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.filterpostsbytopicids(posts",{"_index":1131,"title":{},"body":{"injectables/PostService.html":{}}}],["this.formcontrols[\"username\"].valid",{"_index":767,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols['content'].invalid",{"_index":894,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['content'].reset",{"_index":1016,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.formcontrols['content'].seterrors(null",{"_index":1017,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.formcontrols['content'].valid",{"_index":876,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["this.formcontrols['content'].value",{"_index":881,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["this.formcontrols['email'].setvalue",{"_index":788,"title":{},"body":{"components/MeComponent.html":{}}}],["this.formcontrols['email'].setvalue(this.loggeduser.email",{"_index":786,"title":{},"body":{"components/MeComponent.html":{}}}],["this.formcontrols['email'].valid",{"_index":768,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols['email'].value",{"_index":774,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols['emailorusername'].valid",{"_index":600,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.formcontrols['emailorusername'].value",{"_index":603,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.formcontrols['password'].valid",{"_index":601,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols['password'].value",{"_index":604,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols['title'].invalid",{"_index":893,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['title'].valid",{"_index":875,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['title'].value",{"_index":880,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['topic'].invalid",{"_index":892,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['topic'].valid",{"_index":874,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['topic'].value",{"_index":879,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols['username'].setvalue",{"_index":787,"title":{},"body":{"components/MeComponent.html":{}}}],["this.formcontrols['username'].setvalue(this.loggeduser.username",{"_index":785,"title":{},"body":{"components/MeComponent.html":{}}}],["this.formcontrols['username'].value",{"_index":773,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols[controlname",{"_index":593,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["this.formcontrols[fieldname].invalid",{"_index":890,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formcontrols[fieldname].touched",{"_index":891,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.formvalidationmessages[controlname",{"_index":595,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.getalltopicposts(topicsids",{"_index":1128,"title":{},"body":{"injectables/PostService.html":{}}}],["this.geterrormessageforcontrol(control",{"_index":1009,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.getqueryparams",{"_index":1275,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.getsortfunctionby(sortfield",{"_index":1152,"title":{},"body":{"injectables/PostService.html":{}}}],["this.gettopicuserposts",{"_index":1276,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.geturltreeorboolean(isloggedin",{"_index":1671,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["this.handleregistration(registerrequest",{"_index":1381,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.handleunauthorizedaccess(error",{"_index":1437,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.http.delete(`${this.apiurl}/topic/${topicid",{"_index":1562,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.get(`${this.apiurl",{"_index":1559,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.post(`${this.apiurl}/topic/${topicid",{"_index":1561,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.post(`${this.serviceurl}/login",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.http.post(`${this.serviceurl}/register",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.http.put(`${this.apiurl",{"_index":1560,"title":{},"body":{"injectables/UserService.html":{}}}],["this.httpclient.get(`${this.apiurl}/${id}`).pipe",{"_index":1137,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpclient.get(`${this.apiurl}/${postid}/comments",{"_index":1172,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpclient.get(this.apiurl).pipe",{"_index":1129,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{}}}],["this.httpclient.post(`${this.apiurl}/${comment.postid}/comments",{"_index":1182,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpclient.post(this.apiurl",{"_index":1165,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpgettopics",{"_index":1498,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.initializegetcommentssubscription(id",{"_index":1001,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.initializegetpostcommentssubscription",{"_index":1008,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.initializepostservicesubscription(params",{"_index":996,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.isexcludedrequest(request",{"_index":514,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["this.isformvalid",{"_index":769,"title":{},"body":{"components/MeComponent.html":{}}}],["this.isopened",{"_index":686,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["this.loggeduser",{"_index":770,"title":{},"body":{"components/MeComponent.html":{}}}],["this.loggeduser.id",{"_index":771,"title":{},"body":{"components/MeComponent.html":{}}}],["this.loggeduser.password",{"_index":775,"title":{},"body":{"components/MeComponent.html":{}}}],["this.loggeduser.subscribedtopicids",{"_index":777,"title":{},"body":{"components/MeComponent.html":{}}}],["this.login",{"_index":602,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logstacktrace(error",{"_index":425,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["this.matsidenav",{"_index":685,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["this.matsidenav.close().then",{"_index":689,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["this.matsidenav.opened",{"_index":688,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["this.matsidenav.toggle().then",{"_index":687,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["this.matsidenavservice.closematsidenav",{"_index":379,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["this.matsidenavservice.ismatsidenavopened",{"_index":378,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["this.matsidenavservice.setmatsidenav(this.matsidenav",{"_index":374,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["this.matsidenavservice.togglematsidenav",{"_index":835,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.password",{"_index":571,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.post",{"_index":1000,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.post.id",{"_index":1012,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.post?.id",{"_index":1010,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.posts",{"_index":1252,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.postservice.addcomment(newcomment).subscribe",{"_index":1014,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.postservice.createpost(newpost).subscribe",{"_index":883,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.postservice.getalltopicposts(topics.map((topic",{"_index":1249,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.postservice.getcomments(id).subscribe((comments",{"_index":1003,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.postservice.getpostbyid(id).subscribe((post",{"_index":999,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.postservice.posts",{"_index":1250,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.postservice.sortpostsby(sortby",{"_index":1273,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.postservicesubscription",{"_index":882,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostsComponent.html":{}}}],["this.postservicesubscription.unsubscribe",{"_index":898,"title":{},"body":{"components/NewPostComponent.html":{},"components/PostsComponent.html":{}}}],["this.resetusersession",{"_index":1445,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.route",{"_index":1269,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.route.params.subscribe(params",{"_index":995,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.route.queryparams.subscribe(params",{"_index":1253,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.router.navigate",{"_index":1267,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.router.navigate(['/login",{"_index":780,"title":{},"body":{"components/MeComponent.html":{},"injectables/authGuardService.html":{}}}],["this.router.navigate(['/posts']).then",{"_index":611,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.router.navigate(['/posts/new",{"_index":1274,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.router.parseurl('/posts",{"_index":1672,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["this.sessionservice.isuserloggedin$.pipe",{"_index":1584,"title":{},"body":{"injectables/authGuardService.html":{},"injectables/unAuthGuardService.html":{}}}],["this.sessionservice.login(data.token",{"_index":610,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.sessionservice.logout",{"_index":779,"title":{},"body":{"components/MeComponent.html":{}}}],["this.sessionservice.sessionuser$.pipe",{"_index":1161,"title":{},"body":{"injectables/PostService.html":{}}}],["this.sessionservice.sessionuser$.subscribe((user",{"_index":783,"title":{},"body":{"components/MeComponent.html":{}}}],["this.sessionservice.setupusersession",{"_index":1583,"title":{},"body":{"injectables/authGuardService.html":{}}}],["this.sessionservice.topicsubscriptions$.pipe",{"_index":1125,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["this.sessionservice.topicsubscriptions$.subscribe((topics",{"_index":791,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["this.sessionservice.updateuser(user",{"_index":763,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["this.setupusersession",{"_index":1433,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.setupusersession().then(r",{"_index":1430,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.snackbar.open(message",{"_index":1473,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["this.snackbarservice.opensnackbar('post",{"_index":884,"title":{},"body":{"components/NewPostComponent.html":{}}}],["this.snackbarservice.opensnackbar(message",{"_index":429,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["this.sortby",{"_index":1255,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.sortbydate",{"_index":1157,"title":{},"body":{"injectables/PostService.html":{}}}],["this.sortbytitle",{"_index":1158,"title":{},"body":{"injectables/PostService.html":{}}}],["this.sortdirection",{"_index":1256,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.sortdirections[sortby",{"_index":1261,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.subscribedtopics",{"_index":792,"title":{},"body":{"components/MeComponent.html":{}}}],["this.subscriptions.foreach((subscription",{"_index":794,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["this.subscriptions.push(addcommentsubscription",{"_index":1018,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.subscriptions.push(getpostcommentssubscription",{"_index":997,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.subscriptions.push(postservicesubscription",{"_index":1002,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.subscriptions.push(topicservicesubscription",{"_index":793,"title":{},"body":{"components/MeComponent.html":{}}}],["this.subscriptions.push(userservicesubscription",{"_index":789,"title":{},"body":{"components/MeComponent.html":{}}}],["this.swapsortorder('date",{"_index":1258,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.swapsortorder(sortby",{"_index":1263,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.togglesortdirection(direction",{"_index":1262,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.topics",{"_index":897,"title":{},"body":{"components/NewPostComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["this.topicservice.getalltopics().subscribe((topic",{"_index":1451,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.topicservice.getalltopics().subscribe((topics",{"_index":896,"title":{},"body":{"components/NewPostComponent.html":{},"components/TopicsComponent.html":{}}}],["this.topicservicesubscription",{"_index":895,"title":{},"body":{"components/NewPostComponent.html":{},"components/TopicsComponent.html":{}}}],["this.topicservicesubscription.unsubscribe",{"_index":899,"title":{},"body":{"components/NewPostComponent.html":{},"components/TopicsComponent.html":{}}}],["this.updateusertopicsubscriptions(modifieduser",{"_index":1450,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.userservice.getuser().pipe(catcherror(error",{"_index":1436,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.userservice.subscribetopic(topicid",{"_index":1531,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.userservice.unsubscribetopic(topicid).subscribe",{"_index":762,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userservice.updateuser(updateduser).subscribe((user",{"_index":778,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userservicesubscription",{"_index":1530,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.userservicesubscription.unsubscribe",{"_index":1534,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.usertopicsubscriptionids",{"_index":1533,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.usertopicsubscriptionids.includes(topicid",{"_index":1529,"title":{},"body":{"components/TopicsComponent.html":{}}}],["three",{"_index":1338,"title":{},"body":{"components/RegisterComponent.html":{}}}],["throw",{"_index":612,"title":{},"body":{"components/LoginComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{}}}],["throwerror",{"_index":511,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["throws",{"_index":1160,"title":{},"body":{"injectables/PostService.html":{}}}],["title",{"_index":360,"title":{},"body":{"components/ContentLayoutComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"interfaces/Post.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{}}}],["titlecase",{"_index":806,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["titlecasepipe",{"_index":710,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["titles",{"_index":1105,"title":{},"body":{"injectables/PostService.html":{}}}],["toggle",{"_index":833,"title":{},"body":{"components/NavbarComponent.html":{}}}],["toggled",{"_index":1237,"title":{},"body":{"components/PostsComponent.html":{}}}],["togglematsidenav",{"_index":629,"title":{},"body":{"injectables/MatSidenavService.html":{},"components/NavbarComponent.html":{}}}],["toggles",{"_index":640,"title":{},"body":{"injectables/MatSidenavService.html":{},"components/PostsComponent.html":{}}}],["togglesortdirection",{"_index":1198,"title":{},"body":{"components/PostsComponent.html":{}}}],["togglesortdirection(currentdirection",{"_index":1234,"title":{},"body":{"components/PostsComponent.html":{}}}],["toggling",{"_index":643,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["token",{"_index":482,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"interfaces/LoginResponse.html":{},"injectables/SessionService.html":{}}}],["top",{"_index":1296,"title":{},"body":{"components/PostsComponent.html":{}}}],["topic",{"_index":752,"title":{"interfaces/Topic.html":{}},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SessionService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["topic.description",{"_index":807,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["topic.filter((topic",{"_index":1452,"title":{},"body":{"injectables/SessionService.html":{}}}],["topic.id",{"_index":804,"title":{},"body":{"components/MeComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["topic.title",{"_index":805,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/TopicsComponent.html":{}}}],["topicid",{"_index":742,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"interfaces/Post.html":{},"injectables/PostService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["topics",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["topics.component.html",{"_index":1501,"title":{},"body":{"components/TopicsComponent.html":{}}}],["topics.component.scss",{"_index":1528,"title":{},"body":{"components/TopicsComponent.html":{}}}],["topics.component.scss,../../../../shared/styles/topic",{"_index":1500,"title":{},"body":{"components/TopicsComponent.html":{}}}],["topics.filter((topic",{"_index":1440,"title":{},"body":{"injectables/SessionService.html":{}}}],["topics.map((topic",{"_index":1127,"title":{},"body":{"injectables/PostService.html":{},"components/TopicsComponent.html":{}}}],["topics/interfaces/topic",{"_index":759,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SessionService.html":{}}}],["topics/services/topic.service",{"_index":868,"title":{},"body":{"components/NewPostComponent.html":{},"injectables/SessionService.html":{}}}],["topicscomponent",{"_index":70,"title":{"components/TopicsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["topicservice",{"_index":847,"title":{"injectables/TopicService.html":{}},"body":{"components/NewPostComponent.html":{},"injectables/SessionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["topicservicesubscription",{"_index":790,"title":{},"body":{"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/TopicsComponent.html":{}}}],["topicsids",{"_index":1065,"title":{},"body":{"injectables/PostService.html":{}}}],["topicsids.includes(post.topicid",{"_index":1143,"title":{},"body":{"injectables/PostService.html":{}}}],["topicsubscriptions",{"_index":1395,"title":{},"body":{"injectables/SessionService.html":{}}}],["topictitle",{"_index":924,"title":{},"body":{"interfaces/Post.html":{}}}],["trace",{"_index":413,"title":{},"body":{"injectables/ErrorHandlerService.html":{}}}],["track",{"_index":803,"title":{},"body":{"components/MeComponent.html":{}}}],["trackbypostid",{"_index":1199,"title":{},"body":{"components/PostsComponent.html":{}}}],["trackbypostid(index",{"_index":1238,"title":{},"body":{"components/PostsComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["triggered",{"_index":1228,"title":{},"body":{"components/PostsComponent.html":{}}}],["true",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"injectables/authGuardService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":1434,"title":{},"body":{"injectables/SessionService.html":{}}}],["tslib",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1085,"title":{},"body":{"injectables/PostService.html":{},"components/PostsComponent.html":{}}}],["type",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Comment.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"interfaces/Post.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{},"injectables/unAuthGuardService.html":{},"miscellaneous/variables.html":{}}}],["typedef",{"_index":658,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["types",{"_index":1457,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["ui",{"_index":1282,"title":{},"body":{"components/PostsComponent.html":{}}}],["unauthenticated",{"_index":166,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["unauthguardservice",{"_index":149,"title":{"injectables/unAuthGuardService.html":{}},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"injectables/unAuthGuardService.html":{}}}],["undefined",{"_index":566,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["unsubscribe",{"_index":559,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"injectables/UserService.html":{}}}],["unsubscribes",{"_index":729,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["unsubscribetopic",{"_index":1540,"title":{},"body":{"injectables/UserService.html":{}}}],["unsubscribetopic(topicid",{"_index":1546,"title":{},"body":{"injectables/UserService.html":{}}}],["unsubscribing",{"_index":1218,"title":{},"body":{"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["up",{"_index":736,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["update",{"_index":801,"title":{},"body":{"components/MeComponent.html":{},"injectables/SessionService.html":{}}}],["updated",{"_index":1553,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser",{"_index":772,"title":{},"body":{"components/MeComponent.html":{}}}],["updates",{"_index":631,"title":{},"body":{"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"injectables/SessionService.html":{},"injectables/UserService.html":{}}}],["updateuser",{"_index":1400,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UserService.html":{}}}],["updateuser(modifieduser",{"_index":1411,"title":{},"body":{"injectables/SessionService.html":{}}}],["updateuser(user",{"_index":1550,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusertopicsubscriptions",{"_index":1401,"title":{},"body":{"injectables/SessionService.html":{}}}],["updateusertopicsubscriptions(modifieduser",{"_index":1415,"title":{},"body":{"injectables/SessionService.html":{}}}],["updating",{"_index":1233,"title":{},"body":{"components/PostsComponent.html":{},"injectables/UserService.html":{}}}],["uppercase",{"_index":1350,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["urltree",{"_index":1669,"title":{},"body":{"injectables/unAuthGuardService.html":{}}}],["usage",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["use",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["useclass",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ContentLayoutComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["user",{"_index":167,"title":{"interfaces/User.html":{}},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ErrorHandlerService.html":{},"interfaces/LoginResponse.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"coverage.html":{}}}],["user's",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/MeComponent.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":1170,"title":{},"body":{"injectables/PostService.html":{}}}],["user.subscribedtopicids.includes(topic.id",{"_index":1441,"title":{},"body":{"injectables/SessionService.html":{}}}],["user.username",{"_index":1169,"title":{},"body":{"injectables/PostService.html":{}}}],["userid",{"_index":269,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"injectables/PostService.html":{}}}],["username",{"_index":270,"title":{},"body":{"interfaces/Comment.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["username_validation_rule",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":1324,"title":{},"body":{"components/RegisterComponent.html":{}}}],["userservice",{"_index":723,"title":{"injectables/UserService.html":{}},"body":{"components/MeComponent.html":{},"injectables/SessionService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userservicesubscription",{"_index":782,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["usertopicsubscriptionids",{"_index":1502,"title":{},"body":{"components/TopicsComponent.html":{}}}],["using",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/FooterComponent.html":{},"components/RegisterComponent.html":{},"injectables/TopicService.html":{}}}],["utilities",{"_index":1310,"title":{},"body":{"components/PostsComponent.html":{}}}],["utility",{"_index":936,"title":{},"body":{"components/PostCommentComponent.html":{}}}],["valid",{"_index":1337,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["validation_messages",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validators",{"_index":581,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.email",{"_index":748,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.minlength(4",{"_index":747,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.minlength(8",{"_index":1362,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.pattern('^(?=.*[a",{"_index":1363,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.required",{"_index":576,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["value",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NewPostComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"injectables/authGuardService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":668,"title":{},"body":{"injectables/MatSidenavService.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{}}}],["var",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PostCommentComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["variable",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"components/FooterComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"coverage.html":{}}}],["variables",{"_index":1207,"title":{"miscellaneous/variables.html":{}},"body":{"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":388,"title":{},"body":{"interfaces/Environment.html":{},"injectables/ErrorHandlerService.html":{},"components/FooterComponent.html":{},"injectables/MatSidenavService.html":{},"modules/MaterialModule.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"injectables/SnackBarService.html":{},"properties.html":{}}}],["vertical",{"_index":293,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["vertically",{"_index":821,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["verticalposition",{"_index":1477,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["view",{"_index":347,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["viewchild",{"_index":367,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["viewchild('matsidenav",{"_index":362,"title":{},"body":{"components/ContentLayoutComponent.html":{}}}],["viewport",{"_index":664,"title":{},"body":{"injectables/MatSidenavService.html":{}}}],["void",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{},"components/ContentLayoutComponent.html":{},"injectables/ErrorHandlerService.html":{},"components/LoginComponent.html":{},"injectables/MatSidenavService.html":{},"components/MeComponent.html":{},"components/NavbarComponent.html":{},"components/NewPostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SessionService.html":{},"injectables/SnackBarService.html":{},"components/TopicsComponent.html":{}}}],["way",{"_index":1117,"title":{},"body":{"injectables/PostService.html":{}}}],["web",{"_index":25,"title":{},"body":{"components/AppComponent.html":{}}}],["weight",{"_index":813,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["welcome",{"_index":455,"title":{},"body":{"components/HomeComponent.html":{}}}],["whether",{"_index":365,"title":{},"body":{"components/ContentLayoutComponent.html":{},"injectables/MatSidenavService.html":{}}}],["width",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{},"components/PostCommentComponent.html":{},"components/PostsComponent.html":{}}}],["wildcard",{"_index":178,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["within",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"injectables/MatSidenavService.html":{}}}],["without",{"_index":1062,"title":{},"body":{"injectables/PostService.html":{}}}],["write",{"_index":862,"title":{},"body":{"components/NewPostComponent.html":{}}}],["year",{"_index":441,"title":{},"body":{"components/FooterComponent.html":{}}}],["z0",{"_index":1368,"title":{},"body":{"components/RegisterComponent.html":{}}}],["z])(?=.*[0",{"_index":1365,"title":{},"body":{"components/RegisterComponent.html":{}}}],["z])(?=.*[a",{"_index":1364,"title":{},"body":{"components/RegisterComponent.html":{}}}],["za",{"_index":1367,"title":{},"body":{"components/RegisterComponent.html":{}}}],["zero",{"_index":1092,"title":{},"body":{"injectables/PostService.html":{}}}],["zone.js",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n\n    \n\n\n    \n                \n                    ./app.component.scss\n                \n                //This pseudo-class selector is used within web components to apply styles to the host element\n// that contains the component.\n:host {\n  inset: 0 0 0 0;\n  height: 100%;\n  width: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nHomeComponent\n\nHomeComponent\n\nAppModule -->\n\nHomeComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nNgOptimizedImage\n\nNgOptimizedImage\n\nAppModule -->\n\nNgOptimizedImage->AppModule\n\n\n\n\n\nJwtInterceptor\n\nJwtInterceptor\n\nAppModule -->\n\nJwtInterceptor->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            HomeComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            JwtInterceptor\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                        \n                            NgOptimizedImage\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {ErrorHandler, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {HomeComponent} from './pages/home/home.component';\nimport {MaterialModule} from \"./shared/material.modules\";\nimport {NgOptimizedImage} from \"@angular/common\";\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport {JwtInterceptor} from \"./core/interceptors/jwt.interceptor\";\nimport {ErrorHandlerService} from \"./core/services/error-handler.service\";\n\n@NgModule({\n  declarations: [AppComponent, HomeComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    NgOptimizedImage,\n    HttpClientModule\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: JwtInterceptor,\n    multi: true\n  },\n    {\n      provide: ErrorHandler,\n      useClass: ErrorHandlerService\n    }\n  ],\n  bootstrap: [AppComponent],\n})\n/**\n * The AppModule class is a module that defines the main components, imports, and providers for the application. It is the root module of the application.\n *\n * @NgModule decorator is used to define the metadata for the module. The metadata includes the declarations, imports, providers, and bootstrap components.\n *\n * The AppModule provides the following functionality:\n * - Declares the AppComponent and HomeComponent as components to be used in the application.\n * - Imports the BrowserModule, AppRoutingModule, BrowserAnimationsModule, MaterialModule, and NgOptimizedImage modules.\n * - Does not provide any additional services or providers.\n * - Sets the AppComponent as the bootstrap component for the application.\n */\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {HomeComponent} from './pages/home/home.component';\nimport {RegisterComponent} from \"./features/auth/pages/register/register.component\";\nimport {PageNotFoundComponent} from \"./core/components/page-not-found/page-not-found.component\";\nimport {ContentLayoutComponent} from \"./layout/content-layout/content-layout.component\";\nimport {MeComponent} from \"./features/auth/pages/me/me.component\";\nimport {LoginComponent} from \"./features/auth/pages/login/login.component\";\nimport {authGuardService} from \"./core/guards/auth.guard\";\nimport {unAuthGuardService} from \"./core/guards/unauth.guard\";\nimport {TopicsComponent} from \"./features/topics/pages/topics/topics.component\";\nimport {PostsComponent} from \"./features/posts/pages/posts/posts.component\";\nimport {NewPostComponent} from \"./features/posts/pages/new-post/new-post.component\";\nimport {PostDetailsComponent} from \"./features/posts/pages/details/post-details.component\";\n\n// consider a guard combined with canLoad / canActivate route option\n// to manage unauthenticated user to access private routes\nconst routes: Routes = [\n  {path: '', component: HomeComponent, canActivate: [unAuthGuardService]},\n  {path: 'register', component: RegisterComponent, canActivate: [unAuthGuardService]},\n  {path: 'login', component: LoginComponent, canActivate: [unAuthGuardService]},\n  {\n    path: '',\n    component: ContentLayoutComponent,\n    canActivate: [authGuardService],\n    children: [\n      {path: 'me', component: MeComponent},\n      {path: 'topics', component: TopicsComponent},\n      {path: 'posts', component: PostsComponent},\n      {path: 'posts/new', component: NewPostComponent},\n      { path: 'posts/:id', component: PostDetailsComponent },\n      {path: '**', component: PageNotFoundComponent}\n    ]\n  },\n  {\n    path: '**', // wildcard\n    component: PageNotFoundComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/auth/services/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an authentication service that provides methods for user login and registration.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                serviceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/auth/services/authentication.service.ts:26\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe HTTP client instance to use for making HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginRequest: LoginRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/authentication.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Logs in a user using the provided login request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginRequest\n                                            \n                                                            LoginRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe login request containing the user's credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \nAn Observable that resolves to a LoginResponse object representing the login result.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerRequest: RegisterRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/authentication.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Registers a user with the server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerRequest\n                                            \n                                                            RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe registration details of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable that emits void.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        serviceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : environment.apiUrl + '/auth'\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/authentication.service.ts:26\n                        \n                    \n\n            \n                \n                    The serviceUrl variable is a string that represents the API url for authentication.\nIt is derived by concatenating the environment.serviceUrl with the '/auth' path.\nExample :// Usage\nconsole.log(serviceUrl); // \"http://example.com/api/auth\"\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {environment} from \"../../../../environments/environment\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {LoginRequest} from \"../../../core/interfaces/auth/login.request\";\nimport {Observable} from \"rxjs\";\nimport {LoginResponse} from \"../../../core/interfaces/auth/login.response\";\nimport {RegisterRequest} from \"../../../core/interfaces/auth/register.request\";\n\n/**\n * Represents an authentication service that provides methods for user login and registration.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  /**\n   * The serviceUrl variable is a string that represents the API url for authentication.\n   * It is derived by concatenating the environment.serviceUrl with the '/auth' path.\n   *\n   * @type {string}\n   * @example\n   * // Usage\n   * console.log(serviceUrl); // \"http://example.com/api/auth\"\n   */\n  private readonly serviceUrl: string = environment.apiUrl + '/auth';\n\n  /**\n   * Constructs a new instance of the class.\n   * @param {HttpClient} http - The HTTP client instance to use for making HTTP requests.\n   */\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * Logs in a user using the provided login request.\n   *\n   * @param {LoginRequest} loginRequest - The login request containing the user's credentials.\n   *\n   * @return {Observable} - An Observable that resolves to a LoginResponse object representing the login result.\n   */\n  public login(loginRequest: LoginRequest): Observable {\n    return this.http.post(`${this.serviceUrl}/login`, loginRequest);\n  }\n\n  /**\n   * Registers a user with the server.\n   *\n   * @param {RegisterRequest} registerRequest - The registration details of the user.\n   * @return {Observable} Observable that emits void.\n   */\n  public register(registerRequest: RegisterRequest): Observable {\n    return this.http.post(`${this.serviceUrl}/register`, registerRequest);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comment.html":{"url":"interfaces/Comment.html","title":"interface - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/posts/interfaces/comment.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            created_at\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            postId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        created_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Comment {\n  id: number;\n  content: string;\n  userId: number;\n  username: string;\n  postId: number;\n  created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/configuration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                errorSnackBarDuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                errorSnackBarHorizontalPosition\n                            \n                            \n                                    Private\n                                    Readonly\n                                errorSnackBarVerticalPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getErrorSnackBarDuration\n                            \n                            \n                                getErrorSnackBarHorizontalPosition\n                            \n                            \n                                getErrorSnackBarVerticalPosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/configuration.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getErrorSnackBarDuration\n                        \n                    \n                \n            \n            \n                \ngetErrorSnackBarDuration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/configuration.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the duration of the error snackbar.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The duration of the error snackbar in milliseconds.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getErrorSnackBarHorizontalPosition\n                        \n                    \n                \n            \n            \n                \ngetErrorSnackBarHorizontalPosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/configuration.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves the horizontal position of the error snackbar.\n\n\n                        \n                            Returns :     MatSnackBarHorizontalPosition\n\n                        \n                            \n                                The horizontal position of the error snackbar.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getErrorSnackBarVerticalPosition\n                        \n                    \n                \n            \n            \n                \ngetErrorSnackBarVerticalPosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/configuration.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Get the vertical position of the error snackbar.\n\n\n                        \n                            Returns :     MatSnackBarVerticalPosition\n\n                        \n                            \n                                The vertical position of the error snackbar.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        errorSnackBarDuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5000\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/configuration.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        errorSnackBarHorizontalPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatSnackBarHorizontalPosition\n\n                    \n                \n                \n                    \n                        Default value : 'center'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/configuration.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        errorSnackBarVerticalPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatSnackBarVerticalPosition\n\n                    \n                \n                \n                    \n                        Default value : 'bottom'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/configuration.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition} from \"@angular/material/snack-bar\";\nimport {environment} from \"../../../environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n\n  private readonly errorSnackBarDuration: number = 5000;\n  private readonly errorSnackBarHorizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  private readonly errorSnackBarVerticalPosition: MatSnackBarVerticalPosition = 'bottom';\n\n\n  constructor() {\n    if (environment.errorSnackBarDuration != null) {\n      this.errorSnackBarDuration = environment.errorSnackBarDuration;\n    }\n    if (environment.errorSnackBarHorizontalPosition != null) {\n      this.errorSnackBarHorizontalPosition = environment.errorSnackBarHorizontalPosition;\n    }\n    if (environment.errorSnackBarVerticalPosition != null) {\n      this.errorSnackBarVerticalPosition = environment.errorSnackBarVerticalPosition;\n    }\n  }\n\n  /**\n   * Retrieves the duration of the error snackbar.\n   *\n   * @returns {number} The duration of the error snackbar in milliseconds.\n   */\n  getErrorSnackBarDuration(): number {\n    return this.errorSnackBarDuration;\n  }\n\n  /**\n   * Retrieves the horizontal position of the error snackbar.\n   *\n   * @returns {string} The horizontal position of the error snackbar.\n   */\n  getErrorSnackBarHorizontalPosition(): MatSnackBarHorizontalPosition {\n    return this.errorSnackBarHorizontalPosition;\n  }\n\n  /**\n   * Get the vertical position of the error snackbar.\n   *\n   * @returns {string} The vertical position of the error snackbar.\n   */\n  getErrorSnackBarVerticalPosition(): MatSnackBarVerticalPosition {\n    return this.errorSnackBarVerticalPosition;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContentLayoutComponent.html":{"url":"components/ContentLayoutComponent.html","title":"component - ContentLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContentLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/layout/content-layout/content-layout.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-content-layout\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatSidenavContent\n                            RouterOutlet\n                                FooterComponent\n                            MatIcon\n                            RouterLink\n                            RouterLinkActive\n                            RouterOutlet\n                            NgClass\n                            MatSidenav\n                            MatSidenavContainer\n                                NavbarComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./content-layout.component.html\n            \n\n\n\n            \n                styleUrl\n                ./content-layout.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                applicationTitle\n                            \n                            \n                                    \n                                matSidenav\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeMatSidenav\n                            \n                            \n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isMatSidenavOpened\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(matSidenavService: MatSidenavService)\n                    \n                \n                        \n                            \n                                Defined in src/app/layout/content-layout/content-layout.component.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for creating an instance of the class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        matSidenavService\n                                                  \n                                                        \n                                                                        MatSidenavService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected service for managing the Material sidenav.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeMatSidenav\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeMatSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/layout/content-layout/content-layout.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Closes the Material Sidenav.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/layout/content-layout/content-layout.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Performs initialization tasks after the component's view has been fully initialized.\nThis method is called after ngAfterContentInit and ngAfterContentChecked.\nIt should be used for any initialization logic that relies on the component's view being fully rendered.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                This method does not return any value.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        applicationTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Default value : \"MDD\"\n                    \n                \n                    \n                        \n                                Defined in src/app/layout/content-layout/content-layout.component.ts:38\n                        \n                    \n\n            \n                \n                    This variable represents the title of the application.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        matSidenav\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatSidenav\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('matsidenav')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/layout/content-layout/content-layout.component.ts:43\n                        \n                    \n\n            \n                \n                    Represents an instance of MatSidenav.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isMatSidenavOpened\n                    \n                \n\n                \n                    \n                        getisMatSidenavOpened()\n                    \n                \n                            \n                                \n                                    Defined in src/app/layout/content-layout/content-layout.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns whether the Material Sidenav is opened or not.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {AfterViewInit, Component, ViewChild} from \"@angular/core\";\nimport {NavbarComponent} from \"../navbar/navbar.component\";\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from \"@angular/material/sidenav\";\nimport {RouterLink, RouterLinkActive, RouterOutlet} from \"@angular/router\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {FooterComponent} from \"../footer/footer.component\";\nimport {NgClass} from \"@angular/common\";\nimport {MatSidenavService} from \"../../core/services/mat-sidenav.service\";\n\n\n@Component({\n  selector: 'app-content-layout',\n  standalone: true,\n  imports: [\n    MatSidenavContent,\n    RouterOutlet,\n    FooterComponent,\n    MatIcon,\n    RouterLink,\n    RouterLinkActive,\n    RouterOutlet,\n    NgClass,\n    MatSidenav,\n    MatSidenavContainer,\n    NavbarComponent\n\n\n  ],\n  templateUrl: './content-layout.component.html',\n  styleUrl: './content-layout.component.scss'\n})\nexport class ContentLayoutComponent implements AfterViewInit {\n  /**\n   * This variable represents the title of the application.\n   *\n   * @type {string}\n   */\n  applicationTitle: String = \"MDD\";\n\n  /**\n   * Represents an instance of MatSidenav.\n   */\n  @ViewChild('matsidenav') matSidenav!: MatSidenav;\n\n  /**\n   * Constructor for creating an instance of the class.\n   *\n   * @param {MatSidenavService} matSidenavService - The injected service for managing the Material sidenav.\n   */\n  constructor(private matSidenavService: MatSidenavService) {\n  }\n\n  /**\n   * Performs initialization tasks after the component's view has been fully initialized.\n   * This method is called after ngAfterContentInit and ngAfterContentChecked.\n   * It should be used for any initialization logic that relies on the component's view being fully rendered.\n   *\n   * @return {void} This method does not return any value.\n   */\n  ngAfterViewInit(): void {\n    this.matSidenavService.setMatSidenav(this.matSidenav);\n  }\n\n  /**\n   * Returns whether the Material Sidenav is opened or not.\n   *\n   * @return {boolean} - true if the Material Sidenav is opened, false otherwise.\n   */\n  get isMatSidenavOpened() {\n    return this.matSidenavService.isMatSidenavOpened();\n  }\n\n  /**\n   * Closes the Material Sidenav.\n   *\n   * @return {void}\n   */\n  public closeMatSidenav(): void {\n    this.matSidenavService.closeMatSidenav();\n  }\n\n}\n\n    \n\n    \n        \n  \n\n\n  \n    \n      Posts\n      Topics\n      \n        \n          \n          \n        \n      \n    \n  \n\n  \n    \n  \n\n\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Posts      Topics                                                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContentLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Environment.html":{"url":"interfaces/Environment.html","title":"interface - Environment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Environment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/environment.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the environment configuration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiUrl\n                                        \n                                \n                                \n                                        \n                                            errorSnackBarDuration\n                                        \n                                \n                                \n                                        \n                                            errorSnackBarHorizontalPosition\n                                        \n                                \n                                \n                                        \n                                            errorSnackBarVerticalPosition\n                                        \n                                \n                                \n                                        \n                                            production\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorSnackBarDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorSnackBarDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorSnackBarHorizontalPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorSnackBarHorizontalPosition:     MatSnackBarHorizontalPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MatSnackBarHorizontalPosition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorSnackBarVerticalPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorSnackBarVerticalPosition:     MatSnackBarVerticalPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MatSnackBarVerticalPosition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        production:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition} from \"@angular/material/snack-bar\";\n\n/**\n * Interface representing the environment configuration.\n *\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport interface Environment {\n  production: boolean;\n  apiUrl: string;\n  errorSnackBarDuration: number;\n  errorSnackBarHorizontalPosition: MatSnackBarHorizontalPosition;\n  errorSnackBarVerticalPosition: MatSnackBarVerticalPosition;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorHandlerService.html":{"url":"injectables/ErrorHandlerService.html","title":"injectable - ErrorHandlerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorHandlerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/error-handler.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ErrorHandlerService class handles error management and displaying error messages.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                AN_ERROR_HAS_OCCURRED\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleError\n                            \n                            \n                                    Private\n                                logStackTrace\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(snackBarService: SnackBarService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/error-handler.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        snackBarService\n                                                  \n                                                        \n                                                                        SnackBarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleError\n                        \n                    \n                \n            \n            \n                \nhandleError(error: Error | HttpErrorResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/error-handler.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Handles the given error and displays an appropriate message to the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        Error | HttpErrorResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object to handle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logStackTrace\n                        \n                    \n                \n            \n            \n                \n                        \n                    logStackTrace(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/error-handler.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Logs the stack trace of the given error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object for which to log the stack trace.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        AN_ERROR_HAS_OCCURRED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"An error has occurred\"\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/error-handler.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {SnackBarService} from \"./snack-bar.service\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {APP_CONSTANTS} from \"../../shared/constants\";\n\n/**\n * ErrorHandlerService class handles error management and displaying error messages.\n *\n * @author Pierre-Olivier Pignon\n * @version 1.0\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerService {\n\n  private readonly AN_ERROR_HAS_OCCURRED: string = \"An error has occurred\";\n\n  constructor(private snackBarService: SnackBarService) {\n  }\n\n  /**\n   * Handles the given error and displays an appropriate message to the user.\n   *\n   * @param {Error|HttpErrorResponse} error - The error object to handle.\n   *\n   * @return {void}\n   */\n  handleError(error: Error | HttpErrorResponse): void {\n    let message: string;\n    if (error instanceof HttpErrorResponse) {\n      if (error.status === 401) {\n        message = APP_CONSTANTS.ERROR_MESSAGES.MUST_BE_AUTHENTICATED;\n        this.logStackTrace(error);\n      } else {\n        message = this.AN_ERROR_HAS_OCCURRED + ' : ' + error.error.error;\n        this.logStackTrace(error);\n      }\n    } else {\n      message = this.AN_ERROR_HAS_OCCURRED + ' : ' + error.message;\n      this.logStackTrace(error);\n    }\n    this.snackBarService.openSnackBar(message);\n  }\n\n  /**\n   * Logs the stack trace of the given error.\n   *\n   * @param {any} error - The error object for which to log the stack trace.\n   * @private\n   * @return {void}\n   */\n  private logStackTrace(error: any): void {\n    console.error('An error occurred:', error.message);\n    console.error('Stack trace:', error.stack);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/layout/footer/footer.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the footer component of the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentYear\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentYear\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : new Date().getUTCFullYear()\n                    \n                \n                    \n                        \n                                Defined in src/app/layout/footer/footer.component.ts:30\n                        \n                    \n\n            \n                \n                    Represents the current year.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component} from '@angular/core';\n\n/**\n * Represents the footer component of the application.\n *\n * @component\n * @selector app-footer\n * @templateUrl ./footer.component.html\n * @styleUrls ./footer.component.scss\n */\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\n/**\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport class FooterComponent {\n  /**\n   * Represents the current year.\n   *\n   * @type {number}\n   * @description This variable stores the current year obtained using the \"getUTCFullYear()\" method from the JavaScript Date object.\n   */\n  currentYear: number = new Date().getUTCFullYear();\n}\n\n    \n\n    \n        \n  \n  \n    \n      &copy; {{ currentYear }}\n      POP's Code Lab\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              © {{ currentYear }}      POP\\'s Code Lab      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomeComponent.html":{"url":"components/HomeComponent.html","title":"component - HomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/home.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-home\n            \n\n\n\n            \n                styleUrls\n                ./home.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./home.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent {\n\n}\n\n    \n\n    \n        \n  \n  Welcome to M D D\n  \n    Login\n    Register\n  \n\n\n    \n\n    \n                \n                    ./home.component.scss\n                \n                .container {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\nmat-card-actions {\n  gap: 2rem;\n  display: flex;\n}\n\nimg {\n  width: 550px;\n  height: 318px;\n}\n\n@media (width \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Welcome to M D D      Login    Register  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/JwtInterceptor.html":{"url":"interceptors/JwtInterceptor.html","title":"interceptor - JwtInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  JwtInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interceptors/jwt.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Intercepts HTTP requests and adds authorization token to the request headers.\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addAuthorizationHeader\n                            \n                            \n                                    Public\n                                intercept\n                            \n                            \n                                    Private\n                                isExcludedRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addAuthorizationHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAuthorizationHeader(request: HttpRequest, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/interceptors/jwt.interceptor.ts:53\n                        \n                    \n\n\n            \n                \n                        Adds authorization header to the request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object to add the header to.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe token to be added as the Authorization value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpRequest\n\n                        \n                            \n                                \nThe request object with the added authorization header.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                        \n                    intercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/interceptors/jwt.interceptor.ts:19\n                        \n                    \n\n\n            \n                \n                        Intercepts an HTTP request and adds authorization header if a token exists in local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HTTP request to intercept.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe handler for the intercepted request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \nAn Observable that represents the next event in the HTTP stream.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isExcludedRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExcludedRequest(request: HttpRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/interceptors/jwt.interceptor.ts:40\n                        \n                    \n\n\n            \n                \n                        Checks if the given request is excluded based on the URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request to be checked.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the request is excluded, false otherwise.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {HttpErrorResponse, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {throwError} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\n\n/**\n * Intercepts HTTP requests and adds authorization token to the request headers.\n */\n@Injectable({providedIn: 'root'})\nexport class JwtInterceptor implements HttpInterceptor {\n\n\n  /**\n   * Intercepts an HTTP request and adds authorization header if a token exists in local storage.\n   *\n   * @param {HttpRequest} request - The HTTP request to intercept.\n   * @param {HttpHandler} next - The handler for the intercepted request.\n   * @return {Observable>} - An Observable that represents the next event in the HTTP stream.\n   */\n  public intercept(request: HttpRequest, next: HttpHandler) {\n    console.log(\"JwtInterceptor - intercept method called\");\n    if (this.isExcludedRequest(request)) {\n      return next.handle(request);\n    }\n    const token: string | null = localStorage.getItem('token');\n    if (token) {\n      request = this.addAuthorizationHeader(request, token);\n      return next.handle(request);\n    } else {\n      return throwError(() => new HttpErrorResponse({status: 401, statusText: 'You must be authenticated'}));\n    }\n  }\n\n  /**\n   * Checks if the given request is excluded based on the URL.\n   *\n   * @param {HttpRequest} request - The request to be checked.\n   * @return {boolean} - Returns true if the request is excluded, false otherwise.\n   * @private\n   */\n  private isExcludedRequest(request: HttpRequest): boolean {\n    const excludedUrls: string[] = ['/login', '/register'];\n    return excludedUrls.some((url: string) => request.url.includes(url));\n  }\n\n  /**\n   * Adds authorization header to the request.\n   *\n   * @param {HttpRequest} request - The request object to add the header to.\n   * @param {string} token - The token to be added as the Authorization value.\n   * @returns {HttpRequest} - The request object with the added authorization header.\n   * @private\n   */\n  private addAuthorizationHeader(request: HttpRequest, token: string): HttpRequest {\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/auth/pages/login/login.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            RouterLink\n                            ReactiveFormsModule\n                            FormsModule\n                            NgIf\n                            MatIcon\n                            MatLabel\n                            MatFormField\n                            MatError\n                            MatInput\n                            MatButton\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authServiceSubscription\n                            \n                            \n                                controlNames\n                            \n                            \n                                    Private\n                                    Readonly\n                                EMAIL_OR_USERNAME\n                            \n                            \n                                formControls\n                            \n                            \n                                formValidationMessages\n                            \n                            \n                                labels\n                            \n                            \n                                loginErrorMessage\n                            \n                            \n                                    Private\n                                    Readonly\n                                PASSWORD\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onBlur\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService, sessionService: SessionService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/auth/pages/login/login.component.ts:63\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/login/login.component.ts:84\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/login/login.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Performs cleanup tasks before the component is destroyed.\nUnsubscribe to the subscribed services\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBlur\n                        \n                    \n                \n            \n            \n                \nonBlur(controlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/login/login.component.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/login/login.component.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        controlNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    emailOrUsername: this.EMAIL_OR_USERNAME,\n    password: this.PASSWORD,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        EMAIL_OR_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Email or username\"\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formControls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    emailOrUsername: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required]),\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formValidationMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    emailOrUsername: '',\n    password: '',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    emailOrUsername: this.EMAIL_OR_USERNAME,\n    password: this.PASSWORD,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginErrorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Password\"\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/login/login.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy} from '@angular/core';\nimport {NgClass, NgIf} from \"@angular/common\";\nimport {FormControl, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {Router, RouterLink} from \"@angular/router\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {MatError, MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {MatButton} from \"@angular/material/button\";\nimport {LoginRequest} from \"../../../../core/interfaces/auth/login.request\";\nimport {AuthenticationService} from \"../../services/authentication.service\";\nimport {SessionService} from \"../../services/session.service\";\nimport {LoginResponse} from \"../../../../core/interfaces/auth/login.response\";\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    NgClass,\n    RouterLink,\n    ReactiveFormsModule,\n    FormsModule,\n    NgIf,\n    MatIcon,\n    MatLabel,\n    MatFormField,\n    MatError,\n    MatInput,\n    MatButton\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n})\nexport class LoginComponent implements OnDestroy {\n\n  private readonly EMAIL_OR_USERNAME: string = \"Email or username\";\n  private readonly PASSWORD: string = \"Password\";\n\n  // AuthenticationService subscription\n  private authServiceSubscription: Subscription | undefined;\n\n  // Object that contains form control objects.\n  formControls: { [key: string]: FormControl } = {\n    emailOrUsername: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required]),\n  };\n\n  labels: { [key: string]: string } = {\n    emailOrUsername: this.EMAIL_OR_USERNAME,\n    password: this.PASSWORD,\n  };\n\n  controlNames: { [key: string]: string } = {\n    emailOrUsername: this.EMAIL_OR_USERNAME,\n    password: this.PASSWORD,\n  };\n\n  formValidationMessages: { [key: string]: string } = {\n    emailOrUsername: '',\n    password: '',\n  };\n\n  loginErrorMessage: string | null = null;\n\n  constructor(private authenticationService: AuthenticationService,\n              private sessionService: SessionService,\n              private router: Router) {\n  }\n\n  onBlur(controlName: string): void {\n    const control: FormControl = this.formControls[controlName];\n    control.markAsTouched();\n    this.formValidationMessages[controlName] = control.hasError('required') ?\n      `Please enter ${this.controlNames[controlName].toLowerCase()} ` : '';\n  }\n\n  onSubmit(): void {\n    if (this.formControls['emailOrUsername'].valid && this.formControls['password'].valid) {\n      this.login();\n    }\n  }\n\n\n  login(): void {\n    let emailOrUsername: string = this.formControls['emailOrUsername'].value;\n    let password: string = this.formControls['password'].value;\n\n    console.info(`login : ${emailOrUsername} - ${password}`);\n\n    const loginRequest: LoginRequest = {\n      emailOrUsername: emailOrUsername,\n      password: password,\n    };\n    this.authServiceSubscription = this.authenticationService.login(loginRequest)\n      .subscribe({\n        next: (data: LoginResponse) => {\n          this.sessionService.login(data.token);\n          this.router.navigate(['/posts']).then(\n            () => {\n            }\n          );\n        },\n        error: error => {\n          throw error;\n        }\n      });\n  }\n\n\n  /**\n   * Performs cleanup tasks before the component is destroyed.\n   * Unsubscribe to the subscribed services\n   * @returns {void}\n   */\n  ngOnDestroy(): void {\n    if (this.authServiceSubscription) {\n      this.authServiceSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n\n  \n    Login\n\n    \n      {{ labels['emailOrUsername'] }}\n      \n      {{ formValidationMessages['emailOrUsername'] }}\n      \n    \n\n    \n      {{ labels['password'] }}\n      \n      {{ formValidationMessages['password'] }}\n      \n    \n    Login\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Login          {{ labels[\\'emailOrUsername\\'] }}            {{ formValidationMessages[\\'emailOrUsername\\'] }}                    {{ labels[\\'password\\'] }}            {{ formValidationMessages[\\'password\\'] }}              Login      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginRequest.html":{"url":"interfaces/LoginRequest.html","title":"interface - LoginRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/auth/login.request.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a login request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            emailOrUsername\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emailOrUsername\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailOrUsername:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginRequest {\n  emailOrUsername: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/auth/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response of a login request which is the user token.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginResponse {\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MatSidenavService.html":{"url":"injectables/MatSidenavService.html","title":"injectable - MatSidenavService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MatSidenavService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/mat-sidenav.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isOpened\n                            \n                            \n                                    Private\n                                matSidenav\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeMatSidenav\n                            \n                            \n                                    Public\n                                isMatSidenavOpened\n                            \n                            \n                                    Public\n                                setMatSidenav\n                            \n                            \n                                    Public\n                                toggleMatSidenav\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeMatSidenav\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeMatSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/mat-sidenav.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Closes the Material Sidenav and updates the isOpened flag accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isMatSidenavOpened\n                        \n                    \n                \n            \n            \n                \n                        \n                    isMatSidenavOpened()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/mat-sidenav.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if the sidenav is opened.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the sidenav is opened, otherwise false.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setMatSidenav\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMatSidenav(matSidenav: MatSidenav)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/mat-sidenav.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Sets the reference to the Material Sidenav.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                matSidenav\n                                            \n                                                        MatSidenav\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Material Sidenav instance to be set.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toggleMatSidenav\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleMatSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/mat-sidenav.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Toggles the state of the Material Sidenav.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nA promise that resolves when the toggling is completed.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isOpened\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/mat-sidenav.service.ts:45\n                        \n                    \n\n            \n                \n                    Indicate whether the sidenav state is open or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        matSidenav\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatSidenav\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/mat-sidenav.service.ts:39\n                        \n                    \n\n            \n                \n                    Represents a Material side navigation component.\nExample :matSidenav.opened = true;\nmatSidenav.fixedInViewport = true;\nmatSidenav.mode = 'over';\nmatSidenav.disableClose = false;matSidenav.openedChange.subscribe(isOpened => {\n   console.log(Side navigation opened: ${isOpened});\n});\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {MatSidenav} from \"@angular/material/sidenav\";\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * A service for managing a Material side navigation component.\n *\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport class MatSidenavService {\n\n  /**\n   * Represents a Material side navigation component.\n   * @typedef {Object} MatSidenav\n   * @property {boolean} opened - Indicates whether the side navigation is currently open.\n   * @property {boolean} fixedInViewport - Indicates whether the side navigation is fixed within the viewport.\n   * @property {boolean} mode - Specifies the mode of the side navigation. Possible values are 'over', 'push', 'side'.\n   * @property {boolean} disableClose - Indicates whether the side navigation can be closed by the user.\n   * @property {boolean} openedChange - Event emitted when the opened state of the side navigation changes.\n   * @property {boolean} openedStart - Event emitted when the side navigation starts opening.\n   * @property {boolean} openedEnd - Event emitted when the side navigation finishes opening.\n   * @property {boolean} closedStart - Event emitted when the side navigation starts closing.\n   * @property {boolean} closedEnd - Event emitted when the side navigation finishes closing.\n   *\n   * @example\n   * matSidenav.opened = true;\n   * matSidenav.fixedInViewport = true;\n   * matSidenav.mode = 'over';\n   * matSidenav.disableClose = false;\n   *\n   * matSidenav.openedChange.subscribe(isOpened => {\n   *    console.log(`Side navigation opened: ${isOpened}`);\n   * });\n   */\n  private matSidenav!: MatSidenav;\n\n  /**\n   * Indicate whether the sidenav state is open or not.\n   * @type {boolean}\n   */\n  private isOpened: boolean = false;\n\n  /**\n   * Sets the reference to the Material Sidenav.\n   *\n   * @param {MatSidenav} matSidenav - The Material Sidenav instance to be set.\n   */\n  public setMatSidenav(matSidenav: MatSidenav): void {\n    this.matSidenav = matSidenav;\n  }\n\n  /**\n   * Checks if the sidenav is opened.\n   *\n   * @return {boolean} - Returns true if the sidenav is opened, otherwise false.\n   */\n  public isMatSidenavOpened(): boolean {\n    return this.isOpened;\n  }\n\n  /**\n   * Toggles the state of the Material Sidenav.\n   *\n   * @return {Promise} - A promise that resolves when the toggling is completed.\n   */\n  public toggleMatSidenav(): void {\n    this.matSidenav.toggle().then(() => {\n      this.isOpened = this.matSidenav.opened;\n    });\n  }\n\n  /**\n   * Closes the Material Sidenav and updates the isOpened flag accordingly.\n   * @return {void}\n   */\n  public closeMatSidenav(): void {\n    this.matSidenav.close().then(() => {\n      this.isOpened = this.matSidenav.opened;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MaterialModule\n\n\n\ncluster_MaterialModule_imports\n\n\n\ncluster_MaterialModule_exports\n\n\n\n\nMatFormField\n\nMatFormField\n\n\n\nMaterialModule\n\nMaterialModule\n\nMaterialModule -->\n\nMatFormField->MaterialModule\n\n\n\n\n\nMatIcon\n\nMatIcon\n\nMaterialModule -->\n\nMatIcon->MaterialModule\n\n\n\n\n\nMatInput\n\nMatInput\n\nMaterialModule -->\n\nMatInput->MaterialModule\n\n\n\n\n\nMatToolbar\n\nMatToolbar\n\nMaterialModule -->\n\nMatToolbar->MaterialModule\n\n\n\n\n\nMatFormField \n\nMatFormField \n\nMatFormField  -->\n\nMaterialModule->MatFormField \n\n\n\n\n\nMatIcon \n\nMatIcon \n\nMatIcon  -->\n\nMaterialModule->MatIcon \n\n\n\n\n\nMatInput \n\nMatInput \n\nMatInput  -->\n\nMaterialModule->MatInput \n\n\n\n\n\nMatToolbar \n\nMatToolbar \n\nMatToolbar  -->\n\nMaterialModule->MatToolbar \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/material.modules.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            MatFormField\n                        \n                        \n                            MatIcon\n                        \n                        \n                            MatInput\n                        \n                        \n                            MatToolbar\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MatFormField\n                        \n                        \n                            MatIcon\n                        \n                        \n                            MatInput\n                        \n                        \n                            MatToolbar\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from '@angular/core';\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatIcon, MatIconModule} from \"@angular/material/icon\";\nimport {MatFormField, MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MatToolbar} from \"@angular/material/toolbar\";\n\n\n@NgModule({\n  imports: [\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatIcon,\n    MatFormField,\n    MatInput,\n    MatFormFieldModule,\n    MatSidenavModule,\n    MatToolbar\n  ],\n  exports: [\n    MatCardModule,\n    MatIconModule,\n    MatButtonModule,\n    MatIcon,\n    MatFormField,\n    MatInput,\n    MatFormFieldModule,\n    MatSidenavModule,\n    MatToolbar\n  ]\n})\n/**\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport class MaterialModule {\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MeComponent.html":{"url":"components/MeComponent.html","title":"component - MeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/auth/pages/me/me.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-me\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatError\n                            MatLabel\n                            MatFormField\n                            MatInput\n                            FormsModule\n                            ReactiveFormsModule\n                            MatButton\n                            NgIf\n                            MatDivider\n                            MatCardActions\n                            MatCardContent\n                            MatCardTitle\n                            MatCardHeader\n                            MatCard\n                            TitleCasePipe\n                \n            \n\n            \n                styleUrls\n                ./me.component.scss,../../../../shared/styles/topic-card-styles.css\n            \n\n\n\n            \n                templateUrl\n                ./me.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                controlNames\n                            \n                            \n                                errorMessages\n                            \n                            \n                                formControls\n                            \n                            \n                                labels\n                            \n                            \n                                loggedUser\n                            \n                            \n                                subscribedTopics\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isFormValid\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBlur\n                            \n                            \n                                onLogoutClick\n                            \n                            \n                                onSubmit\n                            \n                            \n                                onUnsubscribeClick\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService, userService: UserService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/auth/pages/me/me.component.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFormValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFormValid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:95\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:161\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when a component is destroyed.\nThis method unsubscribes from any active subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:132\n                        \n                    \n\n\n            \n                \n                        Initializes the component and sets up subscriptions for user and topics.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBlur\n                        \n                    \n                \n            \n            \n                \nonBlur(controlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLogoutClick\n                        \n                    \n                \n            \n            \n                \nonLogoutClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:124\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onUnsubscribeClick\n                        \n                    \n                \n            \n            \n                \nonUnsubscribeClick(topicId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/me/me.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        controlNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: APP_CONSTANTS.VALIDATION_MESSAGES.USERNAME_VALIDATION_RULE,\n    email: APP_CONSTANTS.VALIDATION_MESSAGES.EMAIL_VALIDATION_RULE\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: '',\n    email: '',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formControls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: new FormControl('', [\n      Validators.required,\n      Validators.minLength(4)]),\n    email: new FormControl('', [\n      Validators.email,\n      Validators.required]),\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: 'Username',\n    email: 'Email',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscribedTopics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Topic[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/me/me.component.ts:45\n                        \n                    \n\n            \n                \n                    Represents a collection of subscriptions.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatError, MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {FormControl, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {APP_CONSTANTS} from \"../../../../shared/constants\";\nimport {MatButton} from \"@angular/material/button\";\nimport {NgIf, TitleCasePipe} from \"@angular/common\";\nimport {Subscription} from \"rxjs\";\nimport {User} from \"../../interfaces/User\";\nimport {Router} from \"@angular/router\";\nimport {SessionService} from \"../../services/session.service\";\nimport {UserService} from \"../../services/api/user.service\";\nimport {MatDivider} from \"@angular/material/divider\";\nimport {Topic} from \"../../../topics/interfaces/topic\";\nimport {MatCard, MatCardActions, MatCardContent, MatCardHeader, MatCardTitle} from \"@angular/material/card\";\n\n@Component({\n  selector: 'app-me',\n  standalone: true,\n  imports: [\n    MatError,\n    MatLabel,\n    MatFormField,\n    MatInput,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButton,\n    NgIf,\n    MatDivider,\n    MatCardActions,\n    MatCardContent,\n    MatCardTitle,\n    MatCardHeader,\n    MatCard,\n    TitleCasePipe\n  ],\n  templateUrl: './me.component.html',\n  styleUrls: ['./me.component.scss', '../../../../shared/styles/topic-card-styles.css']\n})\nexport class MeComponent implements OnInit, OnDestroy {\n\n  /**\n   * Represents a collection of subscriptions.\n   */\n  private subscriptions: Subscription[] = [];\n\n  loggedUser: User | null =\n    null;\n  subscribedTopics: Topic[] = [];\n\n  formControls: { [key: string]: FormControl } = {\n    username: new FormControl('', [\n      Validators.required,\n      Validators.minLength(4)]),\n    email: new FormControl('', [\n      Validators.email,\n      Validators.required]),\n  };\n\n  controlNames: { [key: string]: string } = {\n    username: APP_CONSTANTS.VALIDATION_MESSAGES.USERNAME_VALIDATION_RULE,\n    email: APP_CONSTANTS.VALIDATION_MESSAGES.EMAIL_VALIDATION_RULE\n  };\n\n  labels: { [key: string]: string } = {\n    username: 'Username',\n    email: 'Email',\n  };\n\n  errorMessages: { [key: string]: string } = {\n    username: '',\n    email: '',\n  };\n\n  constructor(private sessionService: SessionService,\n              private userService: UserService,\n              private router: Router) {\n  }\n\n  onUnsubscribeClick(topicId: number): void {\n    this.userService.unsubscribeTopic(topicId).subscribe(\n      (user: User) => {\n        this.sessionService.updateUser(user);\n      }\n    );\n  }\n\n  onBlur(controlName: string): void {\n    const control: FormControl = this.formControls[controlName];\n    control.markAsTouched();\n    this.errorMessages[controlName] = control.hasError('required') ? APP_CONSTANTS.ERROR_MESSAGES.PLEASE_ENTER\n      + `${this.controlNames[controlName]}` : '';\n  }\n\n  private isFormValid(): boolean {\n    return this.formControls[\"username\"].valid && this.formControls['email'].valid;\n  }\n\n\n  onSubmit() {\n    if (this.isFormValid()) {\n      if (this.loggedUser && this.loggedUser.id !== undefined) {\n        if (this.loggedUser.id !== null) {\n          const updatedUser: User = {\n            id: this.loggedUser.id,\n            username: this.formControls['username'].value,\n            email: this.formControls['email'].value,\n            password: this.loggedUser.password,\n            subscribedTopicIds: this.loggedUser.subscribedTopicIds\n          };\n          this.userService.updateUser(updatedUser).subscribe((user: User) => {\n            this.sessionService.updateUser(user);\n          });\n        } else {\n          this.sessionService.logout();\n        }\n      } else {\n        this.sessionService.logout();\n      }\n    }\n  }\n\n\n  onLogoutClick(): void {\n    this.sessionService.logout();\n    this.router.navigate(['/login'])\n  }\n\n  /**\n   * Initializes the component and sets up subscriptions for user and topics.\n   */\n  ngOnInit(): void {\n    /**\n     * Represents the user's subscription information.\n     */\n    let userServiceSubscription: Subscription = this.sessionService.sessionUser$.subscribe((user: User | null) => {\n      this.loggedUser = user;\n      if (this.loggedUser) {\n        console.log('Logged-in user : ', this.loggedUser);\n        this.formControls['username'].setValue(this.loggedUser.username);\n        this.formControls['email'].setValue(this.loggedUser.email);\n      } else {\n        this.formControls['username'].setValue('');\n        this.formControls['email'].setValue('');\n      }\n    });\n    this.subscriptions.push(userServiceSubscription);\n    /**\n     * Represents a user's topics subscription.\n     */\n    let topicServiceSubscription: Subscription = this.sessionService.topicSubscriptions$.subscribe((topics: Topic[]) => {\n      this.subscribedTopics = topics;\n    });\n    this.subscriptions.push(topicServiceSubscription);\n  }\n\n  /**\n   * Lifecycle hook that is called when a component is destroyed.\n   * This method unsubscribes from any active subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n}\n\n    \n\n    \n        \n    \n      My account\n      \n        {{ labels['username'] }}\n        \n        {{ errorMessages['username'] }}\n        \n      \n\n      \n        {{ labels['email'] }}\n        \n        {{ errorMessages['email'] }}\n        \n      \n\n      Update\n      \n      \n        Logout\n      \n    \n\n    \n    User topic subscriptions\n    \n    \n    \n      @for (topic of subscribedTopics; track topic.id) {\n        \n          \n            {{ topic.title | titlecase }}\n          \n          \n            {{ topic.description }}\n          \n          \n            \n              Unsubscribe\n            \n          \n        \n      }\n    \n\n\n    \n\n    \n                \n                    ./me.component.scss\n                \n                \n\n                \n                    ../../../../shared/styles/topic-card-styles.css\n                \n                mat-card-title {\n  font-size: clamp(1rem, 1.75vw, 1.5rem);\n  font-weight: bold;\n}\n\nmat-card-content {\n  font-size: clamp(0.75rem, 1.5vw, 1.25rem);\n}\n\n.topic-card-button {\n  font-size: clamp(0.75rem, 1.5vw, 1.25rem);\n}\n\nmat-card-actions {\n  display: flex;\n  justify-content: center; /* Centers the button horizontally */\n  align-items: center; /* Centers the button vertically if the container has a height */\n}\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          My account              {{ labels[\\'username\\'] }}                {{ errorMessages[\\'username\\'] }}                            {{ labels[\\'email\\'] }}                {{ errorMessages[\\'email\\'] }}                    Update                    Logout                  User topic subscriptions                  @for (topic of subscribedTopics; track topic.id) {                              {{ topic.title | titlecase }}                                {{ topic.description }}                                              Unsubscribe                                    }    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/layout/navbar/navbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatToolbar\n                            MatIcon\n                            MatIconButton\n                            RouterLink\n                            RouterLinkActive\n                            NgOptimizedImage\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toggleMatSidenav\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(matSidenavService: MatSidenavService)\n                    \n                \n                        \n                            \n                                Defined in src/app/layout/navbar/navbar.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        matSidenavService\n                                                  \n                                                        \n                                                                        MatSidenavService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toggleMatSidenav\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleMatSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/layout/navbar/navbar.component.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import {Component} from '@angular/core';\nimport {MatToolbar} from \"@angular/material/toolbar\";\nimport {MatSidenavService} from \"../../core/services/mat-sidenav.service\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {MatIconButton} from \"@angular/material/button\";\nimport {RouterLink, RouterLinkActive} from \"@angular/router\";\nimport {NgOptimizedImage} from \"@angular/common\";\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [\n    MatToolbar,\n    MatIcon,\n    MatIconButton,\n    RouterLink,\n    RouterLinkActive,\n    NgOptimizedImage\n  ],\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss'\n})\n/**\n * NavbarComponent is a component that represents the navigation bar of the application.\n * It provides a toggle function to control the Material Sidenav.\n *\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport class NavbarComponent {\n\n  constructor(private matSidenavService: MatSidenavService) {\n  }\n\n  public toggleMatSidenav(): void {\n    this.matSidenavService.toggleMatSidenav();\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n    \n      Posts\n      Topics\n      \n        \n          \n          \n        \n      \n    \n    \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          Posts      Topics                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewPostComponent.html":{"url":"components/NewPostComponent.html","title":"component - NewPostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NewPostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/posts/pages/new-post/new-post.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-post\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            FormsModule\n                            NgIf\n                            NgForOf\n                            MatError\n                            MatOption\n                            MatSelect\n                            MatLabel\n                            MatFormField\n                            MatInput\n                            MatButton\n                            MatIcon\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./new-post.component.html\n            \n\n\n\n            \n                styleUrl\n                ./new-post.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                controlNames\n                            \n                            \n                                errorMessages\n                            \n                            \n                                formControls\n                            \n                            \n                                labels\n                            \n                            \n                                    Private\n                                postServiceSubscription\n                            \n                            \n                                topics\n                            \n                            \n                                    Private\n                                topicServiceSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isFieldInvalid\n                            \n                            \n                                isFormInvalid\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBlur\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(topicService: TopicService, postService: PostService, snackBarService: SnackBarService)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:68\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBarService\n                                                  \n                                                        \n                                                                        SnackBarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isFieldInvalid\n                        \n                    \n                \n            \n            \n                \nisFieldInvalid(fieldName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/new-post/new-post.component.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fieldName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFormInvalid\n                        \n                    \n                \n            \n            \n                \nisFormInvalid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/new-post/new-post.component.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/new-post/new-post.component.ts:124\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/new-post/new-post.component.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBlur\n                        \n                    \n                \n            \n            \n                \nonBlur(controlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/new-post/new-post.component.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/new-post/new-post.component.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        controlNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    topic: 'topic',\n    title: 'title',\n    content: 'content'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    topic: '',\n    title: '',\n    content: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formControls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    topic: new FormControl('', [Validators.required]),\n    title: new FormControl('', [Validators.required]),\n    content: new FormControl('', [Validators.required])\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    topic: 'Choose a topic',\n    title: 'Title',\n    content: 'Write here'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        postServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Topic[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        topicServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/new-post/new-post.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {Topic} from \"../../../topics/interfaces/topic\";\nimport {APP_CONSTANTS} from \"../../../../shared/constants\";\nimport {TopicService} from \"../../../topics/services/topic.service\";\nimport {PostService} from \"../../services/post.service\";\nimport {SnackBarService} from \"../../../../core/services/snack-bar.service\";\nimport {Post} from \"../../interfaces/post\";\nimport {NgForOf, NgIf} from \"@angular/common\";\nimport {MatError, MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatOption} from \"@angular/material/autocomplete\";\nimport {MatSelect} from \"@angular/material/select\";\nimport {MatInput} from \"@angular/material/input\";\nimport {MatButton} from \"@angular/material/button\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {RouterLink} from \"@angular/router\";\n\n@Component({\n  selector: 'app-new-post',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    FormsModule,\n    NgIf,\n    NgForOf,\n    MatError,\n    MatOption,\n    MatSelect,\n    MatLabel,\n    MatFormField,\n    MatInput,\n    MatButton,\n    MatIcon,\n    RouterLink\n  ],\n  templateUrl: './new-post.component.html',\n  styleUrl: './new-post.component.scss'\n})\nexport class NewPostComponent implements OnInit, OnDestroy {\n  private postServiceSubscription: Subscription | null = null;\n  private topicServiceSubscription: Subscription | null = null;\n\n  topics: Topic[] = [];\n\n  formControls: { [key: string]: FormControl } = {\n    topic: new FormControl('', [Validators.required]),\n    title: new FormControl('', [Validators.required]),\n    content: new FormControl('', [Validators.required])\n  };\n\n  controlNames: { [key: string]: string } = {\n    topic: 'topic',\n    title: 'title',\n    content: 'content'\n  };\n\n  labels: { [key: string]: string } = {\n    topic: 'Choose a topic',\n    title: 'Title',\n    content: 'Write here'\n  };\n\n  errorMessages: { [key: string]: string } = {\n    topic: '',\n    title: '',\n    content: ''\n  };\n\n  constructor(private topicService: TopicService,\n              private postService: PostService,\n              private snackBarService: SnackBarService) {\n  }\n\n\n  onSubmit(): void {\n    if (this.formControls['topic'].valid && this.formControls['title'].valid && this.formControls['content'].valid) {\n      const newPost: Pick = {\n        topicId: this.formControls['topic'].value,\n        title: this.formControls['title'].value,\n        content: this.formControls['content'].value\n      };\n\n      this.postServiceSubscription = this.postService.createPost(newPost).subscribe({\n        next: () => {\n          this.snackBarService.openSnackBar('Post has been created', 'Close');\n          Object.values(this.formControls).forEach((control: FormControl) => {\n            control.reset();\n            control.setErrors(null);\n          });\n        },\n        error: error => {\n          throw error;\n        }\n      });\n    }\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    return this.formControls[fieldName].invalid && this.formControls[fieldName].touched;\n  }\n\n  isFormInvalid(): boolean {\n    return this.formControls['topic'].invalid || this.formControls['title'].invalid || this.formControls['content'].invalid;\n  }\n\n  onBlur(controlName: string): void {\n    const control: FormControl = this.formControls[controlName];\n    control.markAsTouched();\n    if (controlName != 'topic') {\n      this.errorMessages[controlName] = control.hasError('required') ? APP_CONSTANTS.ERROR_MESSAGES.PLEASE_ENTER\n        + `${this.controlNames[controlName]}` : '';\n    } else {\n      this.errorMessages[controlName] = control.hasError('required') ? `Please, choose a ${this.controlNames[controlName]}` : '';\n    }\n  }\n\n  ngOnInit(): void {\n    this.topicServiceSubscription = this.topicService.getAllTopics().subscribe((topics: Topic[]) => {\n      this.topics = topics;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.postServiceSubscription) {\n      this.postServiceSubscription.unsubscribe();\n    }\n    if (this.topicServiceSubscription) {\n      this.topicServiceSubscription.unsubscribe();\n    }\n  }\n\n\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    Write a new post\n    \n      {{ labels['topic'] }}\n      \n        {{ topic.title }}\n      \n      {{ errorMessages['topic'] }}\n    \n    \n      {{ labels['title'] }}\n      \n      {{ errorMessages['title'] }}\n    \n    \n      {{ labels['content'] }}\n      \n      {{ errorMessages['content'] }}\n    \n    Create\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Write a new post          {{ labels[\\'topic\\'] }}              {{ topic.title }}            {{ errorMessages[\\'topic\\'] }}              {{ labels[\\'title\\'] }}            {{ errorMessages[\\'title\\'] }}              {{ labels[\\'content\\'] }}            {{ errorMessages[\\'content\\'] }}        Create  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewPostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageNotFoundComponent.html":{"url":"components/PageNotFoundComponent.html","title":"component - PageNotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PageNotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/page-not-found/page-not-found.component.ts\n\n\n\n    \n        Description\n    \n    \n        The PageNotFoundComponent class represents the component used for displaying the \"Not Found\" page.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-not-found\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            RouterLink\n                            MatTooltip\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./page-not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./page-not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {Component} from '@angular/core';\nimport {MatButton} from \"@angular/material/button\";\nimport {RouterLink} from \"@angular/router\";\nimport {MatTooltip} from \"@angular/material/tooltip\";\n\n/**\n * The PageNotFoundComponent class represents the component used for displaying the \"Not Found\" page.\n *\n * @class\n * @constructor\n *\n */\n@Component({\n  selector: 'app-page-not-found',\n  standalone: true,\n  imports: [\n    MatButton,\n    RouterLink,\n    MatTooltip\n  ],\n  templateUrl: './page-not-found.component.html',\n  styleUrl: './page-not-found.component.scss'\n})\nexport class PageNotFoundComponent {\n\n}\n\n    \n\n    \n        \n  No corresponding page found !\n  \n    Back\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  No corresponding page found !      Back  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageNotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Post.html":{"url":"interfaces/Post.html","title":"interface - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/posts/interfaces/post.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            commentIds\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            created_at\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            topicId\n                                        \n                                \n                                \n                                        \n                                            topicTitle\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        commentIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commentIds:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        created_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topicId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topicId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topicTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topicTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Post {\n  id: number;\n  title: string;\n  content: string;\n  userId: number;\n  username: string;\n  topicId: number;\n  topicTitle: string;\n  commentIds: number[];\n  created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostCommentComponent.html":{"url":"components/PostCommentComponent.html","title":"component - PostCommentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostCommentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/post-comment/post-comment.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-post-comment\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            DatePipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./post-comment.component.html\n            \n\n\n\n            \n                styleUrl\n                ./post-comment.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isLargeScreen$\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(breakpointObserver: BreakpointObserver)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/components/post-comment/post-comment.component.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the PostCommentComponent class.\nThe BreakpointObserver is a utility for checking if the current device's screen size matches against\nsome CSS media queries\ndevice's current breakpoint.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        breakpointObserver\n                                                  \n                                                        \n                                                                    BreakpointObserver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe breakpointObserver parameter used for determining the\ndevice's current breakpoint.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        comment\n                    \n                \n                \n                    \n                        Type :         Comment\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/components/post-comment/post-comment.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isLargeScreen$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : this.breakpointObserver.isMatched('(min-width: 600px)')\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/post-comment/post-comment.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\nimport {Comment} from \"../../../features/posts/interfaces/comment\";\nimport {BreakpointObserver} from \"@angular/cdk/layout\";\nimport {DatePipe, NgClass} from \"@angular/common\";\n\n@Component({\n  selector: 'app-post-comment',\n  standalone: true,\n  imports: [\n    NgClass,\n    DatePipe\n  ],\n  templateUrl: './post-comment.component.html',\n  styleUrl: './post-comment.component.scss'\n})\nexport class PostCommentComponent {\n  @Input() comment! : Comment\n\n  isLargeScreen$: boolean = this.breakpointObserver.isMatched('(min-width: 600px)');\n\n  /**\n   * Constructs a new instance of the PostCommentComponent class.\n   *\n   * The BreakpointObserver is a utility for checking if the current device's screen size matches against\n   * some CSS media queries\n   *\n   * @param {BreakpointObserver} breakpointObserver - The breakpointObserver parameter used for determining the\n   * device's current breakpoint.\n   */\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n\n    \n\n    \n        \n\n  {{ comment.content }}\n  \n    {{ comment.username }}\n    {{ comment.created_at | date:'mediumDate' }}\n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ comment.content }}      {{ comment.username }}    {{ comment.created_at | date:\\'mediumDate\\' }}  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostCommentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostDetailsComponent.html":{"url":"components/PostDetailsComponent.html","title":"component - PostDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/posts/pages/details/post-details.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-details\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                            MatIcon\n                            MatLabel\n                            MatError\n                            DatePipe\n                            NgIf\n                            MatDivider\n                            FormsModule\n                            NgClass\n                            MatFormField\n                            ReactiveFormsModule\n                            MatInput\n                            NgForOf\n                            MatCard\n                            MatCardContent\n                            MatCardHeader\n                            MatCardSubtitle\n                            MatCardTitle\n                            TitleCasePipe\n                                PostCommentComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./post-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./post-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                controlNames\n                            \n                            \n                                errorMessages\n                            \n                            \n                                formControls\n                            \n                            \n                                labels\n                            \n                            \n                                post\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrorMessageForControl\n                            \n                            \n                                    Private\n                                initializeGetCommentsSubscription\n                            \n                            \n                                    Private\n                                initializeGetPostCommentsSubscription\n                            \n                            \n                                    Private\n                                initializePostServiceSubscription\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddCommentClick\n                            \n                            \n                                onBlur\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, postService: PostService)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessageForControl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessageForControl(control: FormControl, controlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        FormControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeGetCommentsSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeGetCommentsSubscription(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeGetPostCommentsSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeGetPostCommentsSubscription()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializePostServiceSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializePostServiceSubscription(params: Params)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        Params\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:132\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:101\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddCommentClick\n                        \n                    \n                \n            \n            \n                \nonAddCommentClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBlur\n                        \n                    \n                \n            \n            \n                \nonBlur(controlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/details/post-details.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        controlNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    content: 'content'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    content: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formControls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    content: new FormControl('', [Validators.required])\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    content: 'Add a comment...'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/details/post-details.component.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Post} from \"../../interfaces/post\";\nimport {Comment} from \"../../interfaces/comment\";\nimport {FormControl, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {ActivatedRoute, Params, RouterLink} from \"@angular/router\";\nimport {PostService} from \"../../services/post.service\";\nimport {Subscription} from \"rxjs\";\nimport {APP_CONSTANTS} from \"../../../../shared/constants\";\nimport {MatIcon} from \"@angular/material/icon\";\nimport {DatePipe, NgClass, NgForOf, NgIf, TitleCasePipe} from \"@angular/common\";\nimport {MatDivider} from \"@angular/material/divider\";\nimport {MatError, MatFormField, MatLabel} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {MatCard, MatCardContent, MatCardHeader, MatCardSubtitle, MatCardTitle} from \"@angular/material/card\";\nimport {PostCommentComponent} from \"../../../../core/components/post-comment/post-comment.component\";\n\n@Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [\n    RouterLink,\n    MatIcon,\n    MatLabel,\n    MatError,\n    DatePipe,\n    NgIf,\n    MatDivider,\n    FormsModule,\n    NgClass,\n    MatFormField,\n    ReactiveFormsModule,\n    MatInput,\n    NgForOf,\n    MatCard,\n    MatCardContent,\n    MatCardHeader,\n    MatCardSubtitle,\n    MatCardTitle,\n    TitleCasePipe,\n    PostCommentComponent\n  ],\n  templateUrl: './post-details.component.html',\n  styleUrl: './post-details.component.scss'\n})\nexport class PostDetailsComponent implements OnInit, OnDestroy {\n\n  private subscriptions: Subscription[] = [];\n\n  post: Post | undefined;\n  comments: Comment[] = [];\n  formControls: { [key: string]: FormControl } = {\n    content: new FormControl('', [Validators.required])\n  };\n\n  labels: { [key: string]: string } = {\n    content: 'Add a comment...'\n  };\n\n  controlNames: { [key: string]: string } = {\n    content: 'content'\n  };\n\n  errorMessages: { [key: string]: string } = {\n    content: ''\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private postService: PostService,\n  ) {\n  }\n\n  private initializeGetPostCommentsSubscription(): void {\n    let getPostCommentsSubscription: Subscription = this.route.params.subscribe(params => {\n      this.initializePostServiceSubscription(params);\n    });\n    this.subscriptions.push(getPostCommentsSubscription);\n  }\n\n  private initializePostServiceSubscription(params: Params): void {\n    const id: number = +params['id'];\n    let postServiceSubscription: Subscription = this.postService.getPostById(id).subscribe((post: Post) => {\n      this.post = post;\n      this.initializeGetCommentsSubscription(id);\n    });\n    this.subscriptions.push(postServiceSubscription);\n  }\n\n  private initializeGetCommentsSubscription(id: number): void {\n    this.postService.getComments(id).subscribe((comments: Comment[]) => {\n      this.comments = comments;\n    });\n  }\n\n  private getErrorMessageForControl(control: FormControl, controlName: string): string {\n    // Extract method: encapsulates the logic of generating error message\n    return control.hasError('required') ? `${APP_CONSTANTS.ERROR_MESSAGES.PLEASE_ENTER} ${this.controlNames[controlName]}` : '';\n  }\n\n\n  ngOnInit(): void {\n    this.initializeGetPostCommentsSubscription();\n  }\n\n  onBlur(controlName: string): void {\n    const control: FormControl = this.formControls[controlName];\n    control.markAsTouched();\n    this.errorMessages[controlName] = this.getErrorMessageForControl(control, controlName);\n  }\n\n  onAddCommentClick() {\n    if (this.formControls['content'].valid && this.post?.id) {\n      const newComment: Pick = {\n        content: this.formControls['content'].value,\n        postId: this.post.id,\n      };\n\n      let addCommentSubscription: Subscription = this.postService.addComment(newComment).subscribe({\n        next: (newComment: Comment) => {\n          this.comments.push(newComment);\n          this.formControls['content'].reset();\n          this.formControls['content'].setErrors(null);\n        },\n        error: error => {\n          throw error;\n        }\n      });\n      this.subscriptions.push(addCommentSubscription);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n}\n\n    \n\n    \n        \n  \n\n\n  \n    \n      {{ post.title | titlecase }}\n      \n        {{ post.created_at | date:'mediumDate' }}\n         by {{ post.username }}\n      \n    \n    \n      {{ post.content }}\n    \n  \n\n\n\nComments\n\n  \n\n\n\n  \n    \n      {{ labels['content'] }}\n\n      \n\n      {{ errorMessages['content'] }}\n      \n    \n    \n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              {{ post.title | titlecase }}              {{ post.created_at | date:\\'mediumDate\\' }}         by {{ post.username }}                    {{ post.content }}      Comments              {{ labels[\\'content\\'] }}            {{ errorMessages[\\'content\\'] }}                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/posts/services/post.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a service that provides methods to interact with posts.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _posts\n                            \n                            \n                                    Private\n                                apiUrl\n                            \n                            \n                                    Public\n                                posts$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                    Private\n                                applySortDirection\n                            \n                            \n                                createPost\n                            \n                            \n                                    Private\n                                createPostFromInput\n                            \n                            \n                                    Private\n                                filterPostsByTopicIds\n                            \n                            \n                                    Public\n                                getAllTopicPosts\n                            \n                            \n                                getComments\n                            \n                            \n                                getPostById\n                            \n                            \n                                    Private\n                                getSortFunctionBy\n                            \n                            \n                                    Private\n                                sortByDate\n                            \n                            \n                                    Private\n                                sortByTitle\n                            \n                            \n                                sortPostsBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/posts/services/post.service.ts:38\n                            \n                        \n\n                \n                    \n                            Constructor for initializing an instance of the class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe HttpClient instance to be used for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe SessionService instance for managing user sessions.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(comment: Pick)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                comment\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applySortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    applySortDirection(sortOrder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:174\n                        \n                    \n\n\n            \n                \n                        Applies the specified sort direction to the posts array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortOrder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sort direction to apply. Can be either 'asc' or 'desc'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(post: Pick)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:187\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                post\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe post object containing the title, content, and topicId.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits the created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createPostFromInput\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPostFromInput(inputPost: Pick, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Creates a new post object based on the inputPost and user data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                inputPost\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input post object containing title, content, and topic ID.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user object representing the creator of the post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Omit\n\n                        \n                            \n                                The newly created post object without ID, topic title, and comment IDs.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterPostsByTopicIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterPostsByTopicIds(posts: Post[], topicsIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Filters an array of posts by comparing their topic IDs with the given topic IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                posts\n                                            \n                                                            Post[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of posts to be filtered.\n\n\n                                            \n                                        \n                                        \n                                                topicsIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of topic IDs to filter the posts by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllTopicPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTopicPosts(topicsIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Retrieve all posts related to the specified topic IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                topicsIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of topic IDs to retrieve posts for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \nAn Observable that emits an array of Post objects.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getComments\n                        \n                    \n                \n            \n            \n                \ngetComments(postId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Retrieves a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \nAn Observable that emits the retrieved Post object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSortFunctionBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSortFunctionBy(sortField: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:156\n                        \n                    \n\n\n            \n                \n                        Returns a sorting function based on the provided sort field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe field to sort by. Possible values are 'date' and 'title'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nA sorting function that takes two Post objects as arguments and returns a number representing the order.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortByDate(a: Post, b: Post)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Sorts an array of Posts by date.\nExample :              zero if they are the same date,\n              or a positive number if `a` is later than `b`.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                a\n                                            \n                                                            Post\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe first Post object to compare.\n\n\n                                            \n                                        \n                                        \n                                                b\n                                            \n                                                            Post\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe second Post object to compare.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nA negative number if a is earlier than b,\n zero if they are the same date,\n or a positive number if a is later than b.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortByTitle\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortByTitle(a: Post, b: Post)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Sorts an array of Post objects by their title in descending order.\nExample :                a positive number if `a` is alphabetically after `b` based on their title,\n                or zero if their titles are identical or cannot be compared.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                a\n                                            \n                                                            Post\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe first Post object to compare.\n\n\n                                            \n                                        \n                                        \n                                                b\n                                            \n                                                            Post\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe second Post object to compare.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nA negative number if a is alphabetically before b based on their title,\na positive number if a is alphabetically after b based on their title,\nor zero if their titles are identical or cannot be compared.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortPostsBy\n                        \n                    \n                \n            \n            \n                \nsortPostsBy(sortField: string, sortOrder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/services/post.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Sorts the posts array by the given sortField and sortOrder.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortField\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe field to sort by.\n\n\n                                            \n                                        \n                                        \n                                                sortOrder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'desc'\n                                            \n\n                                            \n                                                    \nThe sort direction.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/services/post.service.ts:29\n                        \n                    \n\n            \n                \n                    Represents a BehaviorSubject variable for posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : environment.apiUrl + '/posts'\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/services/post.service.ts:25\n                        \n                    \n\n            \n                \n                    The URL for the API endpoint to get posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this._posts.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/services/post.service.ts:38\n                        \n                    \n\n            \n                \n                    Represents the observable variable 'posts$', which emits an array of Post objects.\nThis variable is used to obtain an observable that emits an array of Post objects. It is an\ninstance of the Observable class and provides a convenient way to retrieve the current value\nas an array of Post objects, or subscribe to future updates.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {BehaviorSubject, mergeMap, Observable, of, switchMap, take, tap} from \"rxjs\";\nimport {environment} from \"../../../../environments/environment\";\nimport {Post} from \"../interfaces/post\";\nimport {Comment} from \"../interfaces/comment\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {SessionService} from \"../../auth/services/session.service\";\nimport {Topic} from \"../../topics/interfaces/topic\";\nimport {APP_CONSTANTS} from \"../../../shared/constants\";\nimport {User} from \"../../auth/interfaces/User\";\n\n/**\n * Represents a service that provides methods to interact with posts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  /**\n   * The URL for the API endpoint to get posts.\n   *\n   * @type {string}\n   */\n  private apiUrl: string = environment.apiUrl + '/posts';\n  /**\n   * Represents a BehaviorSubject variable for posts.\n   */\n  private _posts: BehaviorSubject = new BehaviorSubject([]);\n  /**\n   * Represents the observable variable 'posts$', which emits an array of Post objects.\n\n   * @description\n   * This variable is used to obtain an observable that emits an array of Post objects. It is an\n   * instance of the Observable class and provides a convenient way to retrieve the current value\n   * as an array of Post objects, or subscribe to future updates.\n   */\n  public posts$: Observable = this._posts.asObservable();\n\n  /**\n   * Constructor for initializing an instance of the class.\n   *\n   * @param {HttpClient} httpClient - The HttpClient instance to be used for making HTTP requests.\n   * @param {SessionService} sessionService - The SessionService instance for managing user sessions.\n   */\n  constructor(private httpClient: HttpClient,\n              private sessionService: SessionService) {\n    this.sessionService.topicSubscriptions$.pipe(\n      mergeMap((topics: Topic[]) => {\n        const topicsIds: number[] = topics.map((topic: Topic) => topic.id);\n        return this.getAllTopicPosts(topicsIds);\n      })\n    ).subscribe();\n  }\n\n  /**\n   * Retrieve all posts related to the specified topic IDs.\n   *\n   * @param {number[]} topicsIds - An array of topic IDs to retrieve posts for.\n   * @return {Observable} - An Observable that emits an array of Post objects.\n   */\n  public getAllTopicPosts(topicsIds: number[]): Observable {\n    return this.httpClient.get(this.apiUrl).pipe(\n      tap((posts: Post[]) => {\n        this.filterPostsByTopicIds(posts, topicsIds);\n      })\n    );\n  }\n\n  /**\n   * Retrieves a post by its ID.\n   *\n   * @param {number} id - The ID of the post to retrieve.\n   * @returns {Observable} - An Observable that emits the retrieved Post object.\n   */\n  getPostById(id: number): Observable {\n    return of(this._posts.value.find((post: Post) => post.id === id)).pipe(\n      switchMap((post: Post | undefined) => {\n          return post\n            ? of(post)\n            : this.httpClient.get(`${this.apiUrl}/${id}`).pipe(\n              tap((fetchedPost: Post) => {\n                this._posts.next([...this._posts.value, fetchedPost]);\n              })\n            );\n        }\n      )\n    );\n  }\n\n  /**\n   * Filters an array of posts by comparing their topic IDs with the given topic IDs.\n   *\n   * @param {Post[]} posts - The array of posts to be filtered.\n   * @param {number[]} topicsIds - The array of topic IDs to filter the posts by.\n   *\n   * @private\n   */\n  private filterPostsByTopicIds(posts: Post[], topicsIds: number[]): void {\n    const filteredPosts: Post[] = posts.filter((post: Post) => topicsIds.includes(post.topicId));\n    this._posts.next(filteredPosts);\n  }\n\n  /**\n   * Sorts an array of Posts by date.\n   *\n   * @param {Post} a - The first Post object to compare.\n   * @param {Post} b - The second Post object to compare.\n   * @return {number} - A negative number if `a` is earlier than `b`,\n   *                   zero if they are the same date,\n   *                   or a positive number if `a` is later than `b`.\n   * @private\n   */\n  private sortByDate(a: Post, b: Post): number {\n    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n  }\n\n  /**\n   * Sorts an array of Post objects by their title in descending order.\n   *\n   * @param {Post} a - The first Post object to compare.\n   * @param {Post} b - The second Post object to compare.\n   * @returns {number} - A negative number if `a` is alphabetically before `b` based on their title,\n   *                     a positive number if `a` is alphabetically after `b` based on their title,\n   *                     or zero if their titles are identical or cannot be compared.\n   * @private\n   */\n  private sortByTitle(a: Post, b: Post): number {\n    return b.title.localeCompare(a.title);\n  }\n\n  /**\n   * Sorts the posts array by the given sortField and sortOrder.\n   *\n   * @param {string} sortField - The field to sort by.\n   * @param {string} [sortOrder='desc'] - The sort direction.\n   * @return {void}\n   */\n  sortPostsBy(sortField: string, sortOrder: string = 'desc'): void {\n    console.debug(`Sort by: ${sortField} - Direction: ${sortOrder}`);\n\n    if (!this._posts.value) return;\n\n    let sortFunction = this.getSortFunctionBy(sortField);\n    this._posts.value.sort(sortFunction);\n    this.applySortDirection(sortOrder);\n  }\n\n  /**\n   * Returns a sorting function based on the provided sort field.\n   *\n   * @param {string} sortField - The field to sort by. Possible values are 'date' and 'title'.\n   * @private\n   * @return {(a: Post, b: Post) => number} - A sorting function that takes two Post objects as arguments and returns a number representing the order.\n   */\n  private getSortFunctionBy(sortField: string): (a: Post, b: Post) => number {\n    switch (sortField) {\n      case 'date':\n        return this.sortByDate;\n      case 'title':\n        return this.sortByTitle;\n      default:\n        return this.sortByDate;\n    }\n  }\n\n  /**\n   * Applies the specified sort direction to the posts array.\n   *\n   * @param {string} sortOrder - The sort direction to apply. Can be either 'asc' or 'desc'.\n   * @private\n   * @return {void}\n   */\n  private applySortDirection(sortOrder: string): void {\n    if (sortOrder === 'asc') {\n      this._posts.value.reverse();\n    }\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * @param post - The post object containing the title, content, and topicId.\n   * @returns An Observable that emits the created post.\n   * @throws Error if the user is not authenticated.\n   */\n  createPost(post: Pick): Observable {\n    return this.sessionService.sessionUser$.pipe(\n      take(1),\n      switchMap(loggedUser => {\n        if (!loggedUser) {\n          throw new Error(APP_CONSTANTS.ERROR_MESSAGES.MUST_BE_AUTHENTICATED);\n        }\n        return this.httpClient.post(this.apiUrl, this.createPostFromInput(post, loggedUser));\n      })\n    );\n  }\n\n  /**\n   * Creates a new post object based on the inputPost and user data.\n   *\n   * @param {Pick} inputPost - The input post object containing title, content, and topic ID.\n   * @param {User} user - The user object representing the creator of the post.\n   * @returns {Omit} The newly created post object without ID, topic title, and comment IDs.\n   * @private\n   */\n  private createPostFromInput(inputPost: Pick, user: User): Omit {\n    return {\n      title: inputPost.title,\n      content: inputPost.content,\n      username: user.username,\n      userId: user.id,\n      topicId: inputPost.topicId,\n      created_at: new Date()\n    };\n  }\n\n  getComments(postId: number): Observable {\n    return this.httpClient.get(`${this.apiUrl}/${postId}/comments`);\n  }\n\n  addComment(comment: Pick): Observable {\n    return this.sessionService.sessionUser$.pipe(\n      take(1),\n      switchMap(currentUser => {\n        if (!currentUser) {\n          throw new Error(APP_CONSTANTS.ERROR_MESSAGES.MUST_BE_AUTHENTICATED);\n        }\n        const commentDto: Omit = {\n          content: comment.content,\n          userId: currentUser.id,\n          username: currentUser.username,\n          postId: comment.postId,\n          created_at: new Date(),\n        };\n        console.debug(currentUser.username + \" is adding a new comment to the post :  \" + comment.postId + \" : \" + commentDto.content)\n        return this.httpClient.post(`${this.apiUrl}/${comment.postId}/comments`, commentDto);\n      })\n    );\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostsComponent.html":{"url":"components/PostsComponent.html","title":"component - PostsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/posts/pages/posts/posts.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-posts\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            DatePipe\n                            RouterLink\n                            MatCard\n                            MatCardHeader\n                            MatCardContent\n                            MatCardTitle\n                            MatCardSubtitle\n                            TitleCasePipe\n                            MatDivider\n                            MatMenu\n                            MatMenuTrigger\n                            MatAnchor\n                            MatMenuItem\n                            MatIcon\n                            NgClass\n                            MatButton\n                            NgForOf\n                \n            \n\n            \n                styleUrls\n                ./posts.component.scss,../../../../shared/styles/topic-card-styles.css\n            \n\n\n\n            \n                templateUrl\n                ./posts.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ascendingOrder\n                            \n                            \n                                posts\n                            \n                            \n                                    Private\n                                postServiceSubscription\n                            \n                            \n                                sortBy\n                            \n                            \n                                sortDirection\n                            \n                            \n                                sortDirections\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getQueryParams\n                            \n                            \n                                    Private\n                                getTopicUserPosts\n                            \n                            \n                                    Public\n                                newPost\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSortClick\n                            \n                            \n                                    Private\n                                swapSortOrder\n                            \n                            \n                                    Private\n                                toggleSortDirection\n                            \n                            \n                                trackByPostId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, router: Router, postService: PostService, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe ActivatedRoute object that provides access to the current route information.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Router object used for navigation and URL manipulation.\n\n\n                                                        \n                                                \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe PostService object used for interacting with post-related data and functionality.\n\n\n                                                        \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe SessionService object used for managing user session data.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getQueryParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueryParams()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Retrieves the query parameters from the current route and assigns them to the corresponding class variables.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                This method does not return anything.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTopicUserPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTopicUserPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:81\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts related to the subscribed topics of the user.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        newPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    newPost()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:163\n                        \n                    \n\n\n            \n                \n                        Navigates to the '/posts/new' route.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:186\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is being destroyed.\nIt is recommended to perform any necessary cleanup operations here,\nsuch as unsubscribing from subscriptions or releasing resources.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\nThis method is called when the component is initialized. It calls two other methods to fetch query parameters and user posts related to a topic.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                Returns nothing.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSortClick\n                        \n                    \n                \n            \n            \n                \nonSortClick(sortBy: string, direction: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Handles the click event when sorting is triggered.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe field to sort by.\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction of the sort. This can be \"ascending\" or \"descending\".\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        swapSortOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    swapSortOrder(sortBy: string, direction: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Swaps the sort order by updating the query parameters in the URL and sorting the posts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe field to sort the posts by.\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction of the sorting (asc or desc).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toggleSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleSortDirection(currentDirection: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:133\n                        \n                    \n\n\n            \n                \n                        Toggles the sort direction based on the current direction.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currentDirection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current sort direction.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe toggled sort direction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByPostId\n                        \n                    \n                \n            \n            \n                \ntrackByPostId(index: number, post: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/posts/pages/posts/posts.component.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                post\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ascendingOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        postServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:45\n                        \n                    \n\n            \n                \n                    Represents the subscription for a PostService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : \"date\"\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortDirections\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    date: APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING,\n    title: APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/posts/pages/posts/posts.component.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {DatePipe, NgClass, NgForOf, TitleCasePipe} from \"@angular/common\";\nimport {ActivatedRoute, Router, RouterLink} from \"@angular/router\";\nimport {MatCard, MatCardContent, MatCardHeader, MatCardSubtitle, MatCardTitle} from \"@angular/material/card\";\nimport {Post} from \"../../interfaces/post\";\nimport {Subscription, switchMap} from \"rxjs\";\nimport {PostService} from \"../../services/post.service\";\nimport {SessionService} from \"../../../auth/services/session.service\";\nimport {APP_CONSTANTS} from \"../../../../shared/constants\";\nimport {Topic} from \"../../../topics/interfaces/topic\";\nimport {MatDivider} from \"@angular/material/divider\";\nimport {MatMenu, MatMenuItem, MatMenuTrigger} from \"@angular/material/menu\";\nimport {MatAnchor, MatButton} from \"@angular/material/button\";\nimport {MatIcon} from \"@angular/material/icon\";\n\n@Component({\n  selector: 'app-posts',\n  standalone: true,\n  imports: [\n    DatePipe,\n    RouterLink,\n    MatCard,\n    MatCardHeader,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    TitleCasePipe,\n    MatDivider,\n    MatMenu,\n    MatMenuTrigger,\n    MatAnchor,\n    MatMenuItem,\n    MatIcon,\n    NgClass,\n    MatButton,\n    NgForOf\n  ],\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.scss', '../../../../shared/styles/topic-card-styles.css']\n})\nexport class PostsComponent implements OnInit, OnDestroy {\n  /**\n   * Represents the subscription for a PostService.\n   */\n  private postServiceSubscription: Subscription | null = null;\n\n  sortBy: string | null = \"date\";\n  sortDirection: string | null = null;\n  sortDirections: { [key: string]: string } = {\n    date: APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING,\n    title: APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING,\n  };\n  ascendingOrder: boolean = true;\n  posts: Post[] = [];\n\n  /**\n   *\n   * @param {ActivatedRoute} route - The ActivatedRoute object that provides access to the current route information.\n   * @param {Router} router - The Router object used for navigation and URL manipulation.\n   * @param {PostService} postService - The PostService object used for interacting with post-related data and functionality.\n   * @param {SessionService} sessionService - The SessionService object used for managing user session data.\n   */\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private postService: PostService,\n    private sessionService: SessionService\n  ) {\n  }\n\n  trackByPostId(index: number, post: any): number {\n    return post.id;\n  }\n\n  /**\n   * Retrieves all posts related to the subscribed topics of the user.\n   *\n   * @private\n   * @returns {void}\n   */\n  private getTopicUserPosts(): void {\n    this.postServiceSubscription = this.sessionService.topicSubscriptions$.pipe(\n      switchMap((topics: Topic[]) => this.postService.getAllTopicPosts(topics.map((topic: Topic) => topic.id))),\n      switchMap(() => this.postService.posts$)\n    ).subscribe((posts: Post[]) => {\n      this.posts = posts;\n    });\n  }\n\n  /**\n   * Retrieves the query parameters from the current route and assigns them to the corresponding class variables.\n   *\n   * @private\n   * @return {void} This method does not return anything.\n   */\n  private getQueryParams(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params) {\n        if (params['sort']) {\n          this.sortBy = params['sort'];\n        }\n        this.sortDirection = params['direction'];\n        if (!this.sortBy || !this.sortDirection) {\n          this.swapSortOrder('date', 'desc');\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles the click event when sorting is triggered.\n   *\n   * @param {string} sortBy - The field to sort by.\n   * @param {string} direction - The direction of the sort. This can be \"ascending\" or \"descending\".\n   *\n   * @return {void}\n   */\n  onSortClick(sortBy: string, direction: string): void {\n    console.debug(\"onSortClick - sortBy : \" + sortBy + \" - direction : \" + direction);\n    console.table(this.sortDirections);\n    this.sortDirections[sortBy] = this.toggleSortDirection(direction);\n    this.swapSortOrder(sortBy, this.sortDirections[sortBy]);\n\n    this.ascendingOrder = this.sortDirections[sortBy] === APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING;\n  }\n\n  /**\n   * Toggles the sort direction based on the current direction.\n   *\n   * @param {string} currentDirection - The current sort direction.\n   * @returns {string} - The toggled sort direction.\n   */\n  private toggleSortDirection(currentDirection: string): string {\n    return currentDirection === APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING ? APP_CONSTANTS.SORT_DIRECTIONS.DESCENDING\n      : APP_CONSTANTS.SORT_DIRECTIONS.ASCENDING;\n  }\n\n  /**\n   * Swaps the sort order by updating the query parameters in the URL and sorting the posts.\n   *\n   * @param {string} sortBy - The field to sort the posts by.\n   * @param {string} direction - The direction of the sorting (asc or desc).\n   * @private\n   * @return {void}\n   */\n  private swapSortOrder(sortBy: string, direction: string): void {\n    console.debug(\"swapSortOrder : sortBy : \" + sortBy + \" - direction : \" + direction);\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {sort: sortBy, direction: direction},\n      queryParamsHandling: 'merge'\n    }).then(() => {\n      this.postService.sortPostsBy(sortBy, direction);\n      this.sortBy = sortBy;\n    });\n  }\n\n  /**\n   * Navigates to the '/posts/new' route.\n   *\n   * @return {void}\n   */\n  public newPost() {\n    this.router.navigate(['/posts/new']);\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * This method is called when the component is initialized. It calls two other methods to fetch query parameters and user posts related to a topic.\n   *\n   * @return {void} Returns nothing.\n   */\n  ngOnInit(): void {\n    this.getQueryParams();\n    this.getTopicUserPosts();\n  }\n\n  /**\n   * Lifecycle hook that is called when the component is being destroyed.\n   * It is recommended to perform any necessary cleanup operations here,\n   * such as unsubscribing from subscriptions or releasing resources.\n   *\n   * @return {void}\n   */\n  ngOnDestroy(): void {\n    if (this.postServiceSubscription) {\n      this.postServiceSubscription.unsubscribe();\n    }\n  }\n\n}\n\n    \n\n    \n        \n  Posts\n  \n    Create\n    Sort by {{ sortBy }}\n      \n    \n    \n      \n        \n          Date\n          \n          {{ sortDirections['date'] === 'asc' ? 'arrow_downward' : 'arrow_upward' }}\n        \n        \n      \n      \n        \n          Title\n          \n          {{ sortDirections['title'] === 'asc' ? 'arrow_downward' : 'arrow_upward' }}\n        \n        \n      \n    \n  \n  \n  \n    \n      \n        \n          \n            {{ post.title | titlecase }}\n            \n              {{ post.created_at | date:'mediumDate' }}\n               by {{ post.username }}\n            \n          \n          \n            {{ post.content }}\n          \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./posts.component.scss\n                \n                /* Customized Material UI */\n\nmat-card.card {\n  --flex-direction: column;\n  --justify-content: space-between;\n  background-color: var(--gray-50);\n  display: flex;\n  flex-direction: var(--flex-direction);\n  justify-content: var(--justify-content);\n}\n\nmat-card-subtitle, .post-subtitle {\n  color: black;\n  font-size: clamp(0.75rem, 1vw, 1rem);\n}\n\n\n.mat-divider.posts {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.posts-container {\n  --min-column-size: 20rem;\n  --minmax-min: min(var(--min-column-size), 100%);\n  --minmax-max: 1fr;\n  display: grid;\n  //grid-template-columns: repeat(3, 1fr);\n  grid-template-columns: repeat(auto-fit, minmax(var(--minmax-min), var(--minmax-max)));\n  gap: 1rem;\n}\n\n/** Flex utilities */\n.posts-header-container {\n  display: flex;\n  gap: 1rem;\n  justify-content: space-between;\n}\n\n@media (width \n                \n                    ../../../../shared/styles/topic-card-styles.css\n                \n                mat-card-title {\n  font-size: clamp(1rem, 1.75vw, 1.5rem);\n  font-weight: bold;\n}\n\nmat-card-content {\n  font-size: clamp(0.75rem, 1.5vw, 1.25rem);\n}\n\n.topic-card-button {\n  font-size: clamp(0.75rem, 1.5vw, 1.25rem);\n}\n\nmat-card-actions {\n  display: flex;\n  justify-content: center; /* Centers the button horizontally */\n  align-items: center; /* Centers the button vertically if the container has a height */\n}\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Posts      Create    Sort by {{ sortBy }}                                      Date                    {{ sortDirections[\\'date\\'] === \\'asc\\' ? \\'arrow_downward\\' : \\'arrow_upward\\' }}                                              Title                    {{ sortDirections[\\'title\\'] === \\'asc\\' ? \\'arrow_downward\\' : \\'arrow_upward\\' }}                                                                        {{ post.title | titlecase }}                          {{ post.created_at | date:\\'mediumDate\\' }}               by {{ post.username }}                                            {{ post.content }}                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/auth/pages/register/register.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MaterialModule\n                            NgClass\n                            FormsModule\n                            ReactiveFormsModule\n                            RouterLink\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n            \n                styleUrl\n                ./register.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authServiceSubscription\n                            \n                            \n                                controlNames\n                            \n                            \n                                errorMessages\n                            \n                            \n                                formControls\n                            \n                            \n                                labels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRegisterRequest\n                            \n                            \n                                    Private\n                                handleRegistration\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onBlur\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/auth/pages/register/register.component.ts:104\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service responsible for authenticating and authorizing users.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router service used for navigation in the application.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRegisterRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRegisterRequest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/register/register.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Creates a register request object with the provided form input values.\n\n\n                        \n                            Returns :         RegisterRequest\n\n                        \n                            \n                                \nRegister request object containing username, email, and password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleRegistration\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRegistration(registerRequest: RegisterRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/register/register.component.ts:155\n                        \n                    \n\n\n            \n                \n                        Handles the registration request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerRequest\n                                            \n                                                            RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe registration request object containing user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/register/register.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called when the component is about to be destroyed.\nUnsubscribes from the authServiceSubscription if it exists.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nDoes not return anything.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBlur\n                        \n                    \n                \n            \n            \n                \nonBlur(controlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/register/register.component.ts:173\n                        \n                    \n\n\n            \n                \n                        Function to handle onBlur event of form control\nWhen leave a control, check if there is some errors on the form\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the form control\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/pages/register/register.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Handles form submission\nThis method is called when a form submission event occurs. It checks if the username, email,\nand password fields are valid. If all three fields are valid, it creates a RegisterRequest\nobject using the values from the form fields and calls the \"handleRegistration\" method.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                No return value\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/register/register.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        controlNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: APP_CONSTANTS.VALIDATION_MESSAGES.USERNAME_VALIDATION_RULE,\n    email: APP_CONSTANTS.VALIDATION_MESSAGES.EMAIL_VALIDATION_RULE,\n    password: APP_CONSTANTS.VALIDATION_MESSAGES.PASSWORD_VALIDATION_RULE,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/register/register.component.ts:71\n                        \n                    \n\n            \n                \n                    Control names variable.\nExample :         Each control name is a string key associated with a string value.\n         The string value describes the requirements or purpose of the control.\n\n                         including at least 1 uppercase letter, 1 lowercase letter, 1 digit, and 1 special character.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: '',\n    email: '',\n    password: '',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/register/register.component.ts:100\n                        \n                    \n\n            \n                \n                    The errorMessages variable is an object that stores error messages for different keys.\nThe object follows the structure where each key represents a field identifier and its corresponding value\nrepresents the error message associated with that field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formControls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: new FormControl('', [\n      Validators.required,\n      Validators.minLength(4)]),\n    email: new FormControl('', [\n      Validators.email,\n      Validators.required]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9]).{8,}$'),\n    ]),\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/register/register.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    username: 'Username',\n    email: 'Email',\n    password: 'Password',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/pages/register/register.component.ts:84\n                        \n                    \n\n            \n                \n                    An object that contains the labels for different variables.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy} from '@angular/core';\nimport {NgClass, NgIf} from \"@angular/common\";\nimport {FormControl, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {MaterialModule} from \"../../../../shared/material.modules\";\nimport {Subscription} from \"rxjs\";\nimport {Router, RouterLink} from \"@angular/router\";\nimport {RegisterRequest} from \"../../../../core/interfaces/auth/register.request\";\nimport {AuthenticationService} from \"../../services/authentication.service\";\nimport {APP_CONSTANTS} from \"../../../../shared/constants\";\n\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [\n    MaterialModule,\n    NgClass,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterLink,\n    NgIf\n  ],\n  templateUrl: './register.component.html',\n  styleUrl: './register.component.scss'\n})\n/**\n * Represents the RegisterComponent class.\n *\n * This class is responsible for handling the registration functionality of the application.\n * It implements the OnInit and OnDestroy interfaces.\n *\n * @class\n * @implements {OnDestroy}\n *\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport class RegisterComponent implements OnDestroy {\n\n  // AuthService subscription\n  private authServiceSubscription: Subscription | undefined;\n\n  // Object that contains form control objects.\n  formControls: { [key: string]: FormControl } = {\n    username: new FormControl('', [\n      Validators.required,\n      Validators.minLength(4)]),\n    email: new FormControl('', [\n      Validators.email,\n      Validators.required]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9]).{8,}$'),\n    ]),\n  };\n\n\n  /**\n   * Control names variable.\n   *\n   * @description An object that maps control names to their corresponding descriptions.\n   *              Each control name is a string key associated with a string value.\n   *              The string value describes the requirements or purpose of the control.\n   *\n   * @property {string} username - The description of the username control. It should have at least 4 characters.\n   * @property {string} email - The description of the email control. It should be a valid email address.\n   * @property {string} password - The description of the password control. It should have at least 8 characters,\n   *                              including at least 1 uppercase letter, 1 lowercase letter, 1 digit, and 1 special character.\n   */\n  controlNames: { [key: string]: string } = {\n    username: APP_CONSTANTS.VALIDATION_MESSAGES.USERNAME_VALIDATION_RULE,\n    email: APP_CONSTANTS.VALIDATION_MESSAGES.EMAIL_VALIDATION_RULE,\n    password: APP_CONSTANTS.VALIDATION_MESSAGES.PASSWORD_VALIDATION_RULE,\n  };\n\n  /**\n   * An object that contains the labels for different variables.\n   *\n   * @property {string} username - The label for a username variable.\n   * @property {string} email - The label for an email variable.\n   * @property {string} password - The label for a password variable.\n   */\n  labels: { [key: string]: string } = {\n    username: 'Username',\n    email: 'Email',\n    password: 'Password',\n  };\n\n  /**\n   * @description\n   * The `errorMessages` variable is an object that stores error messages for different keys.\n   * The object follows the structure where each key represents a field identifier and its corresponding value\n   * represents the error message associated with that field.\n   *\n   * @property {string} [username=''] The error message for the username field.\n   * @property {string} [email=''] The error message for the email field.\n   * @property {string} [password=''] The error message for the password field.\n   */\n  errorMessages: { [key: string]: string } = {\n    username: '',\n    email: '',\n    password: '',\n  };\n\n  /**\n   * Constructs a new instance of the class.\n   *\n   * @param {AuthenticationService} authService - The authentication service responsible for authenticating and authorizing users.\n   * @param {Router} router - The router service used for navigation in the application.\n   */\n  constructor(private authService: AuthenticationService,\n              private router: Router) {\n  }\n\n  /**\n   * Handles form submission\n   *\n   * This method is called when a form submission event occurs. It checks if the username, email,\n   * and password fields are valid. If all three fields are valid, it creates a RegisterRequest\n   * object using the values from the form fields and calls the \"handleRegistration\" method.\n   *\n   * @returns {void} No return value\n   */\n  onSubmit(): void {\n    if (this.formControls[\"username\"].valid && this.formControls['email'].valid && this.formControls['password'].valid) {\n      const registerRequest: RegisterRequest = this.createRegisterRequest();\n      this.handleRegistration(registerRequest);\n    }\n  }\n\n  /**\n   * Creates a register request object with the provided form input values.\n   *\n   * @private\n   * @return {RegisterRequest} - Register request object containing username, email, and password.\n   */\n  private createRegisterRequest(): RegisterRequest {\n    return {\n      username: this.formControls['username'].value,\n      email: this.formControls['email'].value,\n      password: this.formControls['password'].value,\n    };\n  }\n\n  /**\n   * Handles the registration request.\n   *\n   * @param {RegisterRequest} registerRequest - The registration request object containing user details.\n   *\n   * @private\n   *\n   * @return {void}\n   */\n  private handleRegistration(registerRequest: RegisterRequest): void {\n    this.authServiceSubscription = this.authService.register(registerRequest).subscribe({\n      next: () => {\n        this.router.navigate(['/posts']).then(() => {\n        });\n      },\n      error: error => {\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Function to handle onBlur event of form control\n   * When leave a control, check if there is some errors on the form\n   * @param {string} controlName - Name of the form control\n   * @returns {void}\n   */\n  onBlur(controlName: string): void {\n    const control: FormControl = this.formControls[controlName];\n    control.markAsTouched();\n    if (control.hasError('required')) {\n      this.errorMessages[controlName] = APP_CONSTANTS.ERROR_MESSAGES.PLEASE_ENTER + `${this.controlNames[controlName]}`;\n    } else if (control.hasError('minlength')) {\n      if (controlName == \"username\") this.errorMessages[controlName] = APP_CONSTANTS.VALIDATION_MESSAGES.USERNAME_VALIDATION_RULE;\n    } else if (control.hasError('email')) {\n      this.errorMessages[controlName] = APP_CONSTANTS.VALIDATION_MESSAGES.EMAIL_VALIDATION_RULE;\n    } else if (control.hasError('pattern')) {\n      this.errorMessages[controlName] = APP_CONSTANTS.VALIDATION_MESSAGES.PASSWORD_VALIDATION_RULE;\n    } else {\n      this.errorMessages[controlName] = '';\n    }\n  }\n\n  /**\n   * Lifecycle hook called when the component is about to be destroyed.\n   * Unsubscribes from the `authServiceSubscription` if it exists.\n   *\n   * @return {void} - Does not return anything.\n   */\n  ngOnDestroy(): void {\n    if (this.authServiceSubscription) {\n      this.authServiceSubscription.unsubscribe();\n    }\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n  \n\n  \n    Register\n\n    \n      {{ labels['username'] }}\n      \n      \n        {{ errorMessages['username'] }}\n      \n    \n\n    \n      {{ labels['email'] }}\n      \n      \n        {{ errorMessages['email'] }}\n      \n    \n\n    \n      {{ labels['password'] }}\n      \n      \n        {{ errorMessages['password'] }}\n      \n    \n\n    Register\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Register          {{ labels[\\'username\\'] }}                    {{ errorMessages[\\'username\\'] }}                    {{ labels[\\'email\\'] }}                    {{ errorMessages[\\'email\\'] }}                    {{ labels[\\'password\\'] }}                    {{ errorMessages[\\'password\\'] }}              Register      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterRequest.html":{"url":"interfaces/RegisterRequest.html","title":"interface - RegisterRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/auth/register.request.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a request to register a new user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterRequest {\n  email: string;\n  username: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/auth/services/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _isUserLoggedIn\n                            \n                            \n                                    Private\n                                _sessionUser\n                            \n                            \n                                    Private\n                                _topicSubscriptions\n                            \n                            \n                                    Public\n                                isUserLoggedIn$\n                            \n                            \n                                    Public\n                                sessionUser$\n                            \n                            \n                                    Public\n                                topicSubscriptions$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleUnauthorizedAccess\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                logout\n                            \n                            \n                                    Private\n                                resetUserSession\n                            \n                            \n                                    Public\n                                    Async\n                                setUpUserSession\n                            \n                            \n                                    Public\n                                updateUser\n                            \n                            \n                                    Private\n                                updateUserTopicSubscriptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, topicService: TopicService)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/auth/services/session.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleUnauthorizedAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUnauthorizedAccess(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resetUserSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetUserSession()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        setUpUserSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpUserSession()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(modifiedUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Update the session user and topic subscriptions for the modified user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modifiedUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe modified user object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateUserTopicSubscriptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserTopicSubscriptions(modifiedUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/session.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Updates the topic subscriptions for a given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modifiedUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The modified user object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _isUserLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/session.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _sessionUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/session.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _topicSubscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/session.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isUserLoggedIn$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this._isUserLoggedIn.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/session.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sessionUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this._sessionUser.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/session.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        topicSubscriptions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this._topicSubscriptions.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/session.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {BehaviorSubject, catchError, firstValueFrom, Observable} from \"rxjs\";\nimport {User} from \"../interfaces/User\";\nimport {Topic} from \"../../topics/interfaces/topic\";\nimport {UserService} from \"./api/user.service\";\nimport {TopicService} from \"../../topics/services/topic.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  private _sessionUser: BehaviorSubject = new BehaviorSubject(null);\n  public sessionUser$: Observable = this._sessionUser.asObservable();\n\n  private _topicSubscriptions: BehaviorSubject = new BehaviorSubject([]);\n  public topicSubscriptions$: Observable = this._topicSubscriptions.asObservable();\n\n  private _isUserLoggedIn: BehaviorSubject = new BehaviorSubject(false);\n  public isUserLoggedIn$: Observable = this._isUserLoggedIn.asObservable();\n\n  constructor(private userService: UserService,\n              private topicService: TopicService) {\n    this.setUpUserSession().then(r => {\n    });\n  }\n\n  public login(token: string): void {\n    localStorage.setItem('token', token);\n    this._isUserLoggedIn.next(true);\n    this.setUpUserSession();\n  }\n\n  public async setUpUserSession(): Promise {\n    const token: string | null = localStorage.getItem('token');\n    if (token) {\n      try {\n        const user: void | User = await firstValueFrom(\n          this.userService.getUser().pipe(catchError(error => this.handleUnauthorizedAccess(error)))\n        );\n        if (user) {\n          this._sessionUser.next(user);\n          const topics: Topic[] = await firstValueFrom(this.topicService.getAllTopics());\n          if (topics) {\n            const topicSubscriptions: Topic[] = topics.filter((topic: Topic) => user.subscribedTopicIds.includes(topic.id));\n            this._topicSubscriptions.next(topicSubscriptions);\n          }\n          this._isUserLoggedIn.next(true);\n        }\n      } catch (error) {\n        throw error;\n      }\n    }\n  }\n\n  public logout(): void {\n    localStorage.removeItem('token');\n    this.resetUserSession();\n  }\n\n  private resetUserSession(): void {\n    this._sessionUser.next(null);\n    this._isUserLoggedIn.next(false);\n    this._topicSubscriptions.next([]);\n  }\n\n  private handleUnauthorizedAccess(error: any): Promise {\n    if (error.status === 401) {\n      localStorage.removeItem('token');\n      this._isUserLoggedIn.next(false);\n    }\n    throw error;\n  }\n\n  /**\n   * Update the session user and topic subscriptions for the modified user.\n   *\n   * @param {User} modifiedUser - The modified user object.\n   *\n   * @return {void}\n   */\n  public updateUser(modifiedUser: User): void {\n    this._sessionUser.next(modifiedUser);\n    this.updateUserTopicSubscriptions(modifiedUser);\n  }\n\n  /**\n   * Updates the topic subscriptions for a given user.\n   *\n   * @param {User} modifiedUser The modified user object.\n   * @private\n   * @return {void}\n   */\n  private updateUserTopicSubscriptions(modifiedUser: User): void {\n    this.topicService.getAllTopics().subscribe((topic: Topic[]) => {\n      const topicSubscriptions: Topic[] = topic.filter((topic: Topic) => modifiedUser.subscribedTopicIds.includes(topic.id));\n      this._topicSubscriptions.next(topicSubscriptions);\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SnackBarService.html":{"url":"injectables/SnackBarService.html","title":"injectable - SnackBarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SnackBarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/snack-bar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for displaying snackbars.\nThis service provides methods for opening snackbars with different types of messages.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                openSnackBar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(snackBar: MatSnackBar, configurationService: ConfigurationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/snack-bar.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configurationService\n                                                  \n                                                        \n                                                                        ConfigurationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        openSnackBar\n                        \n                    \n                \n            \n            \n                \nopenSnackBar(message: string, action: string, cssClass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/snack-bar.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Opens a snackbar with the provided message and action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe message to be displayed in the snackbar.\n\n\n                                            \n                                        \n                                        \n                                                action\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Close'\n                                            \n\n                                            \n                                                    \nThe action button text to be displayed in the snackbar. Default is 'Close'.\n\n\n                                            \n                                        \n                                        \n                                                cssClass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '\\'error-snackbar\\''\n                                            \n\n                                            \n                                                    \nThe CSS class to be applied to the snackbar. Default is 'error-snackbar'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \nThis method does not return anything.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {ConfigurationService} from \"./configuration.service\";\n\n/**\n * Service for displaying snackbars.\n *\n * @remarks\n * This service provides methods for opening snackbars with different types of messages.\n *\n * @category Service\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * @author Pignon Pierre-Olivier\n *\n * @version 1.0\n */\nexport class SnackBarService {\n\n  constructor(private snackBar: MatSnackBar,\n              private configurationService: ConfigurationService) {\n  }\n\n  /**\n   * Opens a snackbar with the provided message and action.\n   *\n   * @param {string} message - The message to be displayed in the snackbar.\n   * @param {string} action - The action button text to be displayed in the snackbar. Default is 'Close'.\n   * @param {string} cssClass - The CSS class to be applied to the snackbar. Default is 'error-snackbar'.\n   * @return {void} - This method does not return anything.\n   */\n  openSnackBar(message: string, action: string = 'Close', cssClass: string = '\\'error-snackbar\\''): void {\n    this.snackBar.open(message, action, {\n      duration: this.configurationService.getErrorSnackBarDuration(),\n      horizontalPosition: this.configurationService.getErrorSnackBarHorizontalPosition(),\n      verticalPosition: this.configurationService.getErrorSnackBarVerticalPosition(),\n      panelClass: [cssClass]\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Topic.html":{"url":"interfaces/Topic.html","title":"interface - Topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/topics/interfaces/topic.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a topic for a post.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Topic {\n  id: number;\n  title: string;\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicService.html":{"url":"injectables/TopicService.html","title":"injectable - TopicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TopicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/topics/services/topic.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiUrl\n                            \n                            \n                                    Private\n                                topics\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTopics\n                            \n                            \n                                    Private\n                                httpGetTopics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/topics/services/topic.service.ts:26\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe HttpClient instance to be used for making HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTopics\n                        \n                    \n                \n            \n            \n                \ngetAllTopics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/topics/services/topic.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves all topics.\n   If topics are already available, it returns an Observable of the existing topics.\n   Otherwise, it makes an HTTP GET request to fetch the topics and returns the result as Observable.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits the array of topics.\nIf topics are already available, it returns an Observable of the existing topics.\nOtherwise, it makes an HTTP GET request to fetch the topics and returns the result as Observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        httpGetTopics\n                        \n                    \n                \n            \n            \n                \n                        \n                    httpGetTopics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/topics/services/topic.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Retrieves all topics from the specified API URL using an HTTP GET request.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An observable that emits an array of topics retrieved from the API.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : environment.apiUrl + '/topics'\n                    \n                \n                    \n                        \n                                Defined in src/app/features/topics/services/topic.service.ts:22\n                        \n                    \n\n            \n                \n                    The URL used to make API requests for topics.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Topic[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/topics/services/topic.service.ts:26\n                        \n                    \n\n            \n                \n                    Represents a list of topics.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {environment} from \"../../../../environments/environment\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Topic} from \"../interfaces/topic\";\nimport {Observable, of, tap} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * TopicService class\n *\n * This class provides methods for retrieving topics from an API.\n */\nexport class TopicService {\n\n  /**\n   * The URL used to make API requests for topics.\n   *\n   * @type {string}\n   */\n  private apiUrl: string = environment.apiUrl + '/topics';\n  /**\n   * Represents a list of topics.\n   */\n  private topics: Topic[] | null = null;\n\n  /**\n   * Constructs a new instance of the class.\n   *\n   * @param {HttpClient} httpClient - The HttpClient instance to be used for making HTTP requests.\n   */\n  constructor(private httpClient: HttpClient) {\n  }\n\n  /**\n   * Retrieves all topics from the specified API URL using an HTTP GET request.\n   *\n   * @private\n   * @returns {Observable} An observable that emits an array of topics retrieved from the API.\n   */\n  private httpGetTopics(): Observable {\n    return this.httpClient.get(this.apiUrl).pipe(\n      tap((topics: Topic[]) => this.topics = topics)\n    );\n  }\n\n  /**\n   * Retrieves all topics.\n   *\n   * @returns {Observable} An Observable that emits the array of topics.\n   *    If topics are already available, it returns an Observable of the existing topics.\n   *    Otherwise, it makes an HTTP GET request to fetch the topics and returns the result as Observable.\n   */\n  getAllTopics(): Observable {\n    return this.topics ? of(this.topics) : this.httpGetTopics();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TopicsComponent.html":{"url":"components/TopicsComponent.html","title":"component - TopicsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TopicsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/features/topics/pages/topics/topics.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-topics\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatCard\n                            MatCardHeader\n                            MatCardContent\n                            MatCardActions\n                            MatCardTitle\n                            MatButton\n                            NgForOf\n                \n            \n\n            \n                styleUrls\n                ./topics.component.scss,../../../../shared/styles/topic-card-styles.css\n            \n\n\n\n            \n                templateUrl\n                ./topics.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                topics\n                            \n                            \n                                    Private\n                                topicServiceSubscription\n                            \n                            \n                                    Private\n                                userServiceSubscription\n                            \n                            \n                                userTopicSubscriptionIds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasUserSubscribed\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubscribeClick\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService, userService: UserService, topicService: TopicService)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/topics/pages/topics/topics.component.ts:45\n                            \n                        \n\n                \n                    \n                            Constructor for the MyClass class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe session service.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe user service.\n\n\n                                                        \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe topic service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasUserSubscribed\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasUserSubscribed(topicId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/topics/pages/topics/topics.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Checks if the user has subscribed to the specified topic.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the topic to check subscription for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the user has subscribed to the topic, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/topics/pages/topics/topics.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when a component, directive, or pipe is destroyed.\nThis method is invoked when the component is about to be destroyed. It should be used to clean up any resources that the component is holding, such as unsubscribing from observ\nables or canceling any ongoing requests.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                Nothing is returned by this method.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/topics/pages/topics/topics.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubscribeClick\n                        \n                    \n                \n            \n            \n                \nonSubscribeClick(topicId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/topics/pages/topics/topics.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Handles the subscribe button click event for a given topic.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the topic to subscribe to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Topic[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/topics/pages/topics/topics.component.ts:41\n                        \n                    \n\n            \n                \n                    Represents an array of topics.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        topicServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/topics/pages/topics/topics.component.ts:36\n                        \n                    \n\n            \n                \n                    Represents the subscription status of the topic service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/features/topics/pages/topics/topics.component.ts:32\n                        \n                    \n\n            \n                \n                    Represents the subscription status of a user to the userService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userTopicSubscriptionIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/features/topics/pages/topics/topics.component.ts:45\n                        \n                    \n\n            \n                \n                    Array containing the subscription IDs of the user's topic subscriptions.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatCard, MatCardActions, MatCardContent, MatCardHeader, MatCardTitle} from \"@angular/material/card\";\nimport {MatButton} from \"@angular/material/button\";\nimport {NgForOf} from \"@angular/common\";\nimport {Subscription} from \"rxjs\";\nimport {User} from \"../../../auth/interfaces/User\";\nimport {Topic} from \"../../interfaces/topic\";\nimport {SessionService} from \"../../../auth/services/session.service\";\nimport {UserService} from \"../../../auth/services/api/user.service\";\nimport {TopicService} from \"../../services/topic.service\";\n\n@Component({\n  selector: 'app-topics',\n  standalone: true,\n  imports: [\n    MatCard,\n    MatCardHeader,\n    MatCardContent,\n    MatCardActions,\n    MatCardTitle,\n    MatButton,\n    NgForOf\n  ],\n  templateUrl: './topics.component.html',\n  styleUrls: ['./topics.component.scss', '../../../../shared/styles/topic-card-styles.css']\n})\nexport class TopicsComponent implements OnInit, OnDestroy {\n\n  /**\n   * Represents the subscription status of a user to the userService.\n   */\n  private userServiceSubscription: Subscription | null = null;\n  /**\n   * Represents the subscription status of the topic service.\n   */\n  private topicServiceSubscription: Subscription | null = null;\n\n  /**\n   * Represents an array of topics.\n   */\n  topics: Topic[] = [];\n  /**\n   * Array containing the subscription IDs of the user's topic subscriptions.\n   */\n  userTopicSubscriptionIds: number[] = [];\n\n  /**\n   * Constructor for the MyClass class.\n   *\n   * @param {SessionService} sessionService - The session service.\n   * @param {UserService} userService - The user service.\n   * @param {TopicService} topicService - The topic service.\n   */\n  constructor(\n    private sessionService: SessionService,\n    private userService: UserService,\n    private topicService: TopicService\n  ) {\n  }\n\n  /**\n   * Checks if the user has subscribed to the specified topic.\n   *\n   * @param {number} topicId - The ID of the topic to check subscription for.\n   * @return {boolean} - Returns true if the user has subscribed to the topic, false otherwise.\n   */\n  public hasUserSubscribed(topicId: number): boolean {\n    return this.userTopicSubscriptionIds.includes(topicId);\n  }\n\n  /**\n   * Handles the subscribe button click event for a given topic.\n   *\n   * @param {number} topicId - The ID of the topic to subscribe to.\n   * @return {void}\n   */\n  onSubscribeClick(topicId: number): void {\n    this.userServiceSubscription = this.userService.subscribeTopic(topicId)\n      .subscribe((user: User) => {\n        this.sessionService.updateUser(user);\n      });\n  }\n\n\n  /**\n   * Initializes the component.\n   *\n   * @return {void}\n   */\n  ngOnInit(): void {\n    this.topicServiceSubscription = this.topicService.getAllTopics().subscribe((topics: Topic[]) => {\n      this.topics = topics;\n    });\n\n    this.sessionService.topicSubscriptions$.subscribe((topics: Topic[]) => {\n      this.userTopicSubscriptionIds = topics.map((topic: Topic) => topic.id);\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called when a component, directive, or pipe is destroyed.\n   *\n   * This method is invoked when the component is about to be destroyed. It should be used to clean up any resources that the component is holding, such as unsubscribing from observ\n   *ables or canceling any ongoing requests.\n   *\n   * @return {void} Nothing is returned by this method.\n   */\n  ngOnDestroy(): void {\n    if (this.userServiceSubscription) {\n      this.userServiceSubscription.unsubscribe();\n    }\n    if (this.topicServiceSubscription) {\n      this.topicServiceSubscription.unsubscribe();\n    }\n  }\n\n}\n\n    \n\n    \n        User topic subscriptions\n\n\n  \n    \n      {{ topic.title }}\n    \n    \n      {{ topic.description }}\n    \n    \n      {{ hasUserSubscribed(topic.id) ? \"Subscribed\" : \"Subscribe\" }}\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./topics.component.scss\n                \n                \n\n                \n                    ../../../../shared/styles/topic-card-styles.css\n                \n                mat-card-title {\n  font-size: clamp(1rem, 1.75vw, 1.5rem);\n  font-weight: bold;\n}\n\nmat-card-content {\n  font-size: clamp(0.75rem, 1.5vw, 1.25rem);\n}\n\n.topic-card-button {\n  font-size: clamp(0.75rem, 1.5vw, 1.25rem);\n}\n\nmat-card-actions {\n  display: flex;\n  justify-content: center; /* Centers the button horizontally */\n  align-items: center; /* Centers the button vertically if the container has a height */\n}\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'User topic subscriptions            {{ topic.title }}              {{ topic.description }}              {{ hasUserSubscribed(topic.id) ? \"Subscribed\" : \"Subscribe\" }}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ContentLayoutComponent', 'selector': 'app-content-layout'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NewPostComponent', 'selector': 'app-new-post'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PostCommentComponent', 'selector': 'app-post-comment'},{'name': 'PostDetailsComponent', 'selector': 'app-details'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicsComponent', 'selector': 'app-topics'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TopicsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/auth/interfaces/User.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            subscribedTopicIds\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribedTopicIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribedTopicIds:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n  id: number;\n  email: string;\n  username: string;\n  password: string;\n  subscribedTopicIds: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/features/auth/services/api/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getUser\n                            \n                            \n                                    Public\n                                subscribeTopic\n                            \n                            \n                                    Public\n                                unsubscribeTopic\n                            \n                            \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/features/auth/services/api/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/api/user.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the user information from the API.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits the user information.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        subscribeTopic\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribeTopic(topicId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/api/user.service.ts:52\n                        \n                    \n\n\n            \n                \n                        User subscribes to a topic.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the topic to subscribe to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \nAn observable that emits the subscribed user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeTopic\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsubscribeTopic(topicId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/api/user.service.ts:62\n                        \n                    \n\n\n            \n                \n                        User unsubscribes from a topic.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the topic to unsubscribe from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \nAn observable that emits a User object when the unsubscribe operation is successful.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/features/auth/services/api/user.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Updates a user in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \nAn Observable that emits the updated User after successfully updating it in the database.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : environment.apiUrl + '/me'\n                    \n                \n                    \n                        \n                                Defined in src/app/features/auth/services/api/user.service.ts:22\n                        \n                    \n\n            \n                \n                    Represents the URL for accessing the user's profile information.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {environment} from \"../../../../../environments/environment\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {User} from \"../../interfaces/User\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * UserService class that provides methods for interacting with user data.\n */\nexport class UserService {\n\n  /**\n   * Represents the URL for accessing the user's profile information.\n   *\n   * @type {string}\n   * @memberof global\n   */\n  private apiUrl: string = environment.apiUrl + '/me';\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * Retrieves the user information from the API.\n   *\n   * @return {Observable} An Observable that emits the user information.\n   */\n  public getUser(): Observable {\n    return this.http.get(`${this.apiUrl}`)\n  }\n\n  /**\n   * Updates a user in the database.\n   *\n   * @param {User} user - The user to be updated.\n   * @return {Observable} - An Observable that emits the updated User after successfully updating it in the database.\n   */\n  public updateUser(user: User): Observable {\n    return this.http.put(`${this.apiUrl}`, user);\n  }\n\n  /**\n   * User subscribes to a topic.\n   *\n   * @param {number} topicId - The ID of the topic to subscribe to.\n   * @return {Observable} - An observable that emits the subscribed user.\n   */\n  public subscribeTopic(topicId: number): Observable {\n    return this.http.post(`${this.apiUrl}/topic/${topicId}`, {});\n  }\n\n  /**\n   * User unsubscribes from a topic.\n   *\n   * @param {number} topicId - The id of the topic to unsubscribe from.\n   * @return {Observable} - An observable that emits a User object when the unsubscribe operation is successful.\n   */\n  public unsubscribeTopic(topicId: number): Observable {\n    return this.http.delete(`${this.apiUrl}/topic/${topicId}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/authGuardService.html":{"url":"injectables/authGuardService.html","title":"injectable - authGuardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  authGuardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/guards/auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                    Async\n                                checkUserLoginStatus\n                            \n                            \n                                    Private\n                                handleNotAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/guards/auth.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/auth.guard.ts:24\n                        \n                    \n\n\n            \n                \n                        Determines if the user is authorized to access a specific route.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                route\n                                            \n                                                        ActivatedRouteSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe route being navigated to.\n\n\n                                            \n                                        \n                                        \n                                                state\n                                            \n                                                        RouterStateSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe state of the router.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to a boolean value indicating if the user is authorized to access the route.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkUserLoginStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkUserLoginStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/auth.guard.ts:36\n                        \n                    \n\n\n            \n                \n                        Checks the login status of the user.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating the login status of the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleNotAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/auth.guard.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\nimport {Injectable} from \"@angular/core\";\nimport {SessionService} from \"../../features/auth/services/session.service\";\nimport {firstValueFrom, map, take} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class authGuardService {\n  constructor(\n    private sessionService: SessionService,\n    private router: Router\n  ) {\n  }\n\n  /**\n   * Determines if the user is authorized to access a specific route.\n   *\n   * @param {ActivatedRouteSnapshot} route - The route being navigated to.\n   * @param {RouterStateSnapshot} state - The state of the router.\n   *\n   * @returns {Promise} - A promise that resolves to a boolean value indicating if the user is authorized to access the route.\n   */\n  async canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Promise {\n    return await this.checkUserLoginStatus();\n  }\n\n  /**\n   * Checks the login status of the user.\n   *\n   * @private\n   * @returns {Promise} A Promise that resolves to a boolean indicating the login status of the user.\n   */\n  private async checkUserLoginStatus(): Promise {\n    await this.sessionService.setUpUserSession();\n    return await firstValueFrom(\n      this.sessionService.isUserLoggedIn$.pipe(\n        take(1),\n        map(this.handleNotAuthenticated.bind(this))\n      )\n    );\n  }\n\n  private handleNotAuthenticated(isAuthenticated: boolean): boolean {\n    if (isAuthenticated) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/components/page-not-found/page-not-found.component.ts\n            \n            component\n            PageNotFoundComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/components/post-comment/post-comment.component.ts\n            \n            component\n            PostCommentComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/guards/auth.guard.ts\n            \n            injectable\n            authGuardService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/app/core/guards/unauth.guard.ts\n            \n            injectable\n            unAuthGuardService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/interceptors/jwt.interceptor.ts\n            \n            interceptor\n            JwtInterceptor\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/auth/login.request.ts\n            \n            interface\n            LoginRequest\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/auth/login.response.ts\n            \n            interface\n            LoginResponse\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/auth/register.request.ts\n            \n            interface\n            RegisterRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/environment.ts\n            \n            interface\n            Environment\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/core/services/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/core/services/error-handler.service.ts\n            \n            injectable\n            ErrorHandlerService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/core/services/mat-sidenav.service.ts\n            \n            injectable\n            MatSidenavService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/core/services/snack-bar.service.ts\n            \n            injectable\n            SnackBarService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/features/auth/interfaces/User.ts\n            \n            interface\n            User\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/features/auth/pages/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                src/app/features/auth/pages/me/me.component.ts\n            \n            component\n            MeComponent\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                src/app/features/auth/pages/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                src/app/features/auth/services/api/user.service.ts\n            \n            injectable\n            UserService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/features/auth/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/features/auth/services/session.service.ts\n            \n            injectable\n            SessionService\n            \n                13 %\n                (2/15)\n            \n        \n        \n            \n                \n                src/app/features/posts/interfaces/comment.ts\n            \n            interface\n            Comment\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/features/posts/interfaces/post.ts\n            \n            interface\n            Post\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/features/posts/pages/details/post-details.component.ts\n            \n            component\n            PostDetailsComponent\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/app/features/posts/pages/new-post/new-post.component.ts\n            \n            component\n            NewPostComponent\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/features/posts/pages/posts/posts.component.ts\n            \n            component\n            PostsComponent\n            \n                52 %\n                (9/17)\n            \n        \n        \n            \n                \n                src/app/features/posts/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                88 %\n                (15/17)\n            \n        \n        \n            \n                \n                src/app/features/topics/interfaces/topic.ts\n            \n            interface\n            Topic\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/features/topics/pages/topics/topics.component.ts\n            \n            component\n            TopicsComponent\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/app/features/topics/services/topic.service.ts\n            \n            injectable\n            TopicService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/layout/content-layout/content-layout.component.ts\n            \n            component\n            ContentLayoutComponent\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/layout/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/layout/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/pages/home/home.component.ts\n            \n            component\n            HomeComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/constants.ts\n            \n            variable\n            APP_CONSTANTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.3.8\n        \n            @angular/cdk : ^17.3.8\n        \n            @angular/common : ^17.3.8\n        \n            @angular/compiler : ^17.3.8\n        \n            @angular/core : ^17.3.8\n        \n            @angular/forms : ^17.3.8\n        \n            @angular/material : ^17.3.8\n        \n            @angular/platform-browser : ^17.3.8\n        \n            @angular/platform-browser-dynamic : ^17.3.8\n        \n            @angular/router : ^17.3.8\n        \n            rxjs : ^7.8.1\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_MaterialModule\n\n\n\ncluster_MaterialModule_imports\n\n\n\ncluster_MaterialModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nHomeComponent\n\nHomeComponent\n\nAppModule -->\n\nHomeComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nMatFormField \n\nMatFormField \n\nMatFormField  -->\n\nMaterialModule->MatFormField \n\n\n\n\n\nMatIcon \n\nMatIcon \n\nMatIcon  -->\n\nMaterialModule->MatIcon \n\n\n\n\n\nMatInput \n\nMatInput \n\nMatInput  -->\n\nMaterialModule->MatInput \n\n\n\n\n\nMatToolbar \n\nMatToolbar \n\nMatToolbar  -->\n\nMaterialModule->MatToolbar \n\n\n\n\n\nNgOptimizedImage\n\nNgOptimizedImage\n\nAppModule -->\n\nNgOptimizedImage->AppModule\n\n\n\n\n\nJwtInterceptor\n\nJwtInterceptor\n\nAppModule -->\n\nJwtInterceptor->AppModule\n\n\n\n\n\nMatFormField\n\nMatFormField\n\nMaterialModule -->\n\nMatFormField->MaterialModule\n\n\n\n\n\nMatIcon\n\nMatIcon\n\nMaterialModule -->\n\nMatIcon->MaterialModule\n\n\n\n\n\nMatInput\n\nMatInput\n\nMaterialModule -->\n\nMatInput->MaterialModule\n\n\n\n\n\nMatToolbar\n\nMatToolbar\n\nMaterialModule -->\n\nMatToolbar->MaterialModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Components\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        11 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/unAuthGuardService.html":{"url":"injectables/unAuthGuardService.html","title":"injectable - unAuthGuardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  unAuthGuardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/guards/unauth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                            \n                                    Private\n                                getUrlTreeOrBoolean\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/guards/unauth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/unauth.guard.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getUrlTreeOrBoolean\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUrlTreeOrBoolean(isLoggedIn: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/unauth.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isLoggedIn\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | UrlTree\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Router, UrlTree} from '@angular/router';\nimport {Injectable} from \"@angular/core\";\nimport {SessionService} from \"../../features/auth/services/session.service\";\nimport {map, Observable} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n  }\n)\nexport class unAuthGuardService {\n  constructor(\n    private router: Router,\n    private sessionService: SessionService,\n  ) {\n  }\n\n  public canActivate(): Observable {\n    return this.sessionService.isUserLoggedIn$.pipe(\n      map(isLoggedIn => this.getUrlTreeOrBoolean(isLoggedIn))\n    );\n  }\n\n  private getUrlTreeOrBoolean(isLoggedIn: boolean): boolean | UrlTree {\n    if (isLoggedIn) {\n      return this.router.parseUrl('/posts');\n    }\n    return !isLoggedIn;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_CONSTANTS   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_CONSTANTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  VALIDATION_MESSAGES: {\n    PASSWORD_VALIDATION_RULE: 'a password with at least 8 characters, including 1 uppercase letter, ' +\n      '1 lowercase letter, 1 number and 1 special character',\n    USERNAME_VALIDATION_RULE: 'a username with at least 4 characters',\n    EMAIL_VALIDATION_RULE: \"a valid email address\"\n\n  },\n  SORT_DIRECTIONS: {\n    ASCENDING: 'asc',\n    DESCENDING: 'desc',\n  },\n  ERROR_MESSAGES: {\n    PLEASE_ENTER: 'Please, enter ',\n    MUST_BE_AUTHENTICATED: 'You must be authenticated'\n\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  apiUrl: \"http://localhost:3005/api\",\n  errorSnackBarDuration: 5000,\n  errorSnackBarHorizontalPosition: 'center',\n  errorSnackBarVerticalPosition: 'bottom'\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  apiUrl: \"http://localhost:3005/api\",\n  errorSnackBarDuration: 1000,\n  errorSnackBarHorizontalPosition: \"center\",\n  errorSnackBarVerticalPosition: \"bottom\"\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
